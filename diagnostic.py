#!/usr/bin/env python3
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å health_check.py
"""
import os
import sys
import asyncio
import traceback
from datetime import datetime

def print_section(title):
    print(f"\n{'='*50}")
    print(f"üîç {title}")
    print(f"{'='*50}")

def print_check(name, status, details=""):
    symbol = "‚úÖ" if status else "‚ùå"
    print(f"{symbol} {name}")
    if details:
        print(f"   {details}")

async def main():
    print(f"üöÄ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤
    print_section("–ü–†–û–í–ï–†–ö–ê –ò–ú–ü–û–†–¢–û–í")
    
    try:
        from src.core import config
        print_check("–ò–º–ø–æ—Ä—Ç config", True)
    except Exception as e:
        print_check("–ò–º–ø–æ—Ä—Ç config", False, str(e))
        return
    
    try:
        import asyncpg
        print_check("–ò–º–ø–æ—Ä—Ç asyncpg", True)
    except Exception as e:
        print_check("–ò–º–ø–æ—Ä—Ç asyncpg", False, str(e))
    
    try:
        import redis
        print_check("–ò–º–ø–æ—Ä—Ç redis", True)
    except Exception as e:
        print_check("–ò–º–ø–æ—Ä—Ç redis", False, str(e))
    
    try:
        import telegram
        print_check("–ò–º–ø–æ—Ä—Ç telegram", True)
    except Exception as e:
        print_check("–ò–º–ø–æ—Ä—Ç telegram", False, str(e))
    
    try:
        from celery import Celery
        print_check("–ò–º–ø–æ—Ä—Ç Celery", True)
    except Exception as e:
        print_check("–ò–º–ø–æ—Ä—Ç Celery", False, str(e))
    
    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    print_section("–ü–†–û–í–ï–†–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò")
    
    print_check("DB_HOST", bool(config.DB_HOST), config.DB_HOST)
    print_check("DB_NAME", bool(config.DB_NAME), config.DB_NAME)
    print_check("DB_USER", bool(config.DB_USER), config.DB_USER)
    print_check("DB_PASSWORD", bool(config.DB_PASSWORD), "[–°–ö–†–´–¢–û]" if config.DB_PASSWORD else "–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù")
    print_check("CELERY_BROKER_URL", bool(config.CELERY_BROKER_URL), config.CELERY_BROKER_URL)
    print_check("TELEGRAM_BOT_TOKEN", bool(config.TELEGRAM_BOT_TOKEN), "[–£–°–¢–ê–ù–û–í–õ–ï–ù]" if config.TELEGRAM_BOT_TOKEN else "–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù")
    
    # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ PostgreSQL
    print_section("–ü–†–û–í–ï–†–ö–ê POSTGRESQL")
    
    try:
        conn = await asyncpg.connect(
            user=config.DB_USER,
            password=config.DB_PASSWORD,
            database=config.DB_NAME,
            host=config.DB_HOST,
            port=config.DB_PORT,
            timeout=5
        )
        print_check("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL", True)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã
        result = await conn.fetchval("SELECT 1")
        print_check("–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SELECT 1", result == 1)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü
        tables = await conn.fetch("""
            SELECT table_name FROM information_schema.tables 
            WHERE table_schema = 'public'
        """)
        table_names = [row['table_name'] for row in tables]
        print_check("–ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü", len(table_names) > 0, f"–¢–∞–±–ª–∏—Ü—ã: {', '.join(table_names)}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
        required_tables = ['users', 'books', 'borrowed_books', 'book_requests']
        for table in required_tables:
            exists = table in table_names
            print_check(f"–¢–∞–±–ª–∏—Ü–∞ {table}", exists)
        
        await conn.close()
        
    except Exception as e:
        print_check("PostgreSQL", False, str(e))
    
    # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ Redis
    print_section("–ü–†–û–í–ï–†–ö–ê REDIS")
    
    try:
        from redis import Redis
        r = Redis.from_url(config.CELERY_BROKER_URL, socket_connect_timeout=5)
        r.ping()
        print_check("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis", True)
        
        info = r.info()
        print_check("Redis –≤–µ—Ä—Å–∏—è", True, info.get('redis_version', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'))
        print_check("–ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã", True, str(info.get('connected_clients', 0)))
        
    except Exception as e:
        print_check("Redis", False, str(e))
    
    # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram API
    print_section("–ü–†–û–í–ï–†–ö–ê TELEGRAM API")
    
    bot_tokens = {
        'TELEGRAM_BOT_TOKEN': config.TELEGRAM_BOT_TOKEN,
        'ADMIN_BOT_TOKEN': config.ADMIN_BOT_TOKEN,
        'NOTIFICATION_BOT_TOKEN': config.NOTIFICATION_BOT_TOKEN,
        'ADMIN_NOTIFICATION_BOT_TOKEN': config.ADMIN_NOTIFICATION_BOT_TOKEN,
    }
    
    for token_name, token in bot_tokens.items():
        if not token:
            print_check(f"{token_name}", False, "–¢–æ–∫–µ–Ω –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            continue
            
        try:
            bot = telegram.Bot(token=token)
            bot_info = await bot.get_me()
            print_check(f"{token_name}", True, f"@{bot_info.username}")
        except Exception as e:
            print_check(f"{token_name}", False, str(e)[:100])
    
    # 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ Celery
    print_section("–ü–†–û–í–ï–†–ö–ê CELERY")
    
    try:
        celery_app = Celery(
            broker=config.CELERY_BROKER_URL,
            backend=config.CELERY_RESULT_BACKEND
        )
        
        inspect = celery_app.control.inspect(timeout=3)
        active_workers = inspect.active()
        
        if active_workers:
            worker_count = len(active_workers)
            print_check("Celery workers", True, f"–ù–∞–π–¥–µ–Ω–æ {worker_count} –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ—Ä–∫–µ—Ä–æ–≤")
            for worker_name in active_workers.keys():
                print(f"   - {worker_name}")
        else:
            print_check("Celery workers", False, "–ê–∫—Ç–∏–≤–Ω—ã–µ –≤–æ—Ä–∫–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
    except Exception as e:
        print_check("Celery", False, str(e))
    
    # 7. –ó–∞–ø—É—Å–∫ health_check
    print_section("–ó–ê–ü–£–°–ö HEALTH CHECK")
    
    try:
        from src.health_check import run_health_check
        all_ok, report = await run_health_check()
        print_check("Health Check", all_ok)
        print("\nüìã –ü–û–õ–ù–´–ô –û–¢–ß–ï–¢:")
        print(report)
        
    except Exception as e:
        print_check("Health Check", False, str(e))
        print("\nüêõ –î–ï–¢–ê–õ–ò –û–®–ò–ë–ö–ò:")
        traceback.print_exc()
    
    print(f"\n‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n‚ùå –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        traceback.print_exc()