# tests/test_admin_bot_integration.py
import pytest
from unittest.mock import MagicMock, AsyncMock, patch
from contextlib import contextmanager

# –ú–æ–∫–∏—Ä—É–µ–º –º–æ–¥—É–ª—å tasks –ø–µ—Ä–µ–¥ –∏–º–ø–æ—Ä—Ç–æ–º admin_bot
with patch.dict('sys.modules', {'src.core.tasks': MagicMock()}):
    from src.admin_bot import main as admin_bot
    from src.core.db import data_access as db_data
    from src.admin_bot.states import AdminState

from telegram import Update, User, Message, Chat, CallbackQuery
from telegram.ext import ContextTypes, ConversationHandler

pytestmark = pytest.mark.asyncio

def _create_mock_update(text=None, callback_data=None, photo=None, user_id=1, chat_id=1):
    """–°–æ–∑–¥–∞–µ—Ç –º–æ–∫-–æ–±—ä–µ–∫—Ç Update –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏ –¥–µ–π—Å—Ç–≤–∏–π –∞–¥–º–∏–Ω–∞."""
    update = MagicMock(spec=Update)
    update.effective_chat = MagicMock(spec=Chat, id=chat_id)
    update.effective_user = MagicMock(spec=User, id=user_id, username='test_admin')

    if text is not None:
        update.message = AsyncMock(spec=Message)
        update.message.text = text
        update.message.from_user = update.effective_user
        update.message.chat_id = chat_id
        update.callback_query = None
    
    if callback_data is not None:
        update.callback_query = AsyncMock(spec=CallbackQuery)
        update.callback_query.data = callback_data
        update.callback_query.from_user = update.effective_user
        # –°–æ–æ–±—â–µ–Ω–∏—è —Å callback –º–æ–≥—É—Ç –∏–º–µ—Ç—å —Ç–µ–∫—Å—Ç –∏–ª–∏ caption
        update.callback_query.message = AsyncMock(spec=Message)
        update.callback_query.message.text = "Some previous message"
        update.callback_query.message.caption = None
        update.callback_query.message.photo = None
        update.message = None

    if photo:
        update.message = update.message or AsyncMock(spec=Message)
        update.message.photo = [MagicMock(file_id="test_photo_file_id")]
        update.message.text = None

    return update

@pytest.fixture
def mock_context():
    """–°–æ–∑–¥–∞–µ—Ç –º–æ–∫-–æ–±—ä–µ–∫—Ç Context."""
    context = MagicMock(spec=ContextTypes.DEFAULT_TYPE)
    context.bot = AsyncMock()
    context.user_data = {}
    return context

async def test_stats_command(db_session, monkeypatch, mock_context):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ /stats –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–≤–æ–¥–Ω—É—é –ø–∞–Ω–µ–ª—å."""
    @contextmanager
    def mock_get_db_connection():
        yield db_session
    monkeypatch.setattr(admin_bot.stats, 'get_db_connection', mock_get_db_connection)
    
    update = _create_mock_update(text="/stats")
    
    await admin_bot.stats.show_stats_panel(update, mock_context)
    
    update.message.reply_text.assert_called_once()
    call_args = update.message.reply_text.call_args
    message_text = call_args[0][0]
    assert "üìä –ü–∞–Ω–µ–ª—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏" in message_text
    assert "–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π" in message_text

async def test_add_book_flow(db_session, monkeypatch, mock_context):
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–∏–≥–∏."""
    @contextmanager
    def mock_get_db_connection():
        yield db_session
    
    monkeypatch.setattr(admin_bot.books, 'get_db_connection', mock_get_db_connection)

    # --- –®–∞–≥ 1: –ù–∞—á–∏–Ω–∞–µ–º –¥–∏–∞–ª–æ–≥ ---
    update = _create_mock_update(callback_data="admin_add_book_start")
    state = await admin_bot.books.add_book_start(update, mock_context)
    assert state == AdminState.GET_NAME
    mock_context.user_data['new_book'] = {}

    # --- –®–∞–≥ 2-5: –í–≤–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ ---
    update = _create_mock_update(text="–í–æ–π–Ω–∞ –∏ –º–∏—Ä")
    state = await admin_bot.books.get_book_name(update, mock_context)
    assert state == AdminState.GET_AUTHOR

    update = _create_mock_update(text="–õ–µ–≤ –¢–æ–ª—Å—Ç–æ–π")
    state = await admin_bot.books.get_book_author(update, mock_context)
    assert state == AdminState.GET_GENRE

    update = _create_mock_update(text="–†–æ–º–∞–Ω-—ç–ø–æ–ø–µ—è")
    state = await admin_bot.books.get_book_genre(update, mock_context)
    assert state == AdminState.GET_DESCRIPTION
    
    update = _create_mock_update(text="–í–µ–ª–∏–∫–∏–π —Ä–æ–º–∞–Ω –æ —Ä—É—Å—Å–∫–æ–º –æ–±—â–µ—Å—Ç–≤–µ.")
    state = await admin_bot.books.get_book_description(update, mock_context)
    assert state == AdminState.GET_COVER

    # --- –®–∞–≥ 6: –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–ª–æ–∂–∫—É ---
    update = _create_mock_update(text="–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
    state = await admin_bot.books.skip_cover(update, mock_context)
    assert state == AdminState.CONFIRM_ADD
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç –ø–æ–∫–∞–∑–∞–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    update.message.reply_text.assert_called_with(
        text=pytest.string_containing("üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ"),
        reply_markup=pytest.anything,
        parse_mode='Markdown'
    )

    # --- –®–∞–≥ 7: –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–Ω–∏–≥—É ---
    update = _create_mock_update(callback_data="add_book_save_simple")
    state = await admin_bot.add_book_save(update, mock_context)
    assert state == ConversationHandler.END

    # --- –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤ –ë–î ---
    cursor = db_session.cursor()
    cursor.execute("SELECT name, author_id FROM books WHERE name = '–í–æ–π–Ω–∞ –∏ –º–∏—Ä'")
    book_from_db = cursor.fetchone()
    assert book_from_db is not None
    
    cursor.execute("SELECT name FROM authors WHERE id = %s", (book_from_db[1],))
    author_name = cursor.fetchone()[0]
    assert author_name == "–õ–µ–≤ –¢–æ–ª—Å—Ç–æ–π"
    cursor.close()