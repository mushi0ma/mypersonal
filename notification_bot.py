# notification_bot.py
import os
import logging
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes

# --- –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î –∏ –∑–∞–¥–∞—á–∞–º–∏ ---
import db_data
from db_utils import get_db_connection
import tasks # <-- –î–û–ë–ê–í–õ–ï–ù –ò–ú–ü–û–†–¢

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
load_dotenv()
NOTIFICATION_BOT_TOKEN = os.getenv("NOTIFICATION_BOT_TOKEN")
logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)
logger = logging.getLogger(__name__)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start, –æ—Å–æ–±–µ–Ω–Ω–æ '–≥–ª—É–±–æ–∫–∏–µ —Å—Å—ã–ª–∫–∏'."""
    user = update.effective_user
    
    if context.args:
        registration_code = context.args[0]
        try:
            with get_db_connection() as conn:
                db_data.link_telegram_id_by_code(
                    conn, 
                    code=registration_code, 
                    telegram_id=user.id,
                    telegram_username=user.username
                )
            await update.message.reply_text("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è! –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –±–æ—Ç—É.")
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username} (ID: {user.id}) —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–ª –∞–∫–∫–∞—É–Ω—Ç.")
        except db_data.NotFoundError:
            await update.message.reply_text("‚ö†Ô∏è –ö–æ–¥ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞.")
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –Ω–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥: {registration_code}")
        except Exception as e:
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤—è–∑–∫–µ –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞.")
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤—è–∑–∫–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è –∫–æ–¥–∞ {registration_code}: {e}", exc_info=True)
            # --- –î–û–ë–ê–í–õ–ï–ù–û –£–í–ï–î–û–ú–õ–ï–ù–ò–ï –ê–î–ú–ò–ù–£ ---
            tasks.notify_admin.delay(
                text=f"‚ùóÔ∏è **–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ `notification_bot`**\n\n**–§—É–Ω–∫—Ü–∏—è:** `start` (–ø—Ä–∏–≤—è–∑–∫–∞ –ø–æ –∫–æ–¥—É)\n**–û—à–∏–±–∫–∞:** `{e}`"
            )
    else:
        await update.message.reply_text("üëã –≠—Ç–æ –±–æ—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π. –ß—Ç–æ–±—ã –ø—Ä–∏–≤—è–∑–∞—Ç—å –µ–≥–æ –∫ –≤–∞—à–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –±–æ—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏.")

def main() -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞-—É–≤–µ–¥–æ–º–∏—Ç–µ–ª—è."""
    application = Application.builder().token(NOTIFICATION_BOT_TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    
    logger.info("–ë–æ—Ç-—É–≤–µ–¥–æ–º–∏—Ç–µ–ª—å –∑–∞–ø—É—â–µ–Ω.") # <-- –ó–∞–º–µ–Ω–∏–ª–∏ print()
    
    application.run_polling()

if __name__ == "__main__":
    main()