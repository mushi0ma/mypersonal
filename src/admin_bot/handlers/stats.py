import logging
from telegram import Update
from telegram.ext import ContextTypes

from src.core import config
from src.core.db import data_access as db_data
from src.core.db.utils import get_db_connection
from src.core import tasks
from src.admin_bot import keyboards

logger = logging.getLogger(__name__)

def calculate_age(dob_string: str) -> str:
    """–í—ã—á–∏—Å–ª—è–µ—Ç –≤–æ–∑—Ä–∞—Å—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç—Ä–æ–∫–∏ —Å –¥–∞—Ç–æ–π —Ä–æ–∂–¥–µ–Ω–∏—è (–î–î.–ú–ú.–ì–ì–ì–ì)."""
    if not dob_string:
        return "?? –ª–µ—Ç"
    try:
        from datetime import datetime
        birth_date = datetime.strptime(dob_string, "%d.%m.%Y")
        today = datetime.today()
        age = today.year - birth_date.year - ((today.month, today.day) < (birth_date.month, birth_date.day))
        return f"{age} –ª–µ—Ç"
    except (ValueError, TypeError):
        return "?? –ª–µ—Ç"

async def show_stats_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã."""
    query = update.callback_query
    if query:
        await query.answer()

    try:
        with get_db_connection() as conn:
            cur = conn.cursor()
            cur.execute("SELECT COUNT(*) FROM users WHERE telegram_id IS NOT NULL")
            total_users = cur.fetchone()[0]
            cur.execute("SELECT COUNT(*) FROM books")
            total_books = cur.fetchone()[0]
            cur.execute("SELECT COUNT(*) FROM borrowed_books WHERE return_date IS NULL")
            currently_borrowed = cur.fetchone()[0]

        message = (
            f"üìä **–ü–∞–Ω–µ–ª—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏**\n\n"
            f"üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: **{total_users}**\n"
            f"üìö –ö–Ω–∏–≥ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ: **{total_books}**\n"
            f"üìñ –ö–Ω–∏–≥ –Ω–∞ —Ä—É–∫–∞—Ö: **{currently_borrowed}**\n"
            f"‚úÖ –ö–Ω–∏–≥ –¥–æ—Å—Ç—É–ø–Ω–æ: **{total_books - currently_borrowed}**"
        )
        reply_markup = keyboards.get_stats_panel_keyboard()

        if query:
            await query.edit_message_text(message, reply_markup=reply_markup, parse_mode='Markdown')
        else:
            await update.message.reply_text(message, reply_markup=reply_markup, parse_mode='Markdown')

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}", exc_info=True)
        await update.effective_message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

async def show_users_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    query = update.callback_query
    page = int(query.data.split('_')[3])
    users_per_page = 5
    await query.answer()

    context.user_data['current_stats_page'] = page
    offset = page * users_per_page
    try:
        with get_db_connection() as conn:
            users, total_users = db_data.get_all_users(conn, limit=users_per_page, offset=offset)

        message_text = f"üë• **–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π** (–í—Å–µ–≥–æ: {total_users})\n\n–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}:"
        reply_markup = keyboards.get_users_list_keyboard(users, total_users, page, users_per_page)
        await query.edit_message_text(message_text, reply_markup=reply_markup, parse_mode='Markdown')

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}", exc_info=True)
        await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

async def view_user_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    query = update.callback_query
    await query.answer()
    current_page = context.user_data.get('current_stats_page', 0)
    user_id = int(query.data.split('_')[3])
    try:
        with get_db_connection() as conn:
            user = db_data.get_user_by_id(conn, user_id)
            borrow_history = db_data.get_user_borrow_history(conn, user_id)

        reg_date = user['registration_date'].strftime("%d.%m.%Y %H:%M")
        age = calculate_age(user.get('dob'))
        message_parts = [
            f"**üë§ –ö–∞—Ä—Ç–æ—á–∫–∞: `{user['username']}`**",
            f"**–§–ò–û:** {user['full_name']}",
            f"**–í–æ–∑—Ä–∞—Å—Ç:** {age}",
            f"**–°—Ç–∞—Ç—É—Å:** {user['status']}",
            f"**–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:** {reg_date}\n",
            "**üìö –ò—Å—Ç–æ—Ä–∏—è –≤–∑—è—Ç—ã—Ö –∫–Ω–∏–≥:**"
        ]
        if borrow_history:
            for item in borrow_history:
                message_parts.append(f" - `{item['book_name']}`")
        else:
            message_parts.append("  _–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π._")

        reply_markup = keyboards.get_user_profile_keyboard(user_id, current_page)
        await query.edit_message_text("\n".join(message_parts), reply_markup=reply_markup, parse_mode='Markdown')
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}", exc_info=True)
        await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

async def ask_for_delete_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –∞–¥–º–∏–Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ."""
    query = update.callback_query
    await query.answer()
    user_id = int(query.data.split('_')[3])
    reply_markup = keyboards.get_user_delete_confirmation_keyboard(user_id)
    await query.edit_message_text(
        "**‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã?**\n\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –≤–µ—Ä–Ω–µ—Ç –≤—Å–µ –∫–Ω–∏–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–±–µ–∑–ª–∏—á–∏—Ç –∞–∫–∫–∞—É–Ω—Ç. –û—Ç–º–µ–Ω–∏—Ç—å –±—É–¥–µ—Ç –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.",
        reply_markup=reply_markup, parse_mode='Markdown'
    )

async def process_delete_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ —É–¥–∞–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    query = update.callback_query
    await query.answer()
    user_id = int(query.data.split('_')[3])
    current_page = context.user_data.get('current_stats_page', 0)
    try:
        with get_db_connection() as conn:
            user_to_delete = db_data.get_user_by_id(conn, user_id)
            username = user_to_delete.get('username', f'ID: {user_id}')
            db_data.delete_user_by_admin(conn, user_id)

        tasks.notify_admin.delay(text=f"üóëÔ∏è –ê–¥–º–∏–Ω —É–¥–∞–ª–∏–ª (–∞–Ω–æ–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞–ª) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @{username}", category='admin_action')
        await query.edit_message_text("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω (–∞–Ω–æ–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω).")

        query.data = f"users_list_page_{current_page}"
        await show_users_list(update, context)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è admin'–æ–º: {e}", exc_info=True)
        await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {e}")

async def show_user_activity(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω—ã–π –ª–æ–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    query = update.callback_query
    await query.answer()
    parts = query.data.split('_')
    user_id, page = int(parts[2]), int(parts[3])

    try:
        with get_db_connection() as conn:
            logs, total_logs = db_data.get_user_activity(conn, user_id, limit=10, offset=page * 10)
            user = db_data.get_user_by_id(conn, user_id)

        message_parts = [f"**üìú –ñ—É—Ä–Ω–∞–ª –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è `{user['username']}`** (–°—Ç—Ä. {page + 1})\n"]
        if logs:
            for log in logs:
                ts = log['timestamp'].strftime('%d.%m.%Y %H:%M')
                details = f"({log['details']})" if log['details'] else ""
                message_parts.append(f"`{ts}`: **{log['action']}** {details}")
        else:
            message_parts.append("  _–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π._")

        nav_buttons = []
        if page > 0:
            nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f"admin_activity_{user_id}_{page - 1}"))
        if (page + 1) * 10 < total_logs:
            nav_buttons.append(InlineKeyboardButton("‚û°Ô∏è", callback_data=f"admin_activity_{user_id}_{page + 1}"))

        keyboard = [nav_buttons] if nav_buttons else []
        keyboard.append([InlineKeyboardButton("üë§ –ù–∞–∑–∞–¥ –∫ –∫–∞—Ä—Ç–æ—á–∫–µ", callback_data=f"admin_view_user_{user_id}")])

        await query.edit_message_text("\n".join(message_parts), reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–æ–≥–æ–≤: {e}", exc_info=True)
        await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")