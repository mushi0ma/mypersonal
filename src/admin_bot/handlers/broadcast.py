import logging
from telegram import Update
from telegram.ext import (
    ContextTypes,
    ConversationHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    CommandHandler,
)

from src.core.db import data_access as db_data
from src.core.db.utils import get_db_connection
from src.core import tasks
from src.admin_bot.states import AdminState
from src.admin_bot import keyboards

logger = logging.getLogger(__name__)


async def start_broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE) -> AdminState:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –¥–∏–∞–ª–æ–≥ —Ä–∞—Å—Å—ã–ª–∫–∏, —Å–ø—Ä–∞—à–∏–≤–∞—è —Ç–∏–ø."""
    context.user_data['broadcast'] = {'selected_users': set()}
    reply_markup = keyboards.get_broadcast_type_keyboard()
    await update.message.reply_text("üì¢ **–†–∞—Å—Å—ã–ª–∫–∞**\n\n–í—ã–±–µ—Ä–∏—Ç–µ, –∫–æ–º—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:", reply_markup=reply_markup)
    return AdminState.BROADCAST_TYPE


async def ask_broadcast_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> AdminState:
    """–°–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏."""
    query = update.callback_query
    if query:
        await query.answer()
        await query.edit_message_text("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏. –î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel.")
    else:
        await update.message.reply_text("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏. –î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel.")
    return AdminState.BROADCAST_MESSAGE


async def show_user_selection_for_broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE) -> AdminState:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –≤—ã–±–æ—Ä–∞."""
    query = update.callback_query
    page = int(query.data.split('_')[-1]) if query and "broadcast_users_page" in query.data else 0
    await query.answer()

    users_per_page = 5
    context.user_data['broadcast']['current_page'] = page
    offset = page * users_per_page

    try:
        async with get_db_connection() as conn:
            users, total_users = await db_data.get_all_users(conn, limit=users_per_page, offset=offset)

        selected_users = context.user_data['broadcast']['selected_users']
        reply_markup = keyboards.get_user_selection_keyboard_for_broadcast(
            users, selected_users, total_users, page, users_per_page
        )
        await query.edit_message_text(f"üë• **–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π** (–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1})", reply_markup=reply_markup)
        return AdminState.BROADCAST_SELECT_USERS
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
        await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return AdminState.BROADCAST_TYPE


async def toggle_user_for_broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE) -> AdminState:
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∏–ª–∏ —É–¥–∞–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏."""
    query = update.callback_query
    user_id = int(query.data.split('_')[-1])
    selected_users = context.user_data['broadcast']['selected_users']

    if user_id in selected_users:
        selected_users.remove(user_id)
    else:
        selected_users.add(user_id)

    await query.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {'—É–¥–∞–ª–µ–Ω' if user_id not in selected_users else '–¥–æ–±–∞–≤–ª–µ–Ω'}")

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –Ω–µ –º–µ–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü—É
    current_page = context.user_data['broadcast']['current_page']
    query.data = f"broadcast_users_page_{current_page}"
    return await show_user_selection_for_broadcast(update, context)


async def confirm_broadcast_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> AdminState:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    query = update.callback_query
    await query.answer()
    selected_count = len(context.user_data['broadcast']['selected_users'])
    if selected_count == 0:
        await query.answer("‚ö†Ô∏è –í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!", show_alert=True)
        return AdminState.BROADCAST_SELECT_USERS

    await query.edit_message_text(f"–í—ã–±—Ä–∞–Ω–æ **{selected_count}** –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
    return AdminState.BROADCAST_MESSAGE


async def process_broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏ —Å—Ç–∞–≤–∏—Ç –≤ –æ—á–µ—Ä–µ–¥—å –∑–∞–¥–∞—á–∏ –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É."""
    message_text = update.message.text
    broadcast_data = context.user_data.get('broadcast', {})
    selected_users = broadcast_data.get('selected_users')

    await update.message.reply_text("‚è≥ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...")
    try:
        if selected_users is None:  # –†–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º
            async with get_db_connection() as conn:
                user_db_ids = await db_data.get_all_user_ids(conn)
        else:  # –†–∞—Å—Å—ã–ª–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–º
            user_db_ids = list(selected_users)

        for user_id in user_db_ids:
            tasks.notify_user.delay(user_id=user_id, text=message_text, category='broadcast')

        await update.message.reply_text(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞ –¥–ª—è {len(user_db_ids)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        tasks.notify_admin.delay(text=f"üì¢ –ê–¥–º–∏–Ω –∑–∞–ø—É—Å—Ç–∏–ª —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è {len(user_db_ids)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.", category='admin_action')
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")

    context.user_data.pop('broadcast', None)
    return ConversationHandler.END


async def cancel_broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω—è–µ—Ç –¥–∏–∞–ª–æ–≥ —Ä–∞—Å—Å—ã–ª–∫–∏."""
    context.user_data.pop('broadcast', None)
    if update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.edit_message_text("üëå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    else:
        await update.message.reply_text("üëå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    return ConversationHandler.END


broadcast_handler = ConversationHandler(
    entry_points=[CommandHandler("broadcast", start_broadcast)],
    states={
        AdminState.BROADCAST_TYPE: [
            CallbackQueryHandler(ask_broadcast_message, pattern="^broadcast_all$"),
            CallbackQueryHandler(show_user_selection_for_broadcast, pattern="^broadcast_select$")
        ],
        AdminState.BROADCAST_SELECT_USERS: [
            CallbackQueryHandler(toggle_user_for_broadcast, pattern="^broadcast_toggle_user_"),
            CallbackQueryHandler(show_user_selection_for_broadcast, pattern="^broadcast_users_page_"),
            CallbackQueryHandler(confirm_broadcast_selection, pattern="^broadcast_confirm_selection$"),
        ],
        AdminState.BROADCAST_MESSAGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_broadcast)],
    },
    fallbacks=[
        CommandHandler("cancel", cancel_broadcast),
        CallbackQueryHandler(cancel_broadcast, pattern="^broadcast_cancel$")
    ],
    per_user=True,
    per_chat=True
)
