import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

from src.core.db import data_access as db_data
from src.core.db.utils import get_db_connection
from src.core import tasks

logger = logging.getLogger(__name__)


async def show_book_requests(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –∫–Ω–∏–≥–∏."""
    query = update.callback_query if update.callback_query else None
    if query:
        await query.answer()
    
    try:
        async with get_db_connection() as conn:
            requests = await db_data.get_pending_book_requests(conn)
        
        if not requests:
            message_text = (
                "üìö **–ó–∞–ø—Ä–æ—Å—ã –Ω–∞ –∫–Ω–∏–≥–∏**\n\n"
                "–ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤."
            )
            keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_stats_panel")]]
        else:
            message_text = f"üìö **–ó–∞–ø—Ä–æ—Å—ã –Ω–∞ –∫–Ω–∏–≥–∏** (–í—Å–µ–≥–æ: {len(requests)})\n"
            keyboard = []
            
            for req in requests:
                created = req['created_at'].strftime('%d.%m %H:%M')
                button_text = f"üìñ {req['book_name'][:30]} ‚Äî {req['username']} ({created})"
                keyboard.append([
                    InlineKeyboardButton(button_text, callback_data=f"view_request_{req['id']}")
                ])
            
            keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_stats_panel")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if query:
            await query.edit_message_text(message_text, reply_markup=reply_markup, parse_mode='Markdown')
        else:
            await update.message.reply_text(message_text, reply_markup=reply_markup, parse_mode='Markdown')
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤: {e}", exc_info=True)
        error_msg = f"‚ùå –û—à–∏–±–∫–∞: {e}"
        if query:
            await query.edit_message_text(error_msg)
        else:
            await update.message.reply_text(error_msg)


async def view_book_request(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—Ä–æ—Å–µ."""
    query = update.callback_query
    await query.answer()
    
    request_id = int(query.data.split('_')[2])
    
    try:
        async with get_db_connection() as conn:
            request_data = await conn.fetchrow(
                """
                SELECT br.*, u.username, u.full_name, u.telegram_id
                FROM book_requests br
                JOIN users u ON br.user_id = u.id
                WHERE br.id = $1
                """,
                request_id
            )
        
        if not request_data:
            await query.edit_message_text("‚ùå –ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        created = request_data['created_at'].strftime('%d.%m.%Y %H:%M')
        
        message_parts = [
            f"üìö **–ó–∞–ø—Ä–æ—Å #{request_id}**",
            "`‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`",
            f"üìñ **–ö–Ω–∏–≥–∞:** `{request_data['book_name']}`",
            f"‚úçÔ∏è **–ê–≤—Ç–æ—Ä:** `{request_data['author_name']}`",
            f"üé≠ **–ñ–∞–Ω—Ä:** `{request_data['genre'] or '–ù–µ —É–∫–∞–∑–∞–Ω'}`",
            f"üìù **–û–ø–∏—Å–∞–Ω–∏–µ:**\n_{request_data['description'] or '–ù–µ—Ç'}_\n",
            f"üë§ **–ó–∞–ø—Ä–æ—Å–∏–ª:** @{request_data['username']} ({request_data['full_name']})",
            f"üìÖ **–î–∞—Ç–∞:** `{created}`",
            "`‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`"
        ]
        
        keyboard = [
            [InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å –∏ –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–∏–≥—É", callback_data=f"approve_request_{request_id}")],
            [InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_request_{request_id}")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É –∑–∞–ø—Ä–æ—Å–æ–≤", callback_data="view_requests")]
        ]
        
        await query.edit_message_text(
            "\n".join(message_parts),
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –∑–∞–ø—Ä–æ—Å–∞: {e}", exc_info=True)
        await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")


async def approve_request_and_add_book(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–¥–æ–±—Ä—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –∫–Ω–∏–≥—É."""
    query = update.callback_query
    await query.answer()
    
    request_id = int(query.data.split('_')[2])
    
    try:
        async with get_db_connection() as conn:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞
            request_data = await db_data.approve_book_request(conn, request_id)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–∏–≥—É
            book_data = {
                'name': request_data['book_name'],
                'author': request_data['author_name'],
                'genre': request_data['genre'] or '–†–∞–∑–Ω–æ–µ',
                'description': request_data['description'] or '–î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
                'total_quantity': 1
            }
            
            book_id = await db_data.add_new_book(conn, book_data)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        tasks.notify_user.delay(
            user_id=request_data['user_id'],
            text=(
                f"üéâ **–û—Ç–ª–∏—á–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏!**\n\n"
                f"–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –∫–Ω–∏–≥—É ¬´{request_data['book_name']}¬ª –æ–¥–æ–±—Ä–µ–Ω!\n"
                f"–ö–Ω–∏–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É –∏ –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –≤–∑—è—Ç–∏—è."
            ),
            category='book_request_approved',
            button_text="üìñ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–Ω–∏–≥—É",
            button_callback=f"view_book_{book_id}"
        )
        
        tasks.notify_admin.delay(
            text=f"‚úÖ –ó–∞–ø—Ä–æ—Å #{request_id} –æ–¥–æ–±—Ä–µ–Ω. –ö–Ω–∏–≥–∞ ¬´{request_data['book_name']}¬ª –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∫–∞—Ç–∞–ª–æ–≥.",
            category='admin_action'
        )
        
        await query.edit_message_text(
            f"‚úÖ **–ó–∞–ø—Ä–æ—Å –æ–¥–æ–±—Ä–µ–Ω!**\n\n"
            f"–ö–Ω–∏–≥–∞ ¬´{request_data['book_name']}¬ª –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É.\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.",
            parse_mode='Markdown'
        )
        
        await show_book_requests(update, context)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}", exc_info=True)
        await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")


async def reject_book_request(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–∫–ª–æ–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –∫–Ω–∏–≥—É."""
    query = update.callback_query
    await query.answer()
    
    request_id = int(query.data.split('_')[2])
    
    try:
        async with get_db_connection() as conn:
            request_data = await conn.fetchrow(
                "SELECT user_id, book_name FROM book_requests WHERE id = $1",
                request_id
            )
            
            await db_data.reject_book_request(
                conn, request_id,
                reason="–ö–Ω–∏–≥–∞ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–æ—Ñ–∏–ª—é –±–∏–±–ª–∏–æ—Ç–µ–∫–∏"
            )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        tasks.notify_user.delay(
            user_id=request_data['user_id'],
            text=(
                f"üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –∫–Ω–∏–≥—É ¬´{request_data['book_name']}¬ª –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω.\n\n"
                f"–ü—Ä–∏—á–∏–Ω–∞: –ö–Ω–∏–≥–∞ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–æ—Ñ–∏–ª—é –Ω–∞—à–µ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–∏."
            ),
            category='book_request_rejected'
        )
        
        await query.edit_message_text(
            f"‚úÖ –ó–∞–ø—Ä–æ—Å #{request_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω.\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.",
            parse_mode='Markdown'
        )
        
        await show_book_requests(update, context)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}", exc_info=True)
        await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")