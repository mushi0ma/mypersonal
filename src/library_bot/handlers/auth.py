# src/library_bot/handlers/auth.py

import logging
import random
from time import time
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler

from src.core.db import data_access as db_data
from src.core.db.utils import get_db_connection, hash_password
from src.core import tasks
from src.library_bot.states import State
from src.library_bot.utils import normalize_phone_number
from src.library_bot.handlers.registration import send_verification_message

logger = logging.getLogger(__name__)

# --- –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ –≤—Ö–æ–¥–∞ ---
login_lockouts = {}  # {user_id: (lockout_until_timestamp, attempts)}

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–∏–∞–ª–æ–≥–∞ –≤—Ö–æ–¥–∞ ---

async def start_login(update: Update, context: ContextTypes.DEFAULT_TYPE) -> State:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –≤—Ö–æ–¥–∞."""
    query = update.callback_query
    await query.answer()
    
    keyboard = [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")]]
    await query.edit_message_text(
        "üë§ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à **—é–∑–µ—Ä–Ω–µ–π–º** –∏–ª–∏ **–∫–æ–Ω—Ç–∞–∫—Ç** –¥–ª—è –≤—Ö–æ–¥–∞:", 
        parse_mode='Markdown',
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return State.LOGIN_CONTACT

async def get_login_contact(update: Update, context: ContextTypes.DEFAULT_TYPE) -> State:
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç/–ª–æ–≥–∏–Ω –∏ –∏—â–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î."""
    contact_input = update.message.text
    contact_processed = normalize_phone_number(contact_input)
    try:
        async with get_db_connection() as conn:
            user = await db_data.get_user_by_login(conn, contact_processed)
        context.user_data['login_user'] = user
        context.user_data['login_attempts'] = 0

        keyboard = [
            [InlineKeyboardButton("ü§î –ó–∞–±—ã–ª–∏ –ø–∞—Ä–æ–ª—å?", callback_data="forgot_password")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(
            "üîë –í–≤–µ–¥–∏—Ç–µ –≤–∞—à **–ø–∞—Ä–æ–ª—å**:", 
            reply_markup=reply_markup, 
            parse_mode='Markdown'
        )
        return State.LOGIN_PASSWORD
    except db_data.NotFoundError:
        keyboard = [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")]]
        await update.message.reply_text(
            "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return State.LOGIN_CONTACT

async def check_login_password(update: Update, context: ContextTypes.DEFAULT_TYPE) -> State | int:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–∞—Ä–æ–ª—å, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –∏ –≤—Ö–æ–¥–∏—Ç –≤ —Å–∏—Å—Ç–µ–º—É."""
    user = context.user_data['login_user']
    user_id = user['id']
    input_password = update.message.text

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    if user_id in login_lockouts:
        lockout_until, _ = login_lockouts[user_id]
        if time() < lockout_until:
            remaining = int(lockout_until - time())
            await update.message.reply_text(f"üîí –í—Ö–æ–¥ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞ {remaining} —Å–µ–∫—É–Ω–¥ –∏–∑-–∑–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫.")
            return State.LOGIN_PASSWORD
        else:
            login_lockouts.pop(user_id, None)

    try:
        await update.message.delete()
    except Exception:
        pass

    if hash_password(input_password) == user['password_hash']:
        async with get_db_connection() as conn:
            await db_data.log_activity(conn, user_id=user['id'], action="login")

        context.user_data.pop('login_attempts', None)
        login_lockouts.pop(user_id, None)

        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=f"üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user['full_name']}!"
        )
        context.user_data['current_user'] = user
        context.user_data.pop('login_user')

        # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–π –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        from src.library_bot.handlers.user_menu import user_menu
        await user_menu(update, context)
        return State.USER_MENU
    else:
        attempts = context.user_data.get('login_attempts', 0) + 1
        context.user_data['login_attempts'] = attempts

        if attempts >= 3:
            lockout_duration = 300  # 5 –º–∏–Ω—É—Ç
            login_lockouts[user_id] = (time() + lockout_duration, attempts)

            tasks.notify_admin.delay(
                text=f"üîí **[–ê–£–î–ò–¢ –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò]**\n\n–ó–∞–º–µ—á–µ–Ω–æ {attempts} –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–∫–∏ –≤—Ö–æ–¥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{user.get('username', user.get('contact_info'))}. –í—Ö–æ–¥ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞ 5 –º–∏–Ω—É—Ç.",
                category='security_alert',
                user_id=user_id
            )

            context.user_data.pop('login_attempts', None)
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –í—ã –∏—Å—á–µ—Ä–ø–∞–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫.\n\nüîí –í—Ö–æ–¥ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞ 5 –º–∏–Ω—É—Ç."
            )
            return ConversationHandler.END
        else:
            keyboard = [
                [InlineKeyboardButton("ü§î –ó–∞–±—ã–ª–∏ –ø–∞—Ä–æ–ª—å?", callback_data="forgot_password")],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")]
            ]
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {3 - attempts}.",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            return State.LOGIN_PASSWORD

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–∏–∞–ª–æ–≥–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è ---

async def start_forgot_password(update: Update, context: ContextTypes.DEFAULT_TYPE) -> State:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è."""
    query = update.callback_query
    await query.answer()
    
    keyboard = [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")]]
    await query.edit_message_text(
        "üîë –í–≤–µ–¥–∏—Ç–µ –≤–∞—à **—é–∑–µ—Ä–Ω–µ–π–º** –∏–ª–∏ **–∫–æ–Ω—Ç–∞–∫—Ç** –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è:", 
        parse_mode='Markdown',
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return State.FORGOT_PASSWORD_CONTACT

async def get_forgot_password_contact(update: Update, context: ContextTypes.DEFAULT_TYPE) -> State:
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏."""
    contact_input = update.message.text
    contact_processed = normalize_phone_number(contact_input)
    
    try:
        async with get_db_connection() as conn:
            user = await db_data.get_user_by_login(conn, contact_processed)
    except db_data.NotFoundError:
        keyboard = [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")]]
        await update.message.reply_text(
            "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return State.FORGOT_PASSWORD_CONTACT

    user_telegram_id = user.get('telegram_id') or update.effective_user.id
    code = str(random.randint(100000, 999999))
    context.user_data['forgot_password_code'] = code
    context.user_data['forgot_password_contact'] = user['contact_info']

    sent = await send_verification_message(user['contact_info'], code, context, user_telegram_id)
    
    keyboard = [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")]]
    if sent:
        await update.message.reply_text(
            f"üì≤ –ö–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {user['contact_info']}. –í–≤–µ–¥–∏—Ç–µ –µ–≥–æ:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return State.FORGOT_PASSWORD_VERIFY_CODE
    else:
        await update.message.reply_text(
            "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return State.FORGOT_PASSWORD_CONTACT

async def verify_forgot_password_code(update: Update, context: ContextTypes.DEFAULT_TYPE) -> State:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–¥ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å."""
    if update.message.text == context.user_data.get('forgot_password_code'):
        keyboard = [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")]]
        await update.message.reply_text(
            "‚úÖ –ö–æ–¥ –≤–µ—Ä–Ω—ã–π! –í–≤–µ–¥–∏—Ç–µ **–Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å** (–º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤, –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã/—Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã):", 
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        context.user_data.pop('forgot_password_code', None)
        return State.FORGOT_PASSWORD_SET_NEW
    else:
        keyboard = [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")]]
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return State.FORGOT_PASSWORD_VERIFY_CODE

async def set_new_password(update: Update, context: ContextTypes.DEFAULT_TYPE) -> State:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –°–†–ê–ó–£."""
    new_password = update.message.text
    try:
        await update.message.delete()
    except Exception: 
        pass

    # –ü–†–û–í–ï–†–ö–ê –ü–ê–†–û–õ–Ø –ù–ê –ú–ï–°–¢–ï
    if len(new_password) < 8 or not any(c.isalpha() for c in new_password) or not any(c.isdigit() or not c.isalnum() for c in new_password):
        keyboard = [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")]]
        await context.bot.send_message(
            chat_id=update.effective_chat.id, 
            text="‚ùå –ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å:\n‚Ä¢ –ú–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤\n‚Ä¢ –ë—É–∫–≤—ã\n‚Ä¢ –¶–∏—Ñ—Ä—ã –∏–ª–∏ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return State.FORGOT_PASSWORD_SET_NEW

    context.user_data['forgot_password_temp'] = new_password
    
    keyboard = [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")]]
    await context.bot.send_message(
        chat_id=update.effective_chat.id, 
        text="üëç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, **–≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –µ—â–µ —Ä–∞–∑**:", 
        parse_mode='Markdown',
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return State.FORGOT_PASSWORD_CONFIRM_NEW

async def confirm_new_password(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å."""
    password_confirm = update.message.text
    try:
        await update.message.delete()
    except Exception: 
        pass

    if context.user_data.get('forgot_password_temp') != password_confirm:
        keyboard = [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")]]
        await context.bot.send_message(
            chat_id=update.effective_chat.id, 
            text="‚ùå –ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –∑–∞–Ω–æ–≤–æ.",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return State.FORGOT_PASSWORD_SET_NEW

    login_query = context.user_data['forgot_password_contact']
    final_password = context.user_data.pop('forgot_password_temp')
    try:
        async with get_db_connection() as conn:
            await db_data.update_user_password(conn, login_query, final_password)
        await context.bot.send_message(
            chat_id=update.effective_chat.id, 
            text="üéâ –ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ —Å –Ω–æ–≤—ã–º –ø–∞—Ä–æ–ª–µ–º."
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–∞—Ä–æ–ª—è: {e}", exc_info=True)
        tasks.notify_admin.delay(text=f"‚ùóÔ∏è **–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–∞—Ä–æ–ª—è**: `{e}`")
        await context.bot.send_message(
            chat_id=update.effective_chat.id, 
            text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω."
        )

    context.user_data.clear()
    return ConversationHandler.END