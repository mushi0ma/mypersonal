# src/library_bot/handlers/books.py

import logging
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

import db_data
from db_utils import get_db_connection
import tasks
from src.library_bot.states import State
from src.library_bot.utils import rate_limit
from src.library_bot import keyboards

logger = logging.getLogger(__name__)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤–∑—è—Ç–∏—è, –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è ---

@rate_limit(seconds=3, alert_admins=True)
async def process_borrow_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> State:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–Ω–∏–≥–∏ –¥–ª—è –≤–∑—è—Ç–∏—è –∏–ª–∏ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è."""
    query = update.callback_query
    await query.answer()
    book_id = int(query.data.split('_')[2])
    user = context.user_data['current_user']

    try:
        with get_db_connection() as conn:
            selected_book = db_data.get_book_by_id(conn, book_id)

            if selected_book['available_quantity'] > 0:
                borrowed_books = db_data.get_borrowed_books(conn, user['id'])
                from src.library_bot.utils import get_user_borrow_limit
                borrow_limit = get_user_borrow_limit(user['status'])

                if len(borrowed_books) >= borrow_limit:
                    await query.answer(f"‚ö†Ô∏è –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ ({borrow_limit}) –Ω–∞ –∑–∞–∏–º—Å—Ç–≤–æ–≤–∞–Ω–∏–µ.", show_alert=True)
                    return State.USER_MENU

                due_date = db_data.borrow_book(conn, user['id'], selected_book['id'])
                db_data.log_activity(conn, user_id=user['id'], action="borrow_book", details=f"Book ID: {selected_book['id']}")

                due_date_str = due_date.strftime('%d.%m.%Y')
                notification_text = f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –≤–∑—è–ª–∏ –∫–Ω–∏–≥—É ¬´{selected_book['name']}¬ª.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–µ—Ä–Ω–∏—Ç–µ –µ–µ –¥–æ **{due_date_str}**."
                tasks.notify_user.delay(user_id=user['id'], text=notification_text, category='confirmation')

                await query.edit_message_text("üëç –û—Ç–ª–∏—á–Ω–æ! –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤–∞–º –≤ –±–æ—Ç-—É–≤–µ–¥–æ–º–∏—Ç–µ–ª—å.")
                from src.library_bot.handlers.user_menu import user_menu
                return await user_menu(update, context)

            else:
                context.user_data['book_to_reserve'] = selected_book
                keyboard = [
                    [InlineKeyboardButton("‚úÖ –î–∞, —É–≤–µ–¥–æ–º–∏—Ç—å", callback_data="reserve_yes")],
                    [InlineKeyboardButton("‚ùå –ù–µ—Ç, —Å–ø–∞—Å–∏–±–æ", callback_data="reserve_no")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await query.edit_message_text(f"‚è≥ –ö–Ω–∏–≥–∞ ¬´{selected_book['name']}¬ª –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –•–æ—Ç–∏—Ç–µ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞—Ç—å?", reply_markup=reply_markup)
                return State.USER_RESERVE_BOOK_CONFIRM

    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ process_borrow_selection: {e}", exc_info=True)
        tasks.notify_admin.delay(text=f"‚ùóÔ∏è **–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ `librarybot`**: `{e}`", category='error')
        await query.edit_message_text("‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ú—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —ç—Ç–∏–º.")
        from src.library_bot.handlers.user_menu import user_menu
        return await user_menu(update, context)

async def process_reservation_decision(update: Update, context: ContextTypes.DEFAULT_TYPE) -> State:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ—à–µ–Ω–∏–µ –æ —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏–∏."""
    query = update.callback_query
    await query.answer()
    book_to_reserve = context.user_data.pop('book_to_reserve', None)
    if not book_to_reserve:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Å—Å–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        from src.library_bot.handlers.user_menu import user_menu
        return await user_menu(update, context)

    if query.data == 'reserve_yes':
        user_id = context.user_data['current_user']['id']
        with get_db_connection() as conn:
            result = db_data.add_reservation(conn, user_id, book_to_reserve['id'])
            db_data.log_activity(conn, user_id=user_id, action="reserve_book", details=f"Book ID: {book_to_reserve['id']}")
        await query.edit_message_text(f"üëç {result}")
    else:
        await query.edit_message_text("üëå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

    from src.library_bot.handlers.user_menu import user_menu
    return await user_menu(update, context)

async def start_return_book(update: Update, context: ContextTypes.DEFAULT_TYPE) -> State:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫–Ω–∏–≥–∏."""
    query = update.callback_query
    await query.answer()
    user_id = context.user_data['current_user']['id']
    with get_db_connection() as conn:
        borrowed_books = db_data.get_borrowed_books(conn, user_id)

    if not borrowed_books:
        await query.answer("‚úÖ –£ –≤–∞—Å –Ω–µ—Ç –∫–Ω–∏–≥ –Ω–∞ —Ä—É–∫–∞—Ö.", show_alert=True)
        return State.USER_MENU

    context.user_data['borrowed_map'] = {f"return_{i}": {'borrow_id': b['borrow_id'], 'book_id': b['book_id'], 'book_name': b['book_name']} for i, b in enumerate(borrowed_books)}
    reply_markup = keyboards.get_return_book_keyboard(borrowed_books)
    await query.edit_message_text("üì§ –í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–∏–≥—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞:", reply_markup=reply_markup)
    return State.USER_RETURN_BOOK

@rate_limit(seconds=3, alert_admins=True)
async def process_return_book(update: Update, context: ContextTypes.DEFAULT_TYPE) -> State:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–æ–∑–≤—Ä–∞—Ç –∫–Ω–∏–≥–∏ –∏ –∏–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."""
    query = update.callback_query
    await query.answer()
    borrowed_info = context.user_data.get('borrowed_map', {}).get(query.data)
    if not borrowed_info:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        from src.library_bot.handlers.user_menu import user_menu
        return await user_menu(update, context)

    user_id = context.user_data['current_user']['id']
    try:
        with get_db_connection() as conn:
            db_data.return_book(conn, borrowed_info['borrow_id'], borrowed_info['book_id'])
            db_data.log_activity(conn, user_id=user_id, action="return_book", details=f"Book ID: {borrowed_info['book_id']}")

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ—Ü–µ–Ω–∏—Ç—å
            tasks.notify_user.delay(
                user_id=user_id,
                text=f"‚úÖ –ö–Ω–∏–≥–∞ ¬´{borrowed_info['book_name']}¬ª —É—Å–ø–µ—à–Ω–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞. –ù–µ —Ö–æ—Ç–∏—Ç–µ –ª–∏ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –µ–π –æ—Ü–µ–Ω–∫—É?",
                category='confirmation',
                button_text="‚≠ê –ü–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ü–µ–Ω–∫—É",
                button_callback=f"rate_book_{borrowed_info['book_id']}"
            )

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏–∏
            reservations = db_data.get_reservations_for_book(conn, borrowed_info['book_id'])
            if reservations:
                next_user_id = reservations[0]
                tasks.notify_user.delay(
                    user_id=next_user_id,
                    text=f"üéâ –ö–Ω–∏–≥–∞ ¬´{borrowed_info['book_name']}¬ª, –∫–æ—Ç–æ—Ä—É—é –≤—ã –∂–¥–∞–ª–∏, —Å–Ω–æ–≤–∞ –≤ –Ω–∞–ª–∏—á–∏–∏!",
                    category='reservation',
                    button_text="üì• –í–∑—è—Ç—å –∫–Ω–∏–≥—É",
                    button_callback=f"borrow_book_{borrowed_info['book_id']}"
                )
                db_data.update_reservation_status(conn, next_user_id, borrowed_info['book_id'], notified=True)

        await query.edit_message_text(f"‚úÖ –ö–Ω–∏–≥–∞ ¬´{borrowed_info['book_name']}¬ª –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –±–æ—Ç-—É–≤–µ–¥–æ–º–∏—Ç–µ–ª—å.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫–Ω–∏–≥–∏: {e}", exc_info=True)
        tasks.notify_admin.delay(text=f"‚ùóÔ∏è **–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫–Ω–∏–≥–∏**: `{e}`")
        await query.edit_message_text("‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω.")

    context.user_data.pop('borrowed_map', None)
    from src.library_bot.handlers.user_menu import user_menu
    return await user_menu(update, context)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Ü–µ–Ω–∫–∏ –∫–Ω–∏–≥ ---

async def start_rate_book(update: Update, context: ContextTypes.DEFAULT_TYPE) -> State:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ—Ü–µ–Ω–∫–∏ –∫–Ω–∏–≥–∏."""
    query = update.callback_query
    await query.answer()
    user_id = context.user_data['current_user']['id']
    with get_db_connection() as conn:
        history = db_data.get_user_borrow_history(conn, user_id)

    unique_books = {item['book_id']: item for item in history if item.get('book_id')}.values()
    if not unique_books:
        await query.answer("üìö –í—ã –º–æ–∂–µ—Ç–µ –æ—Ü–µ–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ –∫–Ω–∏–≥–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—Ä–∞–ª–∏.", show_alert=True)
        return State.USER_MENU

    message_text = "‚≠ê –í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–∏–≥—É –¥–ª—è –æ—Ü–µ–Ω–∫–∏:"
    keyboard = []
    context.user_data['rating_map'] = {}
    for i, book in enumerate(unique_books):
        rate_id = f"rate_{i}"
        keyboard.append([InlineKeyboardButton(f"{book['book_name']}", callback_data=rate_id)])
        context.user_data['rating_map'][rate_id] = {'book_id': book['book_id'], 'book_name': book['book_name']}

    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="user_menu")])
    await query.edit_message_text(message_text, reply_markup=InlineKeyboardMarkup(keyboard))
    return State.USER_RATE_BOOK_SELECT

async def select_rating(update: Update, context: ContextTypes.DEFAULT_TYPE, from_notification: bool = False) -> State:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ—Ü–µ–Ω–∫–∏ (–∑–≤–µ–∑–¥–æ—á–µ–∫)."""
    query = update.callback_query
    await query.answer()

    if from_notification:
        book_id = int(query.data.split('_')[2])
        with get_db_connection() as conn:
            book_info_raw = db_data.get_book_by_id(conn, book_id)
        context.user_data['book_to_rate'] = {'book_id': book_id, 'book_name': book_info_raw['name']}
    else:
        book_info = context.user_data.get('rating_map', {}).get(query.data)
        if not book_info:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞.")
            from src.library_bot.handlers.user_menu import user_menu
            return await user_menu(update, context)
        context.user_data['book_to_rate'] = book_info

    book_name = context.user_data['book_to_rate']['book_name']
    message_text = f"‚≠ê –í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞ –¥–ª—è –∫–Ω–∏–≥–∏ ¬´{book_name}¬ª:"
    reply_markup = keyboards.get_rating_keyboard(from_return=from_notification)
    await query.edit_message_text(message_text, reply_markup=reply_markup, parse_mode='Markdown')
    return State.USER_RATE_BOOK_RATING

async def process_rating(update: Update, context: ContextTypes.DEFAULT_TYPE) -> State:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ü–µ–Ω–∫—É –≤ –ë–î."""
    query = update.callback_query
    await query.answer()
    rating = int(query.data.split('_')[1])
    user_id = context.user_data['current_user']['id']
    book_info = context.user_data.pop('book_to_rate')

    with get_db_connection() as conn:
        db_data.add_rating(conn, user_id, book_info['book_id'], rating)
        db_data.log_activity(conn, user_id=user_id, action="rate_book", details=f"Book ID: {book_info['book_id']}, Rating: {rating}")

    tasks.notify_user.delay(user_id=user_id, text=f"üëç –°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞ ¬´{rating}¬ª –¥–ª—è –∫–Ω–∏–≥–∏ ¬´{book_info['book_name']}¬ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.", category='confirmation')
    await query.edit_message_text("‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –æ—Ü–µ–Ω–∫—É!")

    context.user_data.pop('rating_map', None)
    from src.library_bot.handlers.user_menu import user_menu
    return await user_menu(update, context)

async def process_book_extension(update: Update, context: ContextTypes.DEFAULT_TYPE) -> State:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ–¥–ª–µ–Ω–∏–µ —Å—Ä–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫–Ω–∏–≥–∏."""
    query = update.callback_query
    await query.answer()
    borrow_id = int(query.data.split('_')[2])

    with get_db_connection() as conn:
        result = db_data.extend_due_date(conn, borrow_id)

    if isinstance(result, datetime):
        await query.edit_message_text(f"‚úÖ –°—Ä–æ–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø—Ä–æ–¥–ª–µ–Ω –¥–æ **{result.strftime('%d.%m.%Y')}**.", parse_mode='Markdown')
    else:
        await query.edit_message_text(f"‚ö†Ô∏è {result}")

    from src.library_bot.handlers.user_menu import user_menu
    return await user_menu(update, context)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–∏—Å–∫–∞ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ ---

@rate_limit(seconds=1)
async def start_search(update: Update, context: ContextTypes.DEFAULT_TYPE) -> State:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –ø–æ–∏—Å–∫–∞ –∫–Ω–∏–≥–∏."""
    query = update.callback_query
    await query.answer()
    await query.edit_message_text(
        text="üîé –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏ –∏–ª–∏ —Ñ–∞–º–∏–ª–∏—é –∞–≤—Ç–æ—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="user_menu")]])
    )
    return State.GETTING_SEARCH_QUERY

@rate_limit(seconds=2)
async def process_search_query(update: Update, context: ContextTypes.DEFAULT_TYPE) -> State:
    """–ò—â–µ—Ç –∫–Ω–∏–≥–∏ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤."""
    search_term = update.message.text
    context.user_data['last_search_term'] = search_term

    # –ò–º–∏—Ç–∏—Ä—É–µ–º callback_query –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    from telegram import CallbackQuery
    update.callback_query = CallbackQuery(id="dummy", from_user=update.effective_user, chat_instance="dummy", data="search_page_0")
    await update.message.delete()
    return await navigate_search_results(update, context)

async def navigate_search_results(update: Update, context: ContextTypes.DEFAULT_TYPE) -> State:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞."""
    query = update.callback_query
    await query.answer()
    page = int(query.data.split('_')[2])
    search_term = context.user_data.get('last_search_term')

    if not search_term:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ—Ç–µ—Ä—è–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        from src.library_bot.handlers.user_menu import user_menu
        return await user_menu(update, context)

    with get_db_connection() as conn:
        books, total = db_data.search_available_books(conn, search_term, limit=5, offset=page * 5)

    if total == 0:
         await query.edit_message_text(f"üòî –ü–æ –∑–∞–ø—Ä–æ—Å—É ¬´{search_term}¬ª –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
         return State.USER_MENU

    message_text = f"üîé –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É ¬´{search_term}¬ª (–°—Ç—Ä. {page + 1}):"
    keyboard = [[InlineKeyboardButton(f"üìñ {b['name']} ({b['author']})", callback_data=f"view_book_{b['id']}")] for b in books]

    nav = []
    if page > 0: nav.append(InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f"search_page_{page - 1}"))
    if (page + 1) * 5 < total: nav.append(InlineKeyboardButton("‚û°Ô∏è", callback_data=f"search_page_{page + 1}"))
    if nav: keyboard.append(nav)

    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="user_menu")])
    await query.edit_message_text(message_text, reply_markup=InlineKeyboardMarkup(keyboard))
    return State.SHOWING_SEARCH_RESULTS

async def show_book_card_user(update: Update, context: ContextTypes.DEFAULT_TYPE) -> State:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É –∫–Ω–∏–≥–∏."""
    query = update.callback_query
    await query.answer()
    book_id = int(query.data.split('_')[2])

    with get_db_connection() as conn:
        book = db_data.get_book_card_details(conn, book_id)

    message_parts = [
        f"**üìñ {book['name']}**", f"**–ê–≤—Ç–æ—Ä:** {book['author']}", f"**–ñ–∞–Ω—Ä:** {book['genre']}",
        f"\n_{book['description']}_\n",
        f"‚úÖ **–°—Ç–∞—Ç—É—Å:** {'–°–≤–æ–±–æ–¥–Ω–∞' if book['is_available'] else '–ù–∞ —Ä—É–∫–∞—Ö'}"
    ]

    reply_markup = keyboards.get_book_card_keyboard(book['id'], book['is_available'])

    await query.message.delete()
    if book.get('cover_image_id'):
        await context.bot.send_photo(
            chat_id=query.message.chat_id, photo=book['cover_image_id'],
            caption="\n".join(message_parts), reply_markup=reply_markup, parse_mode='Markdown'
        )
    else:
        await context.bot.send_message(
            chat_id=query.message.chat_id, text="\n".join(message_parts),
            reply_markup=reply_markup, parse_mode='Markdown'
        )
    return State.SHOWING_SEARCH_RESULTS

async def show_top_books(update: Update, context: ContextTypes.DEFAULT_TYPE) -> State:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ø –∫–Ω–∏–≥ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É."""
    query = update.callback_query
    await query.answer()
    with get_db_connection() as conn:
        top_books = db_data.get_top_rated_books(conn, limit=5)

    message_parts = ["**üèÜ –¢–æ–ø-5 –∫–Ω–∏–≥ –ø–æ –æ—Ü–µ–Ω–∫–∞–º —á–∏—Ç–∞—Ç–µ–ª–µ–π:**\n"]
    if top_books:
        for i, book in enumerate(top_books):
            stars = "‚≠ê" * round(float(book['avg_rating']))
            message_parts.append(
                f"{i+1}. **{book['name']}** - {book['author']}\n"
                f"   –†–µ–π—Ç–∏–Ω–≥: {stars} ({float(book['avg_rating']):.1f}/5.0 –Ω–∞ –æ—Å–Ω–æ–≤–µ {book['votes']} –æ—Ü–µ–Ω–æ–∫)\n"
            )
    else:
        message_parts.append("_–ü–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–∞._")

    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="user_menu")]]
    await query.edit_message_text("\n".join(message_parts), reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')
    return State.VIEWING_TOP_BOOKS

@rate_limit(seconds=1)
async def show_genres(update: Update, context: ContextTypes.DEFAULT_TYPE) -> State:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ø–∏—Å–æ–∫ –∂–∞–Ω—Ä–æ–≤."""
    query = update.callback_query
    await query.answer()
    with get_db_connection() as conn:
        genres = db_data.get_unique_genres(conn)

    if not genres:
        await query.edit_message_text("üòî –í –∫–∞—Ç–∞–ª–æ–≥–µ –ø–æ–∫–∞ –Ω–µ—Ç –∫–Ω–∏–≥ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∂–∞–Ω—Ä–∞.", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="user_menu")]]))
        return State.USER_MENU

    keyboard = [[InlineKeyboardButton(f"üé≠ {genre}", callback_data=f"genre_{genre}")] for genre in genres]
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="user_menu")])
    await query.edit_message_text("üìö –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –∂–∞–Ω—Ä:", reply_markup=InlineKeyboardMarkup(keyboard))
    return State.SHOWING_GENRES

async def show_books_in_genre(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–Ω–∏–≥ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –∂–∞–Ω—Ä–µ."""
    query = update.callback_query
    await query.answer()

    parts = query.data.split('_')
    genre = parts[1]
    page = int(parts[2]) if len(parts) > 2 else 0
    books_per_page = 5
    offset = page * books_per_page

    with get_db_connection() as conn:
        books, total_books = db_data.get_available_books_by_genre(conn, genre, limit=books_per_page, offset=offset)

    # ‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º keyboard —Å—Ä–∞–∑—É
    keyboard = []

    if total_books == 0:
        message_text = f"üòî –í –∂–∞–Ω—Ä–µ ¬´{genre}¬ª —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∫–Ω–∏–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
    else:
        message_parts = [f"**üìö –ö–Ω–∏–≥–∏ –≤ –∂–∞–Ω—Ä–µ ¬´{genre}¬ª** (–°—Ç—Ä. {page + 1}):\n"]
        for book in books:
            message_parts.append(f"‚Ä¢ *{book['name']}* ({book['author']})")
        message_text = "\n".join(message_parts)

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–Ω–∏–≥
        for i, book in enumerate(books, start=1):
            status_icon = "‚úÖ" # –í —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –º—ã –∏—â–µ–º —Ç–æ–ª—å–∫–æ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–Ω–∏–≥–∏
            button_text = f"{status_icon} {book['name']} ({book['author']})"
            keyboard.append([InlineKeyboardButton(button_text, callback_data=f"view_book_{book['id']}")])

    # --- –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ ---
    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"genre_{genre}_{page - 1}"))
    if (page + 1) * books_per_page < total_books:
        nav_buttons.append(InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"genre_{genre}_{page + 1}"))

    if nav_buttons:  # ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        keyboard.append(nav_buttons)

    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ö –≤—ã–±–æ—Ä—É –∂–∞–Ω—Ä–∞", callback_data="find_by_genre")])
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(text=message_text, reply_markup=reply_markup, parse_mode='Markdown')
    return State.SHOWING_GENRE_BOOKS

@rate_limit(seconds=2)
async def show_authors_list(update: Update, context: ContextTypes.DEFAULT_TYPE) -> State:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–≤—Ç–æ—Ä–æ–≤."""
    query = update.callback_query
    page = int(query.data.split('_')[2]) if query and "authors_page_" in query.data else 0
    if query: await query.answer()

    context.user_data['current_authors_page'] = page

    with get_db_connection() as conn:
        authors, total = db_data.get_all_authors_paginated(conn, limit=10, offset=page * 10)

    if not authors:
        await query.edit_message_text("üìö –í –±–∏–±–ª–∏–æ—Ç–µ–∫–µ –ø–æ–∫–∞ –Ω–µ—Ç –∞–≤—Ç–æ—Ä–æ–≤.", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="user_menu")]]))
        return State.USER_MENU

    message_text = f"üë• **–ê–≤—Ç–æ—Ä—ã –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ** (–í—Å–µ–≥–æ: {total})\n–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}:"
    keyboard = [[InlineKeyboardButton(f"‚úçÔ∏è {a['name']} ({a['books_count']} –∫–Ω–∏–≥)", callback_data=f"view_author_{a['id']}")] for a in authors]

    nav = []
    if page > 0: nav.append(InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f"authors_page_{page - 1}"))
    if (page + 1) * 10 < total: nav.append(InlineKeyboardButton("‚û°Ô∏è", callback_data=f"authors_page_{page + 1}"))
    if nav: keyboard.append(nav)

    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="user_menu")])

    if query:
        await query.edit_message_text(message_text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')
    else:
        await update.message.reply_text(message_text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')
    return State.SHOWING_AUTHORS_LIST

async def show_author_card(update: Update, context: ContextTypes.DEFAULT_TYPE) -> State:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É –∞–≤—Ç–æ—Ä–∞ —Å –µ–≥–æ –∫–Ω–∏–≥–∞–º–∏."""
    query = update.callback_query
    await query.answer()
    parts = query.data.split('_')
    author_id = int(parts[2])
    books_page = int(parts[3]) if len(parts) > 3 else 0

    with get_db_connection() as conn:
        author = db_data.get_author_details(conn, author_id)
        books, total_books = db_data.get_books_by_author(conn, author_id, limit=5, offset=books_page * 5)

    message_parts = [
        f"üë§ **{author['name']}**",
        f"üìö –í—Å–µ–≥–æ –∫–Ω–∏–≥: {total_books} | ‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ: {author['available_books_count']}\n"
    ]
    if books:
        message_parts.append(f"**üìñ –ö–Ω–∏–≥–∏ –∞–≤—Ç–æ—Ä–∞ (—Å—Ç—Ä. {books_page + 1}/{(total_books + 4) // 5}):**")
        for i, book in enumerate(books, 1):
            status = "‚úÖ" if book['is_available'] else "‚ùå"
            message_parts.append(f"{i}. {status} *{book['name']}*")

    keyboard = [[InlineKeyboardButton(f"üìñ {i+1}", callback_data=f"view_book_{b['id']}")] for i, b in enumerate(books)]

    nav = []
    if books_page > 0: nav.append(InlineKeyboardButton("‚¨ÖÔ∏è –ö–Ω–∏–≥–∏", callback_data=f"view_author_{author_id}_{books_page - 1}"))
    if (books_page + 1) * 5 < total_books: nav.append(InlineKeyboardButton("–ö–Ω–∏–≥–∏ ‚û°Ô∏è", callback_data=f"view_author_{author_id}_{books_page + 1}"))
    if nav: keyboard.append(nav)

    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É –∞–≤—Ç–æ—Ä–æ–≤", callback_data=f"authors_page_{context.user_data.get('current_authors_page', 0)}")])

    await query.edit_message_text("\n".join(message_parts), reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')
    return State.VIEWING_AUTHOR_CARD