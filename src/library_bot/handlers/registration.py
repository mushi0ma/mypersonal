# src/library_bot/handlers/registration.py

import logging
import random
import re
from telegram import Update, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler

from src.core.db import data_access as db_data
from src.core.db.utils import get_db_connection
from src.core import tasks
from src.core import config
from src.library_bot.states import State
from src.library_bot.utils import normalize_phone_number
from src.library_bot import keyboards

from sendgrid import SendGridAPIClient
from sendgrid.helpers.mail import Mail

logger = logging.getLogger(__name__)

async def send_verification_message(contact_info: str, code: str, context: ContextTypes.DEFAULT_TYPE, telegram_id: int):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∫–∞–Ω–∞–ª."""
    if re.match(r"^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$", contact_info):
        try:
            message = Mail(
                from_email=config.FROM_EMAIL,
                to_emails=contact_info,
                subject='–ö–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏',
                html_content=f'<strong>–í–∞—à –∫–æ–¥ –¥–ª—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∏: {code}</strong>'
            )
            sg = SendGridAPIClient(config.SENDGRID_API_KEY)
            sg.send(message)
            context.user_data['verification_method'] = 'email'
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ email: {e}")

    try:
        user_telegram_id = None
        try:
            async with get_db_connection() as conn:
                user = await db_data.get_user_by_login(conn, contact_info)
                user_telegram_id = user.get('telegram_id')
        except db_data.NotFoundError:
            pass

        bot_to_use = context.bot
        target_chat_id = user_telegram_id or telegram_id

        message_body = f"üîê **–ö–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏**\n\n–í–∞—à –∫–æ–¥ –¥–ª—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∏: `{code}`"
        await bot_to_use.send_message(
            chat_id=target_chat_id,
            text=message_body,
            parse_mode='Markdown'
        )
        context.user_data['verification_method'] = 'telegram'
        logger.info(f"–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_chat_id}")
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞ —á–µ—Ä–µ–∑ Telegram: {e}")
        return False

async def start_registration(update: Update, context: ContextTypes.DEFAULT_TYPE) -> State:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."""
    query = update.callback_query
    await query.answer()
    context.user_data.clear()
    context.user_data['registration'] = {}
    await query.edit_message_text("üìù –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ **–§–ò–û**:", parse_mode='Markdown')
    return State.REGISTER_NAME

async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> State:
    """–ü–æ–ª—É—á–∞–µ—Ç –§–ò–û –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è."""
    context.user_data['registration']['full_name'] = update.message.text
    await update.message.reply_text("üéÇ –í–≤–µ–¥–∏—Ç–µ **–¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è** (–î–î.–ú–ú.–ì–ì–ì–ì):\n\n/cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã", parse_mode='Markdown')
    return State.REGISTER_DOB

async def get_dob(update: Update, context: ContextTypes.DEFAULT_TYPE) -> State:
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç."""
    dob = update.message.text
    if not re.match(r"^\d{2}\.\d{2}\.\d{4}$", dob):
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ **–î–î.–ú–ú.–ì–ì–ì–ì**.\n\n/cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã")
        return State.REGISTER_DOB
    context.user_data['registration']['dob'] = dob
    await update.message.reply_text("üìû –í–≤–µ–¥–∏—Ç–µ –≤–∞—à **–∫–æ–Ω—Ç–∞–∫—Ç** (email, —Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ @username):\n\n/cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã", parse_mode='Markdown')
    return State.REGISTER_CONTACT

async def get_contact(update: Update, context: ContextTypes.DEFAULT_TYPE) -> State:
    contact_input = update.message.text
    contact_processed = normalize_phone_number(contact_input)
    try:
        async with get_db_connection() as conn:
            await db_data.get_user_by_login(conn, contact_processed)
        await update.message.reply_text("ü§î –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–æ–π—Ç–∏ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –∫–æ–Ω—Ç–∞–∫—Ç.")
        return State.REGISTER_CONTACT
    except db_data.NotFoundError:
        pass

    context.user_data['registration']['contact_info'] = contact_processed
    code = str(random.randint(100000, 999999))
    context.user_data['verification_code'] = code
    sent = await send_verification_message(contact_processed, code, context, update.effective_user.id)
    if sent:
        await update.message.reply_text(f"üì≤ –ù–∞ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç ({contact_processed}) –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω **–∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏**. –í–≤–µ–¥–∏—Ç–µ –µ–≥–æ:", parse_mode='Markdown')
        return State.REGISTER_VERIFY_CODE
    else:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.")
        return State.REGISTER_CONTACT

async def verify_registration_code(update: Update, context: ContextTypes.DEFAULT_TYPE) -> State:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å."""
    if update.message.text == context.user_data.get('verification_code'):
        reply_markup = keyboards.get_status_keyboard()
        await update.message.reply_text("‚úÖ –ö–æ–¥ –≤–µ—Ä–Ω—ã–π! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Å—Ç–∞—Ç—É—Å:", reply_markup=reply_markup)
        context.user_data.pop('verification_code', None)
        return State.REGISTER_STATUS
    else:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return State.REGISTER_VERIFY_CODE

async def get_status(update: Update, context: ContextTypes.DEFAULT_TYPE) -> State:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —é–∑–µ—Ä–Ω–µ–π–º."""
    query = update.callback_query
    await query.answer()
    context.user_data['registration']['status'] = query.data
    await query.edit_message_text("üßë‚Äçüíª –ü—Ä–∏–¥—É–º–∞–π—Ç–µ **—é–∑–µ—Ä–Ω–µ–π–º** (–Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º, –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤):", parse_mode='Markdown')
    return State.REGISTER_USERNAME

async def get_username(update: Update, context: ContextTypes.DEFAULT_TYPE) -> State:
    """–ü–æ–ª—É—á–∞–µ—Ç —é–∑–µ—Ä–Ω–µ–π–º –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–∞—Ä–æ–ª—å."""
    username = update.message.text
    if not re.match(r"^[a-zA-Z0-9_]{3,}$", username):
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –Æ–∑–µ—Ä–Ω–µ–π–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –∫–æ—Ä–æ—á–µ 3 —Å–∏–º–≤–æ–ª–æ–≤ –∏ —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö –±—É–∫–≤, —Ü–∏—Ñ—Ä –∏ –∑–Ω–∞–∫–∞ '_'.")
        return State.REGISTER_USERNAME
    context.user_data['registration']['username'] = username
    await update.message.reply_text("üîë –°–æ–∑–¥–∞–π—Ç–µ **–ø–∞—Ä–æ–ª—å** (–º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤, –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã/—Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã):", parse_mode='Markdown')
    return State.REGISTER_PASSWORD

async def get_password(update: Update, context: ContextTypes.DEFAULT_TYPE) -> State:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –ø–∞—Ä–æ–ª—å."""
    password = update.message.text
    try:
        await update.message.delete()
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–∞—Ä–æ–ª–µ–º: {e}")

    if len(password) < 8 or not any(c.isalpha() for c in password) or not any(c.isdigit() or not c.isalnum() for c in password):
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="‚ùå –ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤, –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã/—Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
            parse_mode='Markdown'
        )
        return State.REGISTER_PASSWORD

    context.user_data['registration']['password_temp'] = password
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="üëç –û—Ç–ª–∏—á–Ω–æ. –¢–µ–ø–µ—Ä—å **–≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –µ—â–µ —Ä–∞–∑** –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:",
        parse_mode='Markdown'
    )
    return State.REGISTER_CONFIRM_PASSWORD

async def get_password_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> State:
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º –∞–¥–º–∏–Ω—É."""
    password_confirm = update.message.text
    try:
        await update.message.delete()
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –ø–∞—Ä–æ–ª—è: {e}")

    if context.user_data['registration'].get('password_temp') != password_confirm:
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="‚ùå –ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–¥—É–º–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å –∑–∞–Ω–æ–≤–æ."
        )
        return State.REGISTER_PASSWORD

    context.user_data['registration']['password'] = context.user_data['registration'].pop('password_temp')
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="‚úÖ –ü–∞—Ä–æ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n\n‚è≥ –°–æ–∑–¥–∞—é –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç..."
    )

    user_data = context.user_data['registration']
    
    try:
        async with get_db_connection() as conn:
            user_id = await db_data.add_user(conn, user_data)
            await db_data.log_activity(conn, user_id=user_id, action="registration_start")
            reg_code = await db_data.set_registration_code(conn, user_id)
            context.user_data['user_id_for_activation'] = user_id
            
            # –ü–æ–ª—É—á–∞–µ–º telegram_id –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            telegram_id = update.effective_user.id

        # –£–ª—É—á—à–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
        tasks.notify_admin.delay(
            text=(
                f"‚úÖ **–ù–æ–≤–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è**\n\n"
                f"üë§ **–ò–º—è:** `{user_data['full_name']}`\n"
                f"üîπ **Username:** `{user_data['username']}`\n"
                f"üîπ **–°—Ç–∞—Ç—É—Å:** `{user_data['status']}`\n"
                f"üîπ **–ö–æ–Ω—Ç–∞–∫—Ç:** `{user_data['contact_info']}`\n"
                f"üÜî **Telegram ID:** `{telegram_id}`\n"
                f"üÜî **User DB ID:** `{user_id}`\n"
                f"üìÖ **–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:** `{user_data.get('dob', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}`"
            ),
            category='new_user'
        )

        reply_markup = keyboards.get_notification_subscription_keyboard(
            config.NOTIFICATION_BOT_USERNAME, reg_code
        )
        
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=(
                "üéâ **–ê–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞–Ω.**\n\n"
                "**–ü–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥:** –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞-—É–≤–µ–¥–æ–º–∏—Ç–µ–ª—è "
                "–¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–æ–≤ –∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π.\n\n"
                "üëâ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞, –∞ –∑–∞—Ç–µ–º –≤–µ—Ä–Ω–∏—Ç–µ—Å—å —Å—é–¥–∞ "
                "–∏ –Ω–∞–∂–º–∏—Ç–µ **'–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è'**."
            ),
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        return State.AWAITING_NOTIFICATION_BOT

    except db_data.UserExistsError as e:
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=f"‚ùå –û—à–∏–±–∫–∞: {e} –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π."
        )
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="üßë‚Äçüíª –ü—Ä–∏–¥—É–º–∞–π—Ç–µ **—é–∑–µ—Ä–Ω–µ–π–º** (–Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º, –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤):",
            parse_mode='Markdown'
        )
        return State.REGISTER_USERNAME
    except Exception as e:
        logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}", exc_info=True)
        tasks.notify_admin.delay(
            text=f"‚ùóÔ∏è **–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏**\n\n**–û—à–∏–±–∫–∞:** `{e}`"
        )
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ —Å–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω."
        )
        return ConversationHandler.END

async def check_notification_subscription(update: Update, context: ContextTypes.DEFAULT_TYPE) -> State:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø—Ä–∏–≤—è–∑–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å telegram_id —á–µ—Ä–µ–∑ –±–æ—Ç–∞-—É–≤–µ–¥–æ–º–∏—Ç–µ–ª—è."""
    query = update.callback_query
    await query.answer()

    user_id = context.user_data.get('user_id_for_activation')
    if not user_id:
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å–µ—Å—Å–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ —Å /start.")
        return ConversationHandler.END

    try:
        async with get_db_connection() as conn:
            user = await db_data.get_user_by_id(conn, user_id)
            if user.get('telegram_id'):
                await db_data.log_activity(conn, user_id=user_id, action="registration_finish")
                is_subscribed = True
            else:
                is_subscribed = False

        if is_subscribed:
            tasks.notify_admin.delay(
                text=f"‚úÖ **–ù–æ–≤–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è**\n\n**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** @{user.get('telegram_username', user.get('username'))}\n**ID:** {user_id}",
                category='new_user'
            )
            await query.edit_message_text("üéâ **–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É.")
            context.user_data.clear()
            return ConversationHandler.END
        else:
            await query.answer("‚ö†Ô∏è –í—ã –µ—â–µ –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª–∏ –±–æ—Ç–∞-—É–≤–µ–¥–æ–º–∏—Ç–µ–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤—ã—à–µ.", show_alert=True)
            return State.AWAITING_NOTIFICATION_BOT

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è user_id {user_id}: {e}", exc_info=True)
        tasks.notify_admin.delay(text=f"‚ùóÔ∏è **–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏**\n\n**UserID:** `{user_id}`\n**–û—à–∏–±–∫–∞:** `{e}`")
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ —Å–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω.")
        return ConversationHandler.END