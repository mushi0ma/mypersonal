# src/core/tasks.py
import os
import logging
import asyncio
import subprocess
from celery import Celery
from celery.schedules import crontab
import telegram
from src.core.db import data_access as db_data
from src.core.db.utils import get_db_connection
from datetime import datetime
from celery import group
from celery.exceptions import SoftTimeLimitExceeded

from src.core import config

logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)
logger = logging.getLogger(__name__)

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Celery ---
celery_app = Celery(
    'tasks',
    broker=config.CELERY_BROKER_URL,
    backend=config.CELERY_RESULT_BACKEND
)

celery_app.conf.update(
    task_always_eager=config.CELERY_TASK_ALWAYS_EAGER
)

celery_app.conf.task_annotations = {
    'src.core.tasks.notify_user': {'rate_limit': '10/s', 'time_limit': 30},
    'src.core.tasks.broadcast_new_book': {'rate_limit': '1/m', 'time_limit': 600},
}

# --- –ê–°–ò–ù–•–†–û–ù–ù–´–ï –í–ï–†–°–ò–ò –ù–ò–ó–ö–û–£–†–û–í–ù–ï–í–´–• –ó–ê–î–ê–ß ---

async def _async_notify_user(user_id: int, text: str, category: str, button_text: str | None, button_callback: str | None):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    try:
        user_notifier_bot = telegram.Bot(token=config.NOTIFICATION_BOT_TOKEN)
        async with get_db_connection() as conn:
            await db_data.create_notification(conn, user_id=user_id, text=text, category=category)
            telegram_id = await db_data.get_telegram_id_by_user_id(conn, user_id)

        reply_markup = None
        if button_text and button_callback:
            keyboard = [[telegram.InlineKeyboardButton(button_text, callback_data=button_callback)]]
            reply_markup = telegram.InlineKeyboardMarkup(keyboard)

        await user_notifier_bot.send_message(
            chat_id=telegram_id,
            text=text,
            parse_mode='Markdown',
            reply_markup=reply_markup
        )
        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ '{category}' –¥–ª—è user_id={user_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ telegram_id={telegram_id}.")
    except db_data.NotFoundError:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: telegram_id –¥–ª—è user_id={user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ _async_notify_user –¥–ª—è user_id={user_id}: {e}", exc_info=True)

async def _async_notify_admin(text: str, category: str = 'audit'):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."""
    try:
        admin_notifier_bot = telegram.Bot(token=config.ADMIN_NOTIFICATION_BOT_TOKEN)
        await admin_notifier_bot.send_message(chat_id=config.ADMIN_TELEGRAM_ID, text=text, parse_mode='Markdown')
        logger.info(f"–ê—É–¥–∏—Ç-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ '{category}' –¥–ª—è –∞–¥–º–∏–Ω–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ _async_notify_admin: {e}", exc_info=True)


# --- –°–ò–ù–•–†–û–ù–ù–´–ï –û–ë–ï–†–¢–ö–ò –î–õ–Ø CELERY ---

@celery_app.task
def notify_user(user_id: int, text: str, category: str = 'system', button_text: str = None, button_callback: str = None):
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è Celery –∑–∞–¥–∞—á–∞, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–ø—É—Å–∫–∞–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –ª–æ–≥–∏–∫—É."""
    asyncio.run(_async_notify_user(user_id, text, category, button_text, button_callback))

@celery_app.task
def notify_admin(text: str, category: str = 'audit'):
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è Celery –∑–∞–¥–∞—á–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É."""
    asyncio.run(_async_notify_admin(text, category))


# --- –í–´–°–û–ö–û–£–†–û–í–ù–ï–í–´–ï –ò –ü–ï–†–ò–û–î–ò–ß–ï–°–ö–ò–ï –ó–ê–î–ê–ß–ò ---

async def _async_broadcast_new_book(book_id: int):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –æ –Ω–æ–≤–æ–π –∫–Ω–∏–≥–µ."""
    logger.info(f"–ó–∞–ø—É—â–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∞ –æ –Ω–æ–≤–æ–π –∫–Ω–∏–≥–µ —Å ID: {book_id}")
    async with get_db_connection() as conn:
        book = await db_data.get_book_card_details(conn, book_id)
        all_user_ids = await db_data.get_all_user_ids(conn)

    text = f"üÜï **–í –±–∏–±–ª–∏–æ—Ç–µ–∫–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ!**\n\n–ö–Ω–∏–≥–∞ ¬´{book['name']}¬ª –æ—Ç –∞–≤—Ç–æ—Ä–∞ {book['author']} –±—ã–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∫–∞—Ç–∞–ª–æ–≥."
    button_text = "üìñ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É –∫–Ω–∏–≥–∏"
    button_callback = f"view_book_{book_id}"

    BATCH_SIZE = 50
    total_sent = 0

    for i in range(0, len(all_user_ids), BATCH_SIZE):
        batch = all_user_ids[i:i + BATCH_SIZE]
        job = group(
            notify_user.s(
                user_id=uid,
                text=text,
                category='new_arrival',
                button_text=button_text,
                button_callback=button_callback
            ) for uid in batch
        )
        job.apply_async()
        total_sent += len(batch)
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {total_sent}/{len(all_user_ids)} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")

    logger.info(f"–†–∞—Å—Å—ã–ª–∫–∞ –æ –Ω–æ–≤–æ–π –∫–Ω–∏–≥–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è {total_sent} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
    notify_admin.delay(f"üöÄ –£—Å–ø–µ—à–Ω–æ —Ä–∞–∑–æ—Å–ª–∞–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –∫–Ω–∏–≥–µ ¬´{book['name']}¬ª –¥–ª—è {total_sent} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")

@celery_app.task(bind=True, max_retries=3)
def broadcast_new_book(self, book_id: int):
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏."""
    try:
        asyncio.run(_async_broadcast_new_book(book_id))
    except SoftTimeLimitExceeded:
        logger.error("–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")
        self.retry(countdown=60)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ broadcast_new_book: {e}")
        notify_admin.delay(f"‚ùóÔ∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ –æ –Ω–æ–≤–æ–π –∫–Ω–∏–≥–µ (ID: {book_id}): {e}")
        raise self.retry(exc=e, countdown=30)


async def _async_check_due_dates():
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ä–æ–∫–æ–≤."""
    logger.info("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –∑–∞–¥–∞—á–∞: –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–æ–∫–æ–≤ —Å–¥–∞—á–∏ –∫–Ω–∏–≥...")
    async with get_db_connection() as conn:
        overdue_entries = await db_data.get_users_with_overdue_books(conn)
        due_soon_entries = await db_data.get_users_with_books_due_soon(conn, days_ahead=2)

    if overdue_entries:
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∫–Ω–∏–≥: {len(overdue_entries)}")
        for entry in overdue_entries:
            due_date_str = entry['due_date'].strftime('%d.%m.%Y')
            user_text = f"‚ùóÔ∏è **–ü—Ä–æ—Å—Ä–æ—á–∫–∞:** –°—Ä–æ–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ ¬´{entry['book_name']}¬ª –∏—Å—Ç–µ–∫ {due_date_str}! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–µ—Ä–Ω–∏—Ç–µ –µ–µ."
            notify_user.delay(user_id=entry['user_id'], text=user_text, category='due_date')
            admin_text = f"‚ùóÔ∏è–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{entry['username']} –ø—Ä–æ—Å—Ä–æ—á–∏–ª ¬´{entry['book_name']}¬ª (—Å—Ä–æ–∫: {due_date_str})."
            notify_admin.delay(text=admin_text, category='overdue')

    if due_soon_entries:
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ –∫–Ω–∏–≥ —Å –ø–æ–¥—Ö–æ–¥—è—â–∏–º —Å—Ä–æ–∫–æ–º –≤–æ–∑–≤—Ä–∞—Ç–∞: {len(due_soon_entries)}")
        for entry in due_soon_entries:
            user_text = f"üîî **–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:** –°—Ä–æ–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫–Ω–∏–≥–∏ ¬´{entry['book_name']}¬ª –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ 2 –¥–Ω—è."
            notify_user.delay(
                user_id=entry['user_id'],
                text=user_text,
                category='due_date_reminder',
                button_text="‚ôªÔ∏è –ü—Ä–æ–¥–ª–∏—Ç—å –Ω–∞ 7 –¥–Ω–µ–π",
                button_callback=f"extend_borrow_{entry['borrow_id']}"
            )

    if not overdue_entries and not due_soon_entries:
        logger.info("–ö–Ω–∏–≥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")


@celery_app.task
def check_due_dates_and_notify():
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ä–æ–∫–æ–≤."""
    try:
        asyncio.run(_async_check_due_dates())
    except Exception as e:
        error_message = f"‚ùóÔ∏è **–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –∑–∞–¥–∞—á–µ**\n\n`check_due_dates_and_notify`:\n`{e}`"
        logger.error(error_message, exc_info=True)
        notify_admin.delay(text=error_message, category='error')

# --- –ó–ê–î–ê–ß–ò –†–ï–ó–ï–†–í–ù–û–ì–û –ö–û–ü–ò–†–û–í–ê–ù–ò–Ø –ò –ü–†–û–í–ï–†–ö–ò –ó–î–û–†–û–í–¨–Ø ---

def cleanup_old_backups(backup_dir, days=30):
    """–£–¥–∞–ª—è–µ—Ç –±—ç–∫–∞–ø—ã —Å—Ç–∞—Ä—à–µ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π."""
    import time

    now = time.time()
    cutoff = now - (days * 86400)

    for filename in os.listdir(backup_dir):
        if filename.startswith('backup_') and filename.endswith('.sql'):
            filepath = os.path.join(backup_dir, filename)
            if os.path.getmtime(filepath) < cutoff:
                os.remove(filepath)
                logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π backup: {filename}")

def backup_database():
    """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö PostgreSQL."""
    try:
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        # –ü—É—Ç—å –¥–ª—è –±—ç–∫–∞–ø–æ–≤ –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞, –¥–æ—Å—Ç—É–ø–Ω—ã–π –¥–ª—è appuser
        backup_dir = os.getenv('BACKUP_DIR', '/app/backups')
        os.makedirs(backup_dir, exist_ok=True)
        filename = f"{backup_dir}/backup_{timestamp}.sql"

        command = [
            'pg_dump',
            '-h', os.getenv('DB_HOST', 'localhost'),
            '-U', os.getenv('DB_USER', 'postgres'),
            '-d', os.getenv('DB_NAME', 'library_db'),
            '-f', filename,
            '--no-password'
        ]

        env = os.environ.copy()
        env['PGPASSWORD'] = os.getenv('DB_PASSWORD', '')

        result = subprocess.run(command, env=env, capture_output=True, text=True)

        if result.returncode == 0:
            file_size = os.path.getsize(filename) / (1024 * 1024)
            notify_admin.delay(
                text=f"‚úÖ **Backup —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω**\n\n"
                     f"üìÅ –§–∞–π–ª: `{filename}`\n"
                     f"üìä –†–∞–∑–º–µ—Ä: {file_size:.2f} MB",
                category='backup'
            )
            logger.info(f"‚úÖ Backup —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: {filename}")
            cleanup_old_backups(backup_dir, days=30)
            return filename
        else:
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è backup: {result.stderr}"
            logger.error(error_msg)
            notify_admin.delay(text=f"‚ùå **–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è backup**\n\n{result.stderr}", category='backup_error')
            return None

    except Exception as e:
        error_msg = f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ backup: {e}"
        logger.error(error_msg, exc_info=True)
        notify_admin.delay(text=f"‚ùå **–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ backup**\n\n`{e}`", category='backup_error')
        return None

@celery_app.task
def backup_database_task():
    """Celery –∑–∞–¥–∞—á–∞ –¥–ª—è backup –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    return backup_database()

@celery_app.task
def health_check_task():
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã."""
    from src.health_check import run_health_check
    all_ok, message = asyncio.run(run_health_check())
    if not all_ok:
        logger.error(f"Health check failed! Reason: {message}")
        notify_admin.delay(text=f"üå°Ô∏è **Health Check FAILED**\n\n`{message}`")
    return all_ok

# --- –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á (Celery Beat) ---
celery_app.conf.beat_schedule = {
    'check-due-dates-every-day': {
        'task': 'src.core.tasks.check_due_dates_and_notify',
        'schedule': crontab(hour=10, minute=0),
    },
    'daily-database-backup': {
        'task': 'src.core.tasks.backup_database_task',
        'schedule': crontab(hour=3, minute=0),
    },
    'health-check-every-hour': {
        'task': 'src.core.tasks.health_check_task',
        'schedule': crontab(minute=0),
    },
}