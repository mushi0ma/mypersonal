# src/main.py
"""
–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã –±–∏–±–ª–∏–æ—Ç–µ–∫–∏.
–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
"""
import logging
import asyncio
from logging.handlers import RotatingFileHandler
import signal
import sys

from telegram.ext import Application

# –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ—Ç —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
from src.core import config

# !!! –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–∏ –∏–º–ø–æ—Ä—Ç—ã –ø–æ–∫–∞ –±—É–¥—É—Ç –≤—ã–∑—ã–≤–∞—Ç—å –æ—à–∏–±–∫—É, –º—ã —ç—Ç–æ –∏—Å–ø—Ä–∞–≤–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º —à–∞–≥–µ
from src.library_bot.main import setup_library_bot
from src.admin_bot.main import setup_admin_bot
from src.notification_bot import setup_notification_bot
from src.audit_bot import setup_audit_bot
# from src.core.db.utils import close_db_pool # –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ–º –ø–æ–∫–∞ –Ω–µ—Ç –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
def setup_logging():
    """–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –≤—Å–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    log_format = "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
    
    logging.basicConfig(
        format=log_format,
        level=logging.INFO,
        handlers=[
            RotatingFileHandler(
                config.LOG_DIR / 'app.log', # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Ç—å –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
                maxBytes=10485760,  # 10MB
                backupCount=5
            ),
            logging.StreamHandler(sys.stdout)
        ]
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —à—É–º–Ω—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
    for component in ['telegram', 'httpx']:
        logging.getLogger(component).setLevel(logging.WARNING)
        
    return logging.getLogger(__name__)

logger = setup_logging()

# --- –ö–ª–∞—Å—Å –û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ---
class BotOrchestrator:
    """–û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –≤—Å–µ—Ö –±–æ—Ç–æ–≤."""
    def __init__(self):
        self.applications: dict[str, Application] = {}
        self.running_tasks = []
        self._shutdown_event = asyncio.Event()

    def register_bot(self, name: str, app: Application):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –±–æ—Ç–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è."""
        self.applications[name] = app
        logger.info(f"‚úÖ –ë–æ—Ç '{name}' –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")

    async def start_all(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –±–æ—Ç—ã."""
        if not self.applications:
            logger.error("‚ùå –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –±–æ—Ç–æ–≤!")
            return
            
        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ {len(self.applications)} –±–æ—Ç–æ–≤...")
        
        for name, app in self.applications.items():
            task = asyncio.create_task(self._run_bot(name, app))
            self.running_tasks.append(task)
            
        if self.running_tasks:
            await asyncio.gather(*self.running_tasks)

    async def _run_bot(self, name: str, app: Application):
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–¥–Ω–∏–º –±–æ—Ç–æ–º."""
        try:
            await app.initialize()
            await app.start()
            logger.info(f"‚úÖ {name} –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            
            if app.updater:
                await app.updater.start_polling(drop_pending_updates=True)
            
            await self._shutdown_event.wait() # –û–∂–∏–¥–∞–µ–º —Å–∏–≥–Ω–∞–ª–∞ –Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫—É
                
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ {name}: {e}", exc_info=True)
            await self.stop_all() # –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ—Ö –ø—Ä–∏ –ø–∞–¥–µ–Ω–∏–∏ –æ–¥–Ω–æ–≥–æ
        finally:
            await self._cleanup_bot(name, app)

    async def _cleanup_bot(self, name: str, app: Application):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –±–æ—Ç–∞."""
        try:
            logger.info(f"üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ {name}...")
            if app.updater and app.updater.running:
                await app.updater.stop()
            if app.running:
                await app.stop()
            await app.shutdown()
            logger.info(f"‚úÖ {name} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            logger.error(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ {name}: {e}")

    async def stop_all(self):
        """–ò–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–∫—É –≤—Å–µ—Ö –±–æ—Ç–æ–≤."""
        if not self._shutdown_event.is_set():
            logger.info("üõë –ò–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –±–æ—Ç–æ–≤...")
            self._shutdown_event.set()

# --- –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ---
async def main():
    """–ì–ª–∞–≤–Ω–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    logger.info("=" * 50)
    logger.info("üìö –ó–ê–ü–£–°–ö –°–ò–°–¢–ï–ú–´ –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ë–ò–ë–õ–ò–û–¢–ï–ö–û–ô")
    logger.info("=" * 50)
    
    try:
        config.validate_config()
    except config.ConfigError as e:
        logger.critical(str(e))
        sys.exit(1)

    orchestrator = BotOrchestrator()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ graceful shutdown
    loop = asyncio.get_running_loop()
    stop_task = lambda: asyncio.create_task(orchestrator.stop_all())
    for sig in (signal.SIGINT, signal.SIGTERM):
        loop.add_signal_handler(sig, stop_task)

    try:
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ—Ö –±–æ—Ç–æ–≤
        orchestrator.register_bot("library", setup_library_bot())
        orchestrator.register_bot("admin", setup_admin_bot())
        orchestrator.register_bot("notifier", setup_notification_bot())
        orchestrator.register_bot("auditor", setup_audit_bot())
        
        await orchestrator.start_all()
        
    except Exception as e:
        logger.critical(f"‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ main: {e}", exc_info=True)
    finally:
        # await close_db_pool() # –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ–º, –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç –ø—É–ª
        logger.info("üëã –°–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")

# --- –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ —Å–∫—Ä–∏–ø—Ç ---
if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø–æ –∫–æ–º–∞–Ω–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")