# src/main.py
"""
–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã –±–∏–±–ª–∏–æ—Ç–µ–∫–∏.
"""
import logging
import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ sys.path
sys.path.insert(0, str(Path(__file__).parent.parent))

from logging.handlers import RotatingFileHandler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

handler = RotatingFileHandler('app.log', maxBytes=10485760, backupCount=5)
handler.setFormatter(logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s'))
logger.addHandler(handler)

async def run_bot(bot_name: str, bot_module: str):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞."""
    try:
        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ {bot_name}...")
        module = __import__(f"src.{bot_module}", fromlist=['main'])
        await module.main()
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ {bot_name}: {e}", exc_info=True)

async def main():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ –±–æ—Ç—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ."""
    logger.info("üåü –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –±–∏–±–ª–∏–æ—Ç–µ–∫–∏...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ—Ö –±–æ—Ç–æ–≤ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö
    tasks = [
        asyncio.create_task(run_bot("Library Bot", "library_bot.main")),
        asyncio.create_task(run_bot("Admin Bot", "admin_bot.main")),
        asyncio.create_task(run_bot("Notification Bot", "notification_bot")),
        asyncio.create_task(run_bot("Audit Bot", "audit_bot")),
    ]
    
    await asyncio.gather(*tasks, return_exceptions=True)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üëã –°–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        sys.exit(0)