# src/notification_bot.py
"""
–ë–æ—Ç-—É–≤–µ–¥–æ–º–∏—Ç–µ–ª—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.
–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ —á–µ—Ä–µ–∑ deep links.
"""

import logging
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
)

from src.core import config
from src.core.db import data_access as db_data
from src.core.db.utils import get_db_connection
from src.core import tasks

logger = logging.getLogger(name)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):

    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start —Å deep link –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞.
    Deep link —Ñ–æ—Ä–º–∞—Ç: /start <registration_code>
    """

    user = update.effective_user

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–¥–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö
    if context.args:
        registration_code = context.args[0]
        
        try:
            with get_db_connection() as conn:
                # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º telegram_id –∫ –∞–∫–∫–∞—É–Ω—Ç—É –ø–æ –∫–æ–¥—É
                db_data.link_telegram_id_by_code(
                    conn,
                    code=registration_code,
                    telegram_id=user.id,
                    telegram_username=user.username
                )
            
            await update.message.reply_text(
                "‚úÖ **–û—Ç–ª–∏—á–Ω–æ!**\n\n"
                "–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∏.\n\n"
                "üí° **–ß—Ç–æ –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å:**\n"
                "‚Ä¢ üîê –ö–æ–¥—ã –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏\n"
                "‚Ä¢ ‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Å—Ä–æ–∫–∞—Ö –≤–æ–∑–≤—Ä–∞—Ç–∞\n"
                "‚Ä¢ üìö –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∫–Ω–∏–≥–∞—Ö\n"
                "‚Ä¢ üéØ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n\n"
                "_–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –±–æ—Ç—É._",
                parse_mode='Markdown'
            )
            
            logger.info(
                f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –ø—Ä–∏–≤—è–∑–∫–∞: user_id={user.id}, "
                f"username=@{user.username}, code={registration_code}"
            )
            
        except db_data.NotFoundError:
            await update.message.reply_text(
                "‚ö†Ô∏è **–ö–æ–¥ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.**\n\n"
                "**–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:**\n"
                "‚Ä¢ –ö–æ–¥ —É–∂–µ –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω\n"
                "‚Ä¢ –ö–æ–¥ —É—Å—Ç–∞—Ä–µ–ª\n"
                "‚Ä¢ –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞.",
                parse_mode='Markdown'
            )
            logger.warning(
                f"‚ö†Ô∏è  –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –∫–æ–¥–∞: "
                f"user_id={user.id}, code={registration_code}"
            )
            
        except Exception as e:
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤—è–∑–∫–µ –∞–∫–∫–∞—É–Ω—Ç–∞. "
                "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–∂–µ —É–≤–µ–¥–æ–º–ª—ë–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
            logger.error(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏: user_id={user.id}, code={registration_code}",
                exc_info=True
            )
            tasks.notify_admin.delay(
                text=(
                    f"‚ùóÔ∏è **–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ notification_bot**\n\n"
                    f"**User ID:** `{user.id}`\n"
                    f"**Username:** @{user.username or 'N/A'}\n"
                    f"**–ö–æ–¥:** `{registration_code}`\n"
                    f"**–û—à–∏–±–∫–∞:** `{e}`"
                ),
                category='error'
            )
    else:
        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∫–æ–¥–∞
        await update.message.reply_text(
            "üëã **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!**\n\n"
            "–≠—Ç–æ –±–æ—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –±–∏–±–ª–∏–æ—Ç–µ–∫–∏.\n\n"
            "–ß—Ç–æ–±—ã –ø—Ä–∏–≤—è–∑–∞—Ç—å –µ–≥–æ –∫ –≤–∞—à–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É, "
            "–∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –±–æ—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏.",
            parse_mode='Markdown'
        )
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ –±–æ—Ç—É."""
    await update.message.reply_text(
        "‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.\n\n"
        "–ö–∞–∫ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è:\n"
        "1. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –±–æ—Ç–µ\n"
        "2. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É –∞–∫—Ç–∏–≤–∞—Ü–∏–∏\n"
        "3. –í—Å—ë –≥–æ—Ç–æ–≤–æ!\n\n"
        "–î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞.", parse_mode='Markdown')

def setup_notification_bot() -> Application:
    """
    –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–æ—Ç–∞-—É–≤–µ–¥–æ–º–∏—Ç–µ–ª—è.
    Returns:
        Application: –°–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Telegram –±–æ—Ç–∞
    """
    application = Application.builder().token(config.NOTIFICATION_BOT_TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))

    logger.info("üîß Notification bot —Å–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω")
    return application

def main() -> None:
    """Legacy —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –ø—Ä—è–º–æ–≥–æ –∑–∞–ø—É—Å–∫–∞."""
    logger.warning(
    "‚ö†Ô∏è  –ü—Ä—è–º–æ–π –∑–∞–ø—É—Å–∫ notification_bot.py —É—Å—Ç–∞—Ä–µ–ª. "
    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ src/main.py –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö –±–æ—Ç–æ–≤."
    )
    application = setup_notification_bot()
    application.run_polling()

if __name__ == "main":
    main()
