# tasks.py
import os
from celery import Celery
from celery.schedules import crontab
from dotenv import load_dotenv
import telegram
import db_data
from db_utils import get_db_connection

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Celery ---
celery_app = Celery(
    'tasks',
    broker=os.getenv("CELERY_BROKER_URL"),
    backend=os.getenv("CELERY_RESULT_BACKEND")
)

# --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –î–í–£–• –ë–û–¢–û–í ---

# 1. –ë–æ—Ç-—É–≤–µ–¥–æ–º–∏—Ç–µ–ª—å –¥–ª—è –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô
try:
    user_notifier_bot = telegram.Bot(token=os.getenv("NOTIFICATION_BOT_TOKEN"))
    print("‚úÖ API –±–æ—Ç–∞-—É–≤–µ–¥–æ–º–∏—Ç–µ–ª—è –¥–ª—è –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ.")
except Exception as e:
    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å API –±–æ—Ç–∞-—É–≤–µ–¥–æ–º–∏—Ç–µ–ª—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
    user_notifier_bot = None

# 2. –ë–æ—Ç-–∞—É–¥–∏—Ç–æ—Ä –¥–ª—è –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê
try:
    admin_notifier_bot = telegram.Bot(token=os.getenv("ADMIN_NOTIFICATION_BOT_TOKEN"))
    ADMIN_TELEGRAM_ID = int(os.getenv("ADMIN_TELEGRAM_ID"))
    print("‚úÖ API –±–æ—Ç–∞-–∞—É–¥–∏—Ç–æ—Ä–∞ –¥–ª—è –ê–î–ú–ò–ù–ê –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ.")
except Exception as e:
    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å API –±–æ—Ç–∞-–∞—É–¥–∏—Ç–æ—Ä–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞: {e}")
    admin_notifier_bot = None

# --- –ù–û–í–´–ï, –°–ü–ï–¶–ò–ê–õ–ò–ó–ò–†–û–í–ê–ù–ù–´–ï –ó–ê–î–ê–ß–ò ---

@celery_app.task
def notify_user(user_id: int, text: str, category: str = 'system'):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ö–û–ù–ö–†–ï–¢–ù–û–ú–£ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Æ —á–µ—Ä–µ–∑ Bot-Notifier."""
    if not user_notifier_bot:
        print(f"‚ùå Bot-Notifier –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è user_id={user_id} –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
        return

    try:
        with get_db_connection() as conn:
            # –°–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –ë–î, —á—Ç–æ–±—ã –æ–Ω–æ –Ω–µ –ø–æ—Ç–µ—Ä—è–ª–æ—Å—å
            db_data.create_notification(conn, user_id=user_id, text=text, category=category)
            # –ó–∞—Ç–µ–º –ø–æ–ª—É—á–∞–µ–º telegram_id –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            telegram_id = db_data.get_telegram_id_by_user_id(conn, user_id)
        
        user_notifier_bot.send_message(chat_id=telegram_id, text=text, parse_mode='Markdown')
        print(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ '{category}' –¥–ª—è user_id={user_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ telegram_id={telegram_id}.")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ notify_user –¥–ª—è user_id={user_id}: {e}")

@celery_app.task
def notify_admin(text: str, category: str = 'audit'):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–£ —á–µ—Ä–µ–∑ Bot-Auditor."""
    if not admin_notifier_bot:
        print(f"‚ùå Bot-Auditor –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –°–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
        return
    try:
        # –î–ª—è –∞–¥–º–∏–Ω–∞ –º—ã –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –ë–î, –∞ —à–ª—ë–º –∏—Ö –Ω–∞–ø—Ä—è–º—É—é
        admin_notifier_bot.send_message(chat_id=ADMIN_TELEGRAM_ID, text=text, parse_mode='Markdown')
        print(f"‚úÖ –ê—É–¥–∏—Ç-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ '{category}' –¥–ª—è –∞–¥–º–∏–Ω–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ notify_admin: {e}")

# --- –ü–ï–†–ò–û–î–ò–ß–ï–°–ö–ê–Ø –ó–ê–î–ê–ß–ê (–ø–æ–∫–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
@celery_app.task
def check_due_dates_and_notify():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–Ω–∏–≥–∏ —Å –∏—Å—Ç–µ–∫—à–∏–º —Å—Ä–æ–∫–æ–º –∏ —Ç–µ, —É –∫–æ—Ç–æ—Ä—ã—Ö —Å—Ä–æ–∫ —Å–∫–æ—Ä–æ –∏—Å—Ç–µ—á–µ—Ç,
    –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.
    """
    print("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –∑–∞–¥–∞—á–∞: –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–æ–∫–æ–≤ —Å–¥–∞—á–∏ –∫–Ω–∏–≥...")
    try:
        with get_db_connection() as conn:
            # --- –ë–ª–æ–∫ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∫–Ω–∏–≥ (—É–∂–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω) ---
            overdue_entries = db_data.get_users_with_overdue_books(conn)
            if overdue_entries:
                print(f"–ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∫–Ω–∏–≥: {len(overdue_entries)}")
                for entry in overdue_entries:
                    # ... (–ª–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø—Ä–æ—Å—Ä–æ—á–∫–µ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
                    user_id, username, book_name, due_date = entry['user_id'], entry['username'], entry['book_name'], entry['due_date']
                    due_date_str = due_date.strftime('%d.%m.%Y')
                    user_text = f"‚ùóÔ∏è **–ü—Ä–æ—Å—Ä–æ—á–∫–∞:** –°—Ä–æ–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫–Ω–∏–≥–∏ ¬´{book_name}¬ª –∏—Å—Ç–µ–∫ {due_date_str}! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–µ—Ä–Ω–∏—Ç–µ –µ–µ –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ."
                    notify_user.delay(user_id=user_id, text=user_text, category='due_date')
                    admin_text = f"‚ùóÔ∏è–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –ø—Ä–æ—Å—Ä–æ—á–∏–ª –∫–Ω–∏–≥—É ¬´{book_name}¬ª (—Å—Ä–æ–∫: {due_date_str})."
                    notify_admin.delay(text=admin_text, category='overdue')

            # --- –ë–ª–æ–∫ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–Ω–∏–≥, —É –∫–æ—Ç–æ—Ä—ã—Ö —Å–∫–æ—Ä–æ –∏—Å—Ç–µ–∫–∞–µ—Ç —Å—Ä–æ–∫ ---
            due_soon_entries = db_data.get_users_with_books_due_soon(conn, days_ahead=2)
            if due_soon_entries:
                print(f"–ù–∞–π–¥–µ–Ω–æ –∫–Ω–∏–≥ —Å –ø–æ–¥—Ö–æ–¥—è—â–∏–º —Å—Ä–æ–∫–æ–º –≤–æ–∑–≤—Ä–∞—Ç–∞: {len(due_soon_entries)}")
                for entry in due_soon_entries:
                    user_id, book_name, due_date = entry['user_id'], entry['book_name'], entry['due_date']
                    due_date_str = due_date.strftime('%d.%m.%Y')
                    user_text = f"üîî **–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:** –°—Ä–æ–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫–Ω–∏–≥–∏ ¬´{book_name}¬ª –∏—Å—Ç–µ–∫–∞–µ—Ç {due_date_str}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –µ–µ –≤–µ—Ä–Ω—É—Ç—å."
                    notify_user.delay(user_id=user_id, text=user_text, category='due_date_reminder')
        
            if not overdue_entries and not due_soon_entries:
                print("–ö–Ω–∏–≥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

    except Exception as e:
        error_message = f"‚ùóÔ∏è **–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –∑–∞–¥–∞—á–µ**\n\n`check_due_dates_and_notify`:\n`{e}`"
        print(f"‚ùå {error_message}")
        notify_admin.delay(text=error_message, category='error')

@celery_app.task
def notify_user(user_id: int, text: str, category: str = 'system', button_text: str = None, button_callback: str = None):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ö–û–ù–ö–†–ï–¢–ù–û–ú–£ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Æ —á–µ—Ä–µ–∑ Bot-Notifier."""
    if not user_notifier_bot:
        print(f"‚ùå Bot-Notifier –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è user_id={user_id} –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
        return

    try:
        with get_db_connection() as conn:
            db_data.create_notification(conn, user_id=user_id, text=text, category=category)
            telegram_id = db_data.get_telegram_id_by_user_id(conn, user_id)

        # --- –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê –î–õ–Ø –ö–ù–û–ü–û–ö ---
        reply_markup = None
        if button_text and button_callback:
            keyboard = [[telegram.InlineKeyboardButton(button_text, callback_data=button_callback)]]
            reply_markup = telegram.InlineKeyboardMarkup(keyboard)

        user_notifier_bot.send_message(
            chat_id=telegram_id, 
            text=text, 
            parse_mode='Markdown',
            reply_markup=reply_markup # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        )
        print(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ '{category}' –¥–ª—è user_id={user_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ telegram_id={telegram_id}.")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ notify_user –¥–ª—è user_id={user_id}: {e}")