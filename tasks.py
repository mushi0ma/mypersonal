# tasks.py
import os
import logging
from celery import Celery
from celery.schedules import crontab
from dotenv import load_dotenv
import telegram
import db_data
from db_utils import get_db_connection
from datetime import datetime
from backup_db import backup_database
from celery import group
from celery.exceptions import SoftTimeLimitExceeded
# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–≥–µ—Ä
load_dotenv()
logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)
logger = logging.getLogger(__name__)

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Celery ---
celery_app = Celery(
    'tasks',
    broker=os.getenv("CELERY_BROKER_URL"),
    backend=os.getenv("CELERY_RESULT_BACKEND")
)

celery_app.conf.task_annotations = {
    'tasks.notify_user': {
        'rate_limit': '10/s',  # 10 –∑–∞–¥–∞—á –≤ —Å–µ–∫—É–Ω–¥—É
        'time_limit': 30,      # –ú–∞–∫—Å–∏–º—É–º 30 —Å–µ–∫—É–Ω–¥ –Ω–∞ –∑–∞–¥–∞—á—É
    },
    'tasks.broadcast_new_book': {
        'rate_limit': '1/m',   # 1 —Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É
        'time_limit': 600,
    },
}

# --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –î–í–£–• –ë–û–¢–û–í ---
try:
    user_notifier_bot = telegram.Bot(token=os.getenv("NOTIFICATION_BOT_TOKEN"))
    logger.info("API –±–æ—Ç–∞-—É–≤–µ–¥–æ–º–∏—Ç–µ–ª—è –¥–ª—è –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ.")
except Exception as e:
    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å API –±–æ—Ç–∞-—É–≤–µ–¥–æ–º–∏—Ç–µ–ª—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
    user_notifier_bot = None

try:
    admin_notifier_bot = telegram.Bot(token=os.getenv("ADMIN_NOTIFICATION_BOT_TOKEN"))
    ADMIN_TELEGRAM_ID = int(os.getenv("ADMIN_TELEGRAM_ID"))
    logger.info("API –±–æ—Ç–∞-–∞—É–¥–∏—Ç–æ—Ä–∞ –¥–ª—è –ê–î–ú–ò–ù–ê –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ.")
except Exception as e:
    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å API –±–æ—Ç–∞-–∞—É–¥–∏—Ç–æ—Ä–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞: {e}")
    admin_notifier_bot = None

# --- –ù–ò–ó–ö–û–£–†–û–í–ù–ï–í–´–ï –ó–ê–î–ê–ß–ò –û–¢–ü–†–ê–í–ö–ò ---

@celery_app.task
def notify_user(user_id: int, text: str, category: str = 'system', button_text: str = None, button_callback: str = None):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ö–û–ù–ö–†–ï–¢–ù–û–ú–£ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Æ —á–µ—Ä–µ–∑ Bot-Notifier."""
    if not user_notifier_bot:
        logger.warning(f"Bot-Notifier –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è user_id={user_id} –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
        return

    try:
        with get_db_connection() as conn:
            db_data.create_notification(conn, user_id=user_id, text=text, category=category)
            telegram_id = db_data.get_telegram_id_by_user_id(conn, user_id)

        reply_markup = None
        if button_text and button_callback:
            keyboard = [[telegram.InlineKeyboardButton(button_text, callback_data=button_callback)]]
            reply_markup = telegram.InlineKeyboardMarkup(keyboard)

        user_notifier_bot.send_message(
            chat_id=telegram_id, 
            text=text, 
            parse_mode='Markdown',
            reply_markup=reply_markup
        )
        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ '{category}' –¥–ª—è user_id={user_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ telegram_id={telegram_id}.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ notify_user –¥–ª—è user_id={user_id}: {e}")

@celery_app.task
def notify_admin(text: str, category: str = 'audit'):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–£ —á–µ—Ä–µ–∑ Bot-Auditor."""
    if not admin_notifier_bot:
        logger.warning(f"Bot-Auditor –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –°–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
        return
    try:
        admin_notifier_bot.send_message(chat_id=ADMIN_TELEGRAM_ID, text=text, parse_mode='Markdown')
        logger.info(f"–ê—É–¥–∏—Ç-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ '{category}' –¥–ª—è –∞–¥–º–∏–Ω–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ notify_admin: {e}")

# --- –í–´–°–û–ö–û–£–†–û–í–ù–ï–í–´–ï –ò –ü–ï–†–ò–û–î–ò–ß–ï–°–ö–ò–ï –ó–ê–î–ê–ß–ò ---

@celery_app.task(bind=True, max_retries=3)
def broadcast_new_book(self, book_id: int):
    """–†–∞—Å—Å—ã–ª–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –∫–Ω–∏–≥–µ –ü–ê–ß–ö–ê–ú–ò."""
    logger.info(f"–ó–∞–ø—É—â–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∞ –æ –Ω–æ–≤–æ–π –∫–Ω–∏–≥–µ —Å ID: {book_id}")
    try:
        with get_db_connection() as conn:
            book = db_data.get_book_card_details(conn, book_id)
            all_user_ids = db_data.get_all_user_ids(conn)
        
        text = f"üÜï **–í –±–∏–±–ª–∏–æ—Ç–µ–∫–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ!**\n\n–ö–Ω–∏–≥–∞ ¬´{book['name']}¬ª –æ—Ç –∞–≤—Ç–æ—Ä–∞ {book['author']} –±—ã–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∫–∞—Ç–∞–ª–æ–≥."
        button_text = "üìñ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É –∫–Ω–∏–≥–∏"
        button_callback = f"view_book_{book_id}"

        # ‚úÖ –û–¢–ü–†–ê–í–õ–Ø–ï–ú –ü–ê–ß–ö–ê–ú–ò –ü–û 50 –®–¢–£–ö
        BATCH_SIZE = 50
        total_sent = 0
        
        for i in range(0, len(all_user_ids), BATCH_SIZE):
            batch = all_user_ids[i:i + BATCH_SIZE]
            
            # –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—É –∑–∞–¥–∞—á
            job = group(
                notify_user.s(
                    user_id=uid,
                    text=text,
                    category='new_arrival',
                    button_text=button_text,
                    button_callback=button_callback
                ) for uid in batch
            )
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—á–∫—É
            job.apply_async()
            total_sent += len(batch)
            
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {total_sent}/{len(all_user_ids)} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
        
        logger.info(f"–†–∞—Å—Å—ã–ª–∫–∞ –æ –Ω–æ–≤–æ–π –∫–Ω–∏–≥–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è {total_sent} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        notify_admin.delay(f"üöÄ –£—Å–ø–µ—à–Ω–æ —Ä–∞–∑–æ—Å–ª–∞–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –∫–Ω–∏–≥–µ ¬´{book['name']}¬ª –¥–ª—è {total_sent} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        
    except SoftTimeLimitExceeded:
        logger.error("–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")
        self.retry(countdown=60)  # –ü–æ–≤—Ç–æ—Ä–∏—Ç—å —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ broadcast_new_book: {e}")
        notify_admin.delay(f"‚ùóÔ∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ –æ –Ω–æ–≤–æ–π –∫–Ω–∏–≥–µ (ID: {book_id}): {e}")
        raise self.retry(exc=e, countdown=30)

@celery_app.task
def check_due_dates_and_notify():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ä–æ–∫–∏ —Å–¥–∞—á–∏ –∫–Ω–∏–≥ –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –¥–æ–ª–∂–Ω–∏–∫–æ–≤ –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    logger.info("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –∑–∞–¥–∞—á–∞: –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–æ–∫–æ–≤ —Å–¥–∞—á–∏ –∫–Ω–∏–≥...")
    try:
        with get_db_connection() as conn:
            overdue_entries = db_data.get_users_with_overdue_books(conn)
            if overdue_entries:
                logger.info(f"–ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∫–Ω–∏–≥: {len(overdue_entries)}")
                for entry in overdue_entries:
                    # ... (–ª–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–∞ –∂–µ)
                    user_id, username, book_name, due_date = entry['user_id'], entry['username'], entry['book_name'], entry['due_date']
                    due_date_str = due_date.strftime('%d.%m.%Y')
                    user_text = f"‚ùóÔ∏è **–ü—Ä–æ—Å—Ä–æ—á–∫–∞:** –°—Ä–æ–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ ¬´{book_name}¬ª –∏—Å—Ç–µ–∫ {due_date_str}! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–µ—Ä–Ω–∏—Ç–µ –µ–µ."
                    notify_user(user_id=user_id, text=user_text, category='due_date')
                    admin_text = f"‚ùóÔ∏è–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –ø—Ä–æ—Å—Ä–æ—á–∏–ª ¬´{book_name}¬ª (—Å—Ä–æ–∫: {due_date_str})."
                    notify_admin(text=admin_text, category='overdue')

            due_soon_entries = db_data.get_users_with_books_due_soon(conn, days_ahead=2)
            if due_soon_entries:
                logger.info(f"–ù–∞–π–¥–µ–Ω–æ –∫–Ω–∏–≥ —Å –ø–æ–¥—Ö–æ–¥—è—â–∏–º —Å—Ä–æ–∫–æ–º –≤–æ–∑–≤—Ä–∞—Ç–∞: {len(due_soon_entries)}")
                for entry in due_soon_entries:
                    user_id, book_name, borrow_id = entry['user_id'], entry['book_name'], entry['borrow_id']
                    user_text = f"üîî **–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:** –°—Ä–æ–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫–Ω–∏–≥–∏ ¬´{book_name}¬ª –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ 2 –¥–Ω—è."
                    notify_user(
                        user_id=user_id, 
                        text=user_text, 
                        category='due_date_reminder',
                        button_text="‚ôªÔ∏è –ü—Ä–æ–¥–ª–∏—Ç—å –Ω–∞ 7 –¥–Ω–µ–π",
                        button_callback=f"extend_borrow_{borrow_id}"
                    )
        
            if not overdue_entries and not due_soon_entries:
                logger.info("–ö–Ω–∏–≥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

    except Exception as e:
        error_message = f"‚ùóÔ∏è **–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –∑–∞–¥–∞—á–µ**\n\n`check_due_dates_and_notify`:\n`{e}`"
        logger.error(error_message)
        notify_admin(text=error_message, category='error')

@celery_app.task
def check_overdue_books():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∫–Ω–∏–≥–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è."""
    with get_db_connection() as conn:
        overdue_users = db_data.get_users_with_overdue_books(conn)
    
    for user_info in overdue_users:
        days_overdue = (datetime.now().date() - user_info['due_date']).days
        message = (
            f"‚ö†Ô∏è **–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –≤–æ–∑–≤—Ä–∞—Ç–µ**\n\n"
            f"–ö–Ω–∏–≥–∞ ¬´{user_info['book_name']}¬ª –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–∞ –Ω–∞ **{days_overdue} –¥–Ω.**\n\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–µ—Ä–Ω–∏—Ç–µ –µ—ë –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ."
        )
        notify_user.delay(user_id=user_info['user_id'], text=message, category='overdue')

@celery_app.task
def remind_due_soon():
    """–ù–∞–ø–æ–º–∏–Ω–∞–µ—Ç –æ —Å–∫–æ—Ä–æ–º –∏—Å—Ç–µ—á–µ–Ω–∏–∏ —Å—Ä–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞."""
    with get_db_connection() as conn:
        users_due_soon = db_data.get_users_with_books_due_soon(conn, days_ahead=2)
    
    for user_info in users_due_soon:
        message = (
            f"üìÖ **–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ**\n\n"
            f"–ß–µ—Ä–µ–∑ 2 –¥–Ω—è –∏—Å—Ç–µ–∫–∞–µ—Ç —Å—Ä–æ–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫–Ω–∏–≥–∏ ¬´{user_info['book_name']}¬ª.\n\n"
            f"–î–∞—Ç–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞: **{user_info['due_date'].strftime('%d.%m.%Y')}**"
        )
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–æ–¥–ª–µ–Ω–∏—è
        notify_user.delay(
            user_id=user_info['user_id'], 
            text=message, 
            category='reminder',
            button_text="‚è∞ –ü—Ä–æ–¥–ª–∏—Ç—å —Å—Ä–æ–∫",
            button_callback=f"extend_borrow_{user_info['borrow_id']}"
        )

@celery_app.task
def backup_database_task():
    """Celery –∑–∞–¥–∞—á–∞ –¥–ª—è backup –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    return backup_database()

@celery_app.task
def health_check_task():
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã."""
    from health_check import run_health_check
    all_ok, message = run_health_check()
    if not all_ok:
        logger.error("Health check failed!")
    return all_ok

# --- –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á (Celery Beat) ---
celery_app.conf.beat_schedule = {
    'check-due-dates-every-day': {
        'task': 'tasks.check_due_dates_and_notify',
        'schedule': crontab(hour=10, minute=0),
    },
    'check-overdue-books': {
        'task': 'tasks.check_overdue_books',
        'schedule': crontab(hour=10, minute=0),  # –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 10:00
    },
    'daily-database-backup': {
        'task': 'celery_tasks.backup_database_task',
        'schedule': crontab(hour=3, minute=0),  # –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 3:00
    },
    'health-check-every-hour': {
    'task': 'tasks.health_check_task',
    'schedule': crontab(minute=0),  # –ö–∞–∂–¥—ã–π —á–∞—Å
    },
}