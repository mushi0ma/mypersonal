# -*- coding: utf-8 -*-
import os
from datetime import datetime
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler,
    CallbackQueryHandler
)

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
load_dotenv()
ADMIN_BOT_TOKEN = os.getenv("ADMIN_BOT_TOKEN")
ADMIN_TELEGRAM_ID = int(os.getenv("ADMIN_TELEGRAM_ID"))

# --- –ò–º–ø–æ—Ä—Ç –Ω–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π ---
import db_data
from db_utils import get_db_connection # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
from tasks import create_and_send_notification

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤ ---
BROADCAST_MESSAGE = range(1)

# --- –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ ---
admin_filter = filters.User(user_id=ADMIN_TELEGRAM_ID)

# --------------------------
# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
# --------------------------

def calculate_age(dob_string: str) -> str:
    """–í—ã—á–∏—Å–ª—è–µ—Ç –≤–æ–∑—Ä–∞—Å—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç—Ä–æ–∫–∏ —Å –¥–∞—Ç–æ–π —Ä–æ–∂–¥–µ–Ω–∏—è (–î–î.–ú–ú.–ì–ì–ì–ì)."""
    if not dob_string:
        return "?? –ª–µ—Ç"
    try:
        birth_date = datetime.strptime(dob_string, "%d.%m.%Y")
        today = datetime.today()
        age = today.year - birth_date.year - ((today.month, today.day) < (birth_date.month, birth_date.day))
        return f"{age} –ª–µ—Ç"
    except (ValueError, TypeError):
        return "?? –ª–µ—Ç"

# --------------------------
# --- –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
# --------------------------

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∞."""
    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/broadcast - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n"
        "/stats - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"
    )

async def start_broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏."""
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏. –î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel.")
    return BROADCAST_MESSAGE

async def process_broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏ —Å—Ç–∞–≤–∏—Ç –≤ –æ—á–µ—Ä–µ–¥—å –∑–∞–¥–∞—á–∏ –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É."""
    message_text = update.message.text
    await update.message.reply_text("–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...")
    try:
        with get_db_connection() as conn:
            user_db_ids = db_data.get_all_user_ids(conn)
        for user_id in user_db_ids:
            # –í—ã–∑—ã–≤–∞–µ–º –Ω–æ–≤—É—é "—É–º–Ω—É—é" –∑–∞–¥–∞—á—É
            create_and_send_notification.delay(user_id=user_id, text=message_text, category='broadcast')
        await update.message.reply_text(f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞ –¥–ª—è {len(user_db_ids)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω—è–µ—Ç –¥–∏–∞–ª–æ–≥ —Ä–∞—Å—Å—ã–ª–∫–∏."""
    await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END

async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω—ã–º —Å–ø–∏—Å–∫–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    query = update.callback_query
    page = 0
    users_per_page = 5
    if query:
        await query.answer()
        page = int(query.data.split('_')[2])
    context.user_data['current_stats_page'] = page
    offset = page * users_per_page
    try:
        with get_db_connection() as conn:
            users, total_users = db_data.get_all_users(conn, limit=users_per_page, offset=offset)
        if not users and page == 0:
            await update.message.reply_text("–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
            return
        message_text = f"üë§ **–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}**\n\n–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}:\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–µ—Ç–∞–ª–µ–π."
        keyboard = []
        for user in users:
            button_text = f"üë§ {user['username']} ({user['full_name']})"
            callback_data = f"admin_view_user_{user['id']}"
            keyboard.append([InlineKeyboardButton(button_text, callback_data=callback_data)])
        nav_buttons = []
        if page > 0:
            nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"stats_page_{page - 1}"))
        if (page + 1) * users_per_page < total_users:
            nav_buttons.append(InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"stats_page_{page + 1}"))
        if nav_buttons:
            keyboard.append(nav_buttons)
        reply_markup = InlineKeyboardMarkup(keyboard)
        if query:
            await query.edit_message_text(message_text, reply_markup=reply_markup, parse_mode='Markdown')
        else:
            await update.message.reply_text(message_text, reply_markup=reply_markup, parse_mode='Markdown')
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

async def view_user_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    query = update.callback_query
    await query.answer()
    current_page = context.user_data.get('current_stats_page', 0)
    user_id = int(query.data.split('_')[3])
    try:
        with get_db_connection() as conn:
            user = db_data.get_user_by_id(conn, user_id)
            borrow_history = db_data.get_user_borrow_history(conn, user_id)
            rating_history = db_data.get_user_ratings(conn, user_id)
        reg_date = user['registration_date'].strftime("%Y-%m-%d %H:%M")
        age = calculate_age(user['dob'])
        message_parts = [
            f"**–ö–∞—Ä—Ç–æ—á–∫–∞: `{user['username']}`**",
            f"**–§–ò–û:** {user['full_name']}",
            f"**–í–æ–∑—Ä–∞—Å—Ç:** {age}",
            f"**–°—Ç–∞—Ç—É—Å:** {user['status']}",
            f"**–ö–æ–Ω—Ç–∞–∫—Ç:** {user['contact_info']}",
            f"**–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:** {reg_date}\n",
            "**–ò—Å—Ç–æ—Ä–∏—è –≤–∑—è—Ç—ã—Ö –∫–Ω–∏–≥:**"
        ]
        if borrow_history:
            for item in borrow_history:
                return_date_str = item['return_date'].strftime('%d.%m.%Y') if item['return_date'] else "–Ω–µ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞"
                borrow_date_str = item['borrow_date'].strftime('%d.%m.%Y')
                message_parts.append(f" - `{item['book_name']}` (–≤–∑—è—Ç–∞: {borrow_date_str}, –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞: {return_date_str})")
        else:
            message_parts.append("–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π.")
        message_parts.append("\n**–ò—Å—Ç–æ—Ä–∏—è –æ—Ü–µ–Ω–æ–∫:**")
        if rating_history:
            for item in rating_history:
                stars = "‚≠ê" * item['rating']
                message_parts.append(f" - `{item['book_name']}`: {stars}")
        else:
            message_parts.append("–ù–µ—Ç –æ—Ü–µ–Ω–æ–∫.")
        message_text = "\n".join(message_parts)
        keyboard = [
            [InlineKeyboardButton("üìú –ò—Å—Ç–æ—Ä–∏—è –¥–µ–π—Å—Ç–≤–∏–π", callback_data=f"admin_activity_{user_id}_0")],
            [InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data=f"admin_delete_user_{user_id}")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data=f"stats_page_{current_page}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(message_text, reply_markup=reply_markup, parse_mode='Markdown')
    except Exception as e:
        await query.edit_message_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

async def ask_for_delete_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –∞–¥–º–∏–Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ."""
    query = update.callback_query
    await query.answer()
    user_id = int(query.data.split('_')[3])
    keyboard = [
        [InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"admin_confirm_delete_{user_id}")],
        [InlineKeyboardButton("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data=f"admin_view_user_{user_id}")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?\n\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –≤–µ—Ä–Ω–µ—Ç –≤—Å–µ –µ–≥–æ –∫–Ω–∏–≥–∏ –∏ –æ–±–µ–∑–ª–∏—á–∏—Ç –∞–∫–∫–∞—É–Ω—Ç. –ò—Å—Ç–æ—Ä–∏—è –¥–µ–π—Å—Ç–≤–∏–π —Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è.",
        reply_markup=reply_markup
    )

async def process_delete_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ —É–¥–∞–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    query = update.callback_query
    await query.answer()
    user_id = int(query.data.split('_')[3])
    current_page = context.user_data.get('current_stats_page', 0)
    try:
        with get_db_connection() as conn:
            result = db_data.delete_user_by_admin(conn, user_id)
        await query.edit_message_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.")
    except Exception as e:
        await query.edit_message_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {e}")
    query.data = f"stats_page_{current_page}"
    await stats(update, context)

async def show_user_activity(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω—ã–π –ª–æ–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    query = update.callback_query
    await query.answer()

    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    # e.g., "admin_activity_12_1" -> user_id=12, page=1
    parts = query.data.split('_')
    user_id = int(parts[2])
    page = int(parts[3])
    
    logs_per_page = 10

    try:
        logs, total_logs = db_data.get_user_activity(user_id, limit=logs_per_page, offset=page * logs_per_page)

        user = db_data.get_user_by_id(user_id) # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
        
        message_parts = [f"**üìú –ñ—É—Ä–Ω–∞–ª –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è `{user['username']}`**\n(–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {total_logs}, —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1})\n"]

        if logs:
            for log in logs:
                timestamp_str = log['timestamp'].strftime('%d.%m.%Y %H:%M')
                details = f"({log['details']})" if log['details'] else ""
                message_parts.append(f"`{timestamp_str}` - **{log['action']}** {details}")
        else:
            message_parts.append("–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ–± –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.")

        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        nav_buttons = []
        if page > 0:
            nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"admin_activity_{user_id}_{page - 1}"))
        if (page + 1) * logs_per_page < total_logs:
            nav_buttons.append(InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"admin_activity_{user_id}_{page + 1}"))

        keyboard = []
        if nav_buttons:
            keyboard.append(nav_buttons)
        
        # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∫–∞—Ä—Ç–æ—á–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        keyboard.append([InlineKeyboardButton("üë§ –ù–∞–∑–∞–¥ –∫ –∫–∞—Ä—Ç–æ—á–∫–µ", callback_data=f"admin_view_user_{user_id}")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("\n".join(message_parts), reply_markup=reply_markup, parse_mode='Markdown')

    except Exception as e:
        await query.edit_message_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–æ–≥–æ–≤: {e}")

# --------------------------
# --- –ì–õ–ê–í–ù–´–ô HANDLER ---
# --------------------------

def main() -> None:
    application = Application.builder().token(ADMIN_BOT_TOKEN).build()
    broadcast_handler = ConversationHandler(
        entry_points=[CommandHandler("broadcast", start_broadcast, filters=admin_filter)],
        states={
            BROADCAST_MESSAGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_broadcast)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )
    application.add_handler(CommandHandler("start", start, filters=admin_filter))
    application.add_handler(broadcast_handler)
    application.add_handler(CommandHandler("stats", stats, filters=admin_filter))
    application.add_handler(CallbackQueryHandler(stats, pattern="^stats_page_"))
    application.add_handler(CallbackQueryHandler(view_user_profile, pattern="^admin_view_user_"))
    application.add_handler(CallbackQueryHandler(show_user_activity, pattern="^admin_activity_"))
    application.add_handler(CallbackQueryHandler(ask_for_delete_confirmation, pattern="^admin_delete_user_"))
    application.add_handler(CallbackQueryHandler(process_delete_confirmation, pattern="^admin_confirm_delete_"))

    print("‚úÖ –ê–¥–º–∏–Ω-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    application.run_polling()

if __name__ == "__main__":
    main()