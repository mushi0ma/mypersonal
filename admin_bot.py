# -*- coding: utf-8 -*-
import os
from librarybot import rate_limit
import logging
from datetime import datetime
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler,
    CallbackQueryHandler
)

logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)
logger = logging.getLogger(__name__)

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
load_dotenv()
ADMIN_BOT_TOKEN = os.getenv("ADMIN_BOT_TOKEN")
ADMIN_TELEGRAM_ID = int(os.getenv("ADMIN_TELEGRAM_ID"))

# --- –ò–º–ø–æ—Ä—Ç –Ω–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π ---
import db_data
from db_utils import get_db_connection # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
import tasks

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤ ---
BROADCAST_MESSAGE = range(1)
SELECTING_BOOK_FIELD, UPDATING_BOOK_FIELD = range(2, 4)
GET_NAME, GET_AUTHOR, GET_GENRE, GET_DESCRIPTION, GET_COVER, CONFIRM_ADD = range(4, 10)

# --- –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ ---
admin_filter = filters.User(user_id=ADMIN_TELEGRAM_ID)

# --------------------------
# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
# --------------------------

def calculate_age(dob_string: str) -> str:
    """–í—ã—á–∏—Å–ª—è–µ—Ç –≤–æ–∑—Ä–∞—Å—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç—Ä–æ–∫–∏ —Å –¥–∞—Ç–æ–π —Ä–æ–∂–¥–µ–Ω–∏—è (–î–î.–ú–ú.–ì–ì–ì–ì)."""
    if not dob_string:
        return "?? –ª–µ—Ç"
    try:
        birth_date = datetime.strptime(dob_string, "%d.%m.%Y")
        today = datetime.today()
        age = today.year - birth_date.year - ((today.month, today.day) < (birth_date.month, birth_date.day))
        return f"{age} –ª–µ—Ç"
    except (ValueError, TypeError):
        return "?? –ª–µ—Ç"

# --------------------------
# --- –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
# --------------------------

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∞."""
    await update.message.reply_text(
        "üëã **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!**\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –±–æ—Ç–æ–º. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
        "üìä /stats - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏\n"
        "üìö /books - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–æ–º –∫–Ω–∏–≥\n"
        "üì¢ /broadcast - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"
    )

async def start_broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏."""
    await update.message.reply_text("üì¢ **–†–∞—Å—Å—ã–ª–∫–∞**\n\n–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–ª—É—á–∞—Ç –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏. –î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel.")
    return BROADCAST_MESSAGE

async def process_broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏ —Å—Ç–∞–≤–∏—Ç –≤ –æ—á–µ—Ä–µ–¥—å –∑–∞–¥–∞—á–∏ –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É."""
    message_text = update.message.text
    await update.message.reply_text("‚è≥ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...")
    try:
        with get_db_connection() as conn:
            user_db_ids = db_data.get_all_user_ids(conn)
        for user_id in user_db_ids:
            tasks.notify_user.delay(user_id=user_id, text=message_text, category='broadcast')
        await update.message.reply_text(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞ –¥–ª—è {len(user_db_ids)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")

        admin_text = f"üì¢ –ê–¥–º–∏–Ω –∑–∞–ø—É—Å—Ç–∏–ª —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è {len(user_db_ids)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
        tasks.notify_admin.delay(text=admin_text, category='admin_action')

    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥."""
    message = "üëå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ."
    if update.callback_query:
        await update.callback_query.answer()
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É —Å–æ–æ–±—â–µ–Ω–∏—è caption (–µ—Å–ª–∏ —ç—Ç–æ —Ñ–æ—Ç–æ)
        if update.callback_query.message.caption:
            await update.callback_query.edit_message_caption(caption=message)
        else:
            await update.callback_query.edit_message_text(message)
    else:
        await update.message.reply_text(message)
        
    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    context.user_data.pop('book_to_edit', None)
    context.user_data.pop('field_to_edit', None)
    context.user_data.pop('new_book', None)
    
    return ConversationHandler.END

async def show_stats_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã –∏ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è."""
    query = update.callback_query
    if query:
        await query.answer()

    try:
        with get_db_connection() as conn:
            cur = conn.cursor()
            cur.execute("SELECT COUNT(*) FROM users WHERE telegram_id IS NOT NULL")
            total_users = cur.fetchone()[0]
            cur.execute("SELECT COUNT(*) FROM books")
            total_books = cur.fetchone()[0]
            cur.execute("SELECT COUNT(*) FROM borrowed_books WHERE return_date IS NULL")
            currently_borrowed = cur.fetchone()[0]
            cur.execute("SELECT COUNT(*) FROM borrowed_books WHERE return_date IS NOT NULL AND return_date <= due_date")
            on_time_returns = cur.fetchone()[0]
            cur.execute("SELECT COUNT(*) FROM borrowed_books WHERE return_date IS NOT NULL")
            total_returns = cur.fetchone()[0]
            on_time_rate = (on_time_returns / total_returns * 100) if total_returns > 0 else 0
        
        message = (
            f"üìä **–ü–∞–Ω–µ–ª—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏**\n\n"
            f"üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: **{total_users}**\n"
            f"üìö –ö–Ω–∏–≥ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ: **{total_books}**\n"
            f"üìñ –ö–Ω–∏–≥ –Ω–∞ —Ä—É–∫–∞—Ö: **{currently_borrowed}**\n"
            f"‚úÖ –ö–Ω–∏–≥ –¥–æ—Å—Ç—É–ø–Ω–æ: **{total_books - currently_borrowed}**\n\n"
            f"üìà –í–æ–∑–≤—Ä–∞—â–µ–Ω–æ –≤–æ–≤—Ä–µ–º—è: **{on_time_rate:.1f}%**"
        )
        
        keyboard = [
            [InlineKeyboardButton("üë• –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="users_list_page_0")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if query:
            await query.edit_message_text(message, reply_markup=reply_markup, parse_mode='Markdown')
        else:
            await update.message.reply_text(message, reply_markup=reply_markup, parse_mode='Markdown')

    except Exception as e:
        error_message = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}"
        logger.error(error_message, exc_info=True)
        tasks.notify_admin.delay(text=f"‚ùóÔ∏è **–û—à–∏–±–∫–∞ –≤ `admin_bot`**\n\n**–§—É–Ω–∫—Ü–∏—è:** `show_stats_panel`\n**–û—à–∏–±–∫–∞:** `{e}`")
        if query:
            await query.edit_message_text(error_message)
        else:
            await update.message.reply_text(error_message)

async def show_users_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    query = update.callback_query
    page = int(query.data.split('_')[3])
    users_per_page = 5
    await query.answer()
    
    context.user_data['current_stats_page'] = page
    offset = page * users_per_page
    try:
        with get_db_connection() as conn:
            users, total_users = db_data.get_all_users(conn, limit=users_per_page, offset=offset)
        
        message_text = f"üë• **–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π** (–í—Å–µ–≥–æ: {total_users})\n\n–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}:\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–µ—Ç–∞–ª–µ–π."
        keyboard = []
        for user in users:
            button_text = f"üë§ {user['username']} ({user['full_name']})"
            callback_data = f"admin_view_user_{user['id']}"
            keyboard.append([InlineKeyboardButton(button_text, callback_data=callback_data)])
        
        nav_buttons = []
        if page > 0:
            nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"users_list_page_{page - 1}"))
        if (page + 1) * users_per_page < total_users:
            nav_buttons.append(InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"users_list_page_{page + 1}"))
        if nav_buttons:
            keyboard.append(nav_buttons)
        
        keyboard.append([InlineKeyboardButton("üìä –ù–∞–∑–∞–¥ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ", callback_data="back_to_stats_panel")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(message_text, reply_markup=reply_markup, parse_mode='Markdown')

    except Exception as e:
        error_message = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}"
        logger.error(error_message, exc_info=True)
        tasks.notify_admin.delay(text=f"‚ùóÔ∏è **–û—à–∏–±–∫–∞ –≤ `admin_bot`**\n\n**–§—É–Ω–∫—Ü–∏—è:** `show_users_list`\n**–û—à–∏–±–∫–∞:** `{e}`")
        await query.edit_message_text(error_message)

async def view_user_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    query = update.callback_query
    await query.answer()
    current_page = context.user_data.get('current_stats_page', 0)
    user_id = int(query.data.split('_')[3])
    try:
        with get_db_connection() as conn:
            user = db_data.get_user_by_id(conn, user_id)
            borrow_history = db_data.get_user_borrow_history(conn, user_id)
            rating_history = db_data.get_user_ratings(conn, user_id)
        reg_date = user['registration_date'].strftime("%d.%m.%Y %H:%M")
        age = calculate_age(user['dob'])
        message_parts = [
            f"**üë§ –ö–∞—Ä—Ç–æ—á–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: `{user['username']}`**",
            f"**–§–ò–û:** {user['full_name']}",
            f"**–í–æ–∑—Ä–∞—Å—Ç:** {age}",
            f"**–°—Ç–∞—Ç—É—Å:** {user['status']}",
            f"**–ö–æ–Ω—Ç–∞–∫—Ç:** `{user['contact_info']}`",
            f"**–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:** {reg_date}\n",
            "**üìö –ò—Å—Ç–æ—Ä–∏—è –≤–∑—è—Ç—ã—Ö –∫–Ω–∏–≥:**"
        ]
        if borrow_history:
            for item in borrow_history:
                return_date_str = item['return_date'].strftime('%d.%m.%Y') if item['return_date'] else "–ù–∞ —Ä—É–∫–∞—Ö"
                borrow_date_str = item['borrow_date'].strftime('%d.%m.%Y')
                message_parts.append(f" - `{item['book_name']}` (–≤–∑—è—Ç–∞: {borrow_date_str}, –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞: {return_date_str})")
        else:
            message_parts.append("  _–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π._")
        message_parts.append("\n**‚≠ê –ò—Å—Ç–æ—Ä–∏—è –æ—Ü–µ–Ω–æ–∫:**")
        if rating_history:
            for item in rating_history:
                stars = "‚≠ê" * item['rating']
                message_parts.append(f" - `{item['book_name']}`: {stars}")
        else:
            message_parts.append("  _–ù–µ—Ç –æ—Ü–µ–Ω–æ–∫._")
        message_text = "\n".join(message_parts)
        keyboard = [
            [InlineKeyboardButton("üìú –ò—Å—Ç–æ—Ä–∏—è –¥–µ–π—Å—Ç–≤–∏–π", callback_data=f"admin_activity_{user_id}_0")],
            [InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data=f"admin_delete_user_{user_id}")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data=f"users_list_page_{current_page}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(message_text, reply_markup=reply_markup, parse_mode='Markdown')
    except Exception as e:
        error_message = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}"
        logger.error(error_message, exc_info=True)
        tasks.notify_admin.delay(text=f"‚ùóÔ∏è **–û—à–∏–±–∫–∞ –≤ `admin_bot`**\n\n**–§—É–Ω–∫—Ü–∏—è:** `view_user_profile`\n**–û—à–∏–±–∫–∞:** `{e}`")
        await query.edit_message_text(error_message)

async def ask_for_delete_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –∞–¥–º–∏–Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ."""
    query = update.callback_query
    await query.answer()
    user_id = int(query.data.split('_')[3])
    keyboard = [
        [InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"admin_confirm_delete_{user_id}")],
        [InlineKeyboardButton("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data=f"admin_view_user_{user_id}")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        "**‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?**\n\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –≤–µ—Ä–Ω–µ—Ç –≤—Å–µ –µ–≥–æ –∫–Ω–∏–≥–∏ –∏ –æ–±–µ–∑–ª–∏—á–∏—Ç –∞–∫–∫–∞—É–Ω—Ç. –ò—Å—Ç–æ—Ä–∏—è –¥–µ–π—Å—Ç–≤–∏–π —Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è. –û—Ç–º–µ–Ω–∏—Ç—å —ç—Ç–æ –±—É–¥–µ—Ç –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def process_delete_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ —É–¥–∞–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    query = update.callback_query
    await query.answer()
    user_id = int(query.data.split('_')[3])
    current_page = context.user_data.get('current_stats_page', 0)
    try:
        with get_db_connection() as conn:
            user_to_delete = db_data.get_user_by_id(conn, user_id)
            username = user_to_delete.get('username', f'ID: {user_id}')
            db_data.delete_user_by_admin(conn, user_id)
        
        admin_text = f"üóëÔ∏è –ê–¥–º–∏–Ω —É–¥–∞–ª–∏–ª (–∞–Ω–æ–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞–ª) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @{username}"
        tasks.notify_admin.delay(text=admin_text, category='admin_action')

        await query.edit_message_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω (–∞–Ω–æ–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω).")
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–Ω–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É"
        query.data = f"users_list_page_{current_page}"
        await show_users_list(update, context)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è admin'–æ–º: {e}", exc_info=True)
        tasks.notify_admin.delay(text=f"‚ùóÔ∏è **–û—à–∏–±–∫–∞ –≤ `admin_bot`**\n\n**–§—É–Ω–∫—Ü–∏—è:** `process_delete_confirmation`\n**–û—à–∏–±–∫–∞:** `{e}`")
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data=f"users_list_page_{current_page}")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {e}", reply_markup=reply_markup)

async def show_user_activity(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω—ã–π –ª–æ–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    query = update.callback_query
    await query.answer()

    parts = query.data.split('_')
    user_id = int(parts[2])
    page = int(parts[3])
    logs_per_page = 10

    try:
        with get_db_connection() as conn:
            logs, total_logs = db_data.get_user_activity(conn, user_id, limit=logs_per_page, offset=page * logs_per_page)
            user = db_data.get_user_by_id(conn, user_id)
            
        message_parts = [f"**üìú –ñ—É—Ä–Ω–∞–ª –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è `{user['username']}`** (–í—Å–µ–≥–æ: {total_logs}, –°—Ç—Ä. {page + 1})\n"]

        if logs:
            for log in logs:
                timestamp_str = log['timestamp'].strftime('%d.%m.%Y %H:%M')
                details = f"({log['details']})" if log['details'] else ""
                message_parts.append(f"`{timestamp_str}`: **{log['action']}** {details}")
        else:
            message_parts.append("  _–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ–± –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏._")

        nav_buttons = []
        if page > 0:
            nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"admin_activity_{user_id}_{page - 1}"))
        if (page + 1) * logs_per_page < total_logs:
            nav_buttons.append(InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"admin_activity_{user_id}_{page + 1}"))

        keyboard = []
        if nav_buttons:
            keyboard.append(nav_buttons)
        
        keyboard.append([InlineKeyboardButton("üë§ –ù–∞–∑–∞–¥ –∫ –∫–∞—Ä—Ç–æ—á–∫–µ", callback_data=f"admin_view_user_{user_id}")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("\n".join(message_parts), reply_markup=reply_markup, parse_mode='Markdown')

    except Exception as e:
        error_message = f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–æ–≥–æ–≤: {e}"
        logger.error(error_message, exc_info=True)
        tasks.notify_admin.delay(text=f"‚ùóÔ∏è **–û—à–∏–±–∫–∞ –≤ `admin_bot`**\n\n**–§—É–Ω–∫—Ü–∏—è:** `show_user_activity`\n**–û—à–∏–±–∫–∞:** `{e}`")
        await query.edit_message_text(error_message)

@rate_limit(seconds=2)
async def show_books_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–Ω–∏–≥."""
    query = update.callback_query
    page = 0
    books_per_page = 5

    if query:
        await query.answer()
        if "books_page_" in query.data:
            page = int(query.data.split('_')[2])
    
    context.user_data['current_books_page'] = page
    offset = page * books_per_page

    try:
        with get_db_connection() as conn:
            books, total_books = db_data.get_all_books_paginated(conn, limit=books_per_page, offset=offset)

        message_text = f"üìö **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–æ–º** (–í—Å–µ–≥–æ: {total_books})\n\n–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}:"
        keyboard = [
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∫–Ω–∏–≥—É", callback_data="admin_add_book_start")]
        ]
        for book in books:
            status_icon = "üî¥" if book['is_borrowed'] else "üü¢"
            button_text = f"{status_icon} {book['name']}"
            callback_data = f"admin_view_book_{book['id']}"
            keyboard.append([InlineKeyboardButton(button_text, callback_data=callback_data)])
        
        nav_buttons = []
        if page > 0:
            nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"books_page_{page - 1}"))
        if (page + 1) * books_per_page < total_books:
            nav_buttons.append(InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"books_page_{page + 1}"))
        
        if nav_buttons:
            keyboard.append(nav_buttons)

        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if query:
            await query.edit_message_text(message_text, reply_markup=reply_markup, parse_mode='Markdown')
        else:
            await update.message.reply_text(message_text, reply_markup=reply_markup, parse_mode='Markdown')

    except Exception as e:
        error_message = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–Ω–∏–≥: {e}"
        logger.error(error_message, exc_info=True)
        tasks.notify_admin.delay(text=f"‚ùóÔ∏è **–û—à–∏–±–∫–∞ –≤ `admin_bot`**\n\n**–§—É–Ω–∫—Ü–∏—è:** `show_books_list`\n**–û—à–∏–±–∫–∞:** `{e}`")
        if query:
            await query.edit_message_text(error_message)
        else:
            await update.message.reply_text(error_message)

def _build_book_details_content(conn, book_id, current_page=0):
    """–°—Ç—Ä–æ–∏—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ –∫–Ω–∏–≥–∏ (—Ç–µ–∫—Å—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É)."""
    book = db_data.get_book_details(conn, book_id)
    if not book:
        raise db_data.NotFoundError("–ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

    message_parts = [
        f"**üìñ –ö–∞—Ä—Ç–æ—á–∫–∞ –∫–Ω–∏–≥–∏: ¬´{book['name']}¬ª**",
        f"**–ê–≤—Ç–æ—Ä:** {book['author']}",
        f"**–ñ–∞–Ω—Ä:** {book['genre']}",
        f"**–û–ø–∏—Å–∞–Ω–∏–µ:** {book['description']}\n"
    ]
    if book['username']:
        borrow_date_str = book['borrow_date'].strftime('%d.%m.%Y')
        message_parts.append(f"üî¥ **–°—Ç–∞—Ç—É—Å:** –ó–∞–Ω—è—Ç–∞ (—É @{book['username']} —Å {borrow_date_str})")
    else:
        message_parts.append("üü¢ **–°—Ç–∞—Ç—É—Å:** –°–≤–æ–±–æ–¥–Ω–∞")

    message_text = "\n".join(message_parts)

    keyboard = [[InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"admin_edit_book_{book['id']}")]]
    if not book['username']:
        keyboard.append([InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"admin_delete_book_{book['id']}")])
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –∫–Ω–∏–≥", callback_data=f"books_page_{current_page}")])
    reply_markup = InlineKeyboardMarkup(keyboard)

    return {'text': message_text, 'reply_markup': reply_markup, 'cover_id': book.get('cover_image_id')}

async def show_book_details(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É –∫–Ω–∏–≥–∏."""
    query = update.callback_query
    await query.answer()
    book_id = int(query.data.split('_')[3])
    current_page = context.user_data.get('current_books_page', 0)

    try:
        with get_db_connection() as conn:
            content = _build_book_details_content(conn, book_id, current_page)

        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–µ–π
        if query.message.photo and not content.get('cover_id'):
             await query.message.delete()
        elif query.message.text and content.get('cover_id'):
             await query.message.delete()

        if content.get('cover_id'):
            if query.message.photo:
                 await query.edit_message_caption(caption=content['text'], reply_markup=content['reply_markup'], parse_mode='Markdown')
            else:
                await context.bot.send_photo(
                    chat_id=query.message.chat_id,
                    photo=content['cover_id'],
                    caption=content['text'],
                    reply_markup=content['reply_markup'],
                    parse_mode='Markdown'
                )
        else:
            await query.edit_message_text(text=content['text'], reply_markup=content['reply_markup'], parse_mode='Markdown')

    except db_data.NotFoundError:
        await query.edit_message_text("‚ùå –ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    except Exception as e:
        error_message = f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π –∫–Ω–∏–≥–∏: {e}"
        logger.error(error_message, exc_info=True)
        tasks.notify_admin.delay(text=f"‚ùóÔ∏è **–û—à–∏–±–∫–∞ –≤ `admin_bot`**\n\n**–§—É–Ω–∫—Ü–∏—è:** `show_book_details`\n**–û—à–∏–±–∫–∞:** `{e}`")
        await query.edit_message_text(error_message)
    
    return ConversationHandler.END # –Ø–≤–Ω—ã–π –≤—ã—Ö–æ–¥ –∏–∑ –¥–∏–∞–ª–æ–≥–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω –±—ã–ª –∞–∫—Ç–∏–≤–µ–Ω

async def start_book_edit(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –¥–∏–∞–ª–æ–≥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–Ω–∏–≥–∏, –ø–æ–∫–∞–∑—ã–≤–∞—è –ø–æ–ª—è –¥–ª—è –≤—ã–±–æ—Ä–∞."""
    query = update.callback_query
    await query.answer()
    book_id = int(query.data.split('_')[3])
    context.user_data['book_to_edit'] = book_id

    keyboard = [
        [InlineKeyboardButton("–ù–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"edit_field_name")],
        [InlineKeyboardButton("–ê–≤—Ç–æ—Ä", callback_data=f"edit_field_author")],
        [InlineKeyboardButton("–ñ–∞–Ω—Ä", callback_data=f"edit_field_genre")],
        [InlineKeyboardButton("–û–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"edit_field_description")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data=f"cancel_edit")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    message_text = "‚úèÔ∏è –ö–∞–∫–æ–µ –ø–æ–ª–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å?"
    if query.message.caption:
        await query.edit_message_caption(caption=message_text, reply_markup=reply_markup)
    else:
        await query.edit_message_text(text=message_text, reply_markup=reply_markup)
    
    return SELECTING_BOOK_FIELD

async def prompt_for_update(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—è."""
    query = update.callback_query
    await query.answer()
    
    field_to_edit = query.data.split('_')[2]
    context.user_data['field_to_edit'] = field_to_edit
    
    field_map = {'name': '–Ω–∞–∑–≤–∞–Ω–∏–µ', 'author': '–∞–≤—Ç–æ—Ä–∞', 'genre': '–∂–∞–Ω—Ä', 'description': '–æ–ø–∏—Å–∞–Ω–∏–µ'}
    
    keyboard = [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"cancel_edit")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    message_text = f"–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤–æ–µ **{field_map[field_to_edit]}** –¥–ª—è –∫–Ω–∏–≥–∏."
    if query.message.caption:
        await query.edit_message_caption(caption=message_text, reply_markup=reply_markup, parse_mode='Markdown')
    else:
        await query.edit_message_text(text=message_text, reply_markup=reply_markup, parse_mode='Markdown')
    
    return UPDATING_BOOK_FIELD

async def process_book_update(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–Ω–∏–≥–µ –≤ –ë–î –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É."""
    new_value = update.message.text
    book_id = context.user_data.get('book_to_edit')
    field = context.user_data.get('field_to_edit')
    current_page = context.user_data.get('current_books_page', 0)

    try:
        with get_db_connection() as conn:
            book_before_update = db_data.get_book_details(conn, book_id)
            book_name = book_before_update.get('name', f'ID: {book_id}')

            db_data.update_book_field(conn, book_id, field, new_value)
            content = _build_book_details_content(conn, book_id, current_page)

        admin_text = f"‚úèÔ∏è –ê–¥–º–∏–Ω –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–ª –ø–æ–ª–µ `{field}` –¥–ª—è –∫–Ω–∏–≥–∏ ¬´{book_name}¬ª."
        tasks.notify_admin.delay(text=admin_text, category='admin_action')

        await update.message.delete() # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º —Ç–µ–∫—Å—Ç–æ–º
        await update.message.reply_text("‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–Ω–∏–≥–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")

        if content.get('cover_id'):
            await context.bot.send_photo(
                chat_id=update.message.chat_id,
                photo=content['cover_id'],
                caption=content['text'],
                reply_markup=content['reply_markup'],
                parse_mode='Markdown'
            )
        else:
            await context.bot.send_message(
                chat_id=update.message.chat_id,
                text=content['text'],
                reply_markup=content['reply_markup'],
                parse_mode='Markdown'
            )

    except Exception as e:
        await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {e}")
        tasks.notify_admin.delay(text=f"‚ùóÔ∏è **–û—à–∏–±–∫–∞ –≤ `admin_bot`**\n\n**–§—É–Ω–∫—Ü–∏—è:** `process_book_update`\n**–û—à–∏–±–∫–∞:** `{e}`")
        
    finally:
        context.user_data.pop('book_to_edit', None)
        context.user_data.pop('field_to_edit', None)

    return ConversationHandler.END

async def cancel_edit_and_show_card(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω—è–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É –∫–Ω–∏–≥–∏."""
    query = update.callback_query
    await query.answer()
    book_id = context.user_data.get('book_to_edit')
    if book_id:
        query.data = f"admin_view_book_{book_id}"
        await show_book_details(update, context)
    else: # –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø—Ä–æ—Å—Ç–æ –æ—Ç–º–µ–Ω—è–µ–º
        await cancel(update, context)

    return ConversationHandler.END

async def ask_for_book_delete_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –∫–Ω–∏–≥–∏."""
    query = update.callback_query
    await query.answer()
    book_id = int(query.data.split('_')[3])

    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"admin_confirm_book_delete_{book_id}"),
            InlineKeyboardButton("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data=f"admin_view_book_{book_id}")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    message_text = "**‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∫–Ω–∏–≥—É?**\n\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ –∏ —É–¥–∞–ª–∏—Ç –≤—Å—é —Å–≤—è–∑–∞–Ω–Ω—É—é —Å –Ω–µ–π –∏—Å—Ç–æ—Ä–∏—é."
    if query.message.caption:
        await query.edit_message_caption(caption=message_text, reply_markup=reply_markup, parse_mode='Markdown')
    else:
        await query.edit_message_text(text=message_text, reply_markup=reply_markup, parse_mode='Markdown')

async def process_book_delete(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ –∫–Ω–∏–≥–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ —Å–ø–∏—Å–∫—É."""
    query = update.callback_query
    await query.answer()
    book_id = int(query.data.split('_')[4])
    current_page = context.user_data.get('current_books_page', 0)

    try:
        with get_db_connection() as conn:
            book_to_delete = db_data.get_book_details(conn, book_id)
            book_name = book_to_delete.get('name', f'ID: {book_id}')
            db_data.delete_book(conn, book_id)

        admin_text = f"üóëÔ∏è –ê–¥–º–∏–Ω —É–¥–∞–ª–∏–ª –∫–Ω–∏–≥—É ¬´{book_name}¬ª –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞."
        tasks.notify_admin.delay(text=admin_text, category='admin_action')
        
        # –°–Ω–∞—á–∞–ª–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –∑–∞—Ç–µ–º –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫
        if query.message.caption:
             await query.edit_message_caption(caption="‚úÖ –ö–Ω–∏–≥–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞.", reply_markup=None)
        else:
             await query.edit_message_text(text="‚úÖ –ö–Ω–∏–≥–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞.", reply_markup=None)

    except Exception as e:
        error_message = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–Ω–∏–≥–∏: {e}"
        tasks.notify_admin.delay(text=f"‚ùóÔ∏è **–û—à–∏–±–∫–∞ –≤ `admin_bot`**\n\n**–§—É–Ω–∫—Ü–∏—è:** `process_book_delete`\n**–û—à–∏–±–∫–∞:** `{e}`")
        if query.message.caption:
            await query.edit_message_caption(caption=error_message)
        else:
            await query.edit_message_text(text=error_message)

    # –ò–º–∏—Ç–∏—Ä—É–µ–º –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥", —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–Ω–∏–≥
    query.data = f"books_page_{current_page}"
    await show_books_list(update, context)

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–∏–≥–∏ ---
async def add_book_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    context.user_data['new_book'] = {}
    await query.edit_message_text(
        "**‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–Ω–∏–≥–∏**\n\n"
        "**–®–∞–≥ 1/5: –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏.**\n\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel."
    , parse_mode='Markdown')
    return GET_NAME

async def get_book_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['new_book']['name'] = update.message.text
    await update.message.reply_text("**–®–∞–≥ 2/5: –í–≤–µ–¥–∏—Ç–µ –∞–≤—Ç–æ—Ä–∞ –∫–Ω–∏–≥–∏.**", parse_mode='Markdown')
    return GET_AUTHOR

async def get_book_author(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['new_book']['author'] = update.message.text
    await update.message.reply_text("**–®–∞–≥ 3/5: –í–≤–µ–¥–∏—Ç–µ –∂–∞–Ω—Ä –∫–Ω–∏–≥–∏.**", parse_mode='Markdown')
    return GET_GENRE

async def get_book_genre(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['new_book']['genre'] = update.message.text
    await update.message.reply_text("**–®–∞–≥ 4/5: –í–≤–µ–¥–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–Ω–∏–≥–∏.**", parse_mode='Markdown')
    return GET_DESCRIPTION

async def get_book_description(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['new_book']['description'] = update.message.text
    await update.message.reply_text(
        "**–®–∞–≥ 5/5: –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –æ–±–ª–æ–∂–∫–∏.**\n\n"
        "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç —à–∞–≥, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–π —Ç–µ–∫—Å—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å')."
    , parse_mode='Markdown')
    return GET_COVER

async def get_book_cover(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['new_book']['cover_image_id'] = update.message.photo[-1].file_id
    await show_add_confirmation(update, context)
    return CONFIRM_ADD

async def skip_cover(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['new_book']['cover_image_id'] = None
    await update.message.reply_text("üëå –û–±–ª–æ–∂–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞.")
    await show_add_confirmation(update, context)
    return CONFIRM_ADD

async def show_add_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    book_data = context.user_data['new_book']
    message_parts = [
        "**üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º:**\n",
        f"**–ù–∞–∑–≤–∞–Ω–∏–µ:** {book_data['name']}",
        f"**–ê–≤—Ç–æ—Ä:** {book_data['author']}",
        f"**–ñ–∞–Ω—Ä:** {book_data['genre']}",
        f"**–û–ø–∏—Å–∞–Ω–∏–µ:** {book_data['description']}"
    ]
    message_text = "\n".join(message_parts)
    keyboard = [
        [InlineKeyboardButton("‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="add_book_save_simple")],
        [InlineKeyboardButton("üöÄ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ —É–≤–µ–¥–æ–º–∏—Ç—å –≤—Å–µ—Ö", callback_data="add_book_save_notify")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="add_book_cancel")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if book_data.get('cover_image_id'):
        # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å–æ—Ä—è—Ç—å —á–∞—Ç
        await update.message.delete()
        await context.bot.send_photo(
            chat_id=update.effective_chat.id,
            photo=book_data['cover_image_id'],
            caption=message_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    else:
        await update.message.reply_text(
            text=message_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

async def add_book_save(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    should_notify = "_notify" in query.data
    book_data = context.user_data.pop('new_book', None)

    try:
        with get_db_connection() as conn:
            new_book_id = db_data.add_new_book(conn, book_data)
        
        message_end = " –ó–∞–ø—É—Å–∫–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –æ –Ω–æ–≤–∏–Ω–∫–µ..." if should_notify else ""
        caption_text = f"‚úÖ –ù–æ–≤–∞—è –∫–Ω–∏–≥–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∫–∞—Ç–∞–ª–æ–≥!{message_end}"

        if query.message.caption:
            await query.edit_message_caption(caption=caption_text, reply_markup=None, parse_mode='Markdown')
        else:
            await query.edit_message_text(text=caption_text, reply_markup=None, parse_mode='Markdown')

        if should_notify:
            tasks.broadcast_new_book.delay(book_id=new_book_id)

    except Exception as e:
        error_message = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–Ω–∏–≥–∏: {e}"
        logger.error(error_message, exc_info=True)
        tasks.notify_admin.delay(text=f"‚ùóÔ∏è **–û—à–∏–±–∫–∞ –≤ `admin_bot`**\n\n**–§—É–Ω–∫—Ü–∏—è:** `add_book_save`\n**–û—à–∏–±–∫–∞:** `{e}`")
        await query.edit_message_text(error_message)
    
    return ConversationHandler.END

async def add_book_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω—è–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–∏–≥–∏."""
    query = update.callback_query
    await query.answer()
    context.user_data.pop('new_book', None)
    
    caption_text = "üëå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–∏–≥–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ."
    if query.message.caption:
        await query.edit_message_caption(caption=caption_text, reply_markup=None)
    else:
        await query.edit_message_text(text=caption_text, reply_markup=None)
        
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Å–ø–∏—Å–æ–∫ –∫–Ω–∏–≥
    await show_books_list(update, context)
    return ConversationHandler.END

# --------------------------
# --- –ì–õ–ê–í–ù–´–ô HANDLER ---
# --------------------------

def main() -> None:
    application = Application.builder().token(ADMIN_BOT_TOKEN).build()

    add_book_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(add_book_start, pattern="^admin_add_book_start$")],
        states={
            GET_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_book_name)],
            GET_AUTHOR: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_book_author)],
            GET_GENRE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_book_genre)],
            GET_DESCRIPTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_book_description)],
            GET_COVER: [
                MessageHandler(filters.PHOTO, get_book_cover),
                MessageHandler(filters.TEXT & ~filters.COMMAND, skip_cover)
            ],
            CONFIRM_ADD: [
                CallbackQueryHandler(add_book_save, pattern="^add_book_save_"), 
                CallbackQueryHandler(add_book_cancel, pattern="^add_book_cancel$")
            ]
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    edit_book_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(start_book_edit, pattern="^admin_edit_book_")],
        states={
            SELECTING_BOOK_FIELD: [
                CallbackQueryHandler(prompt_for_update, pattern="^edit_field_"),
                CallbackQueryHandler(cancel_edit_and_show_card, pattern="^cancel_edit$"),
            ],
            UPDATING_BOOK_FIELD: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, process_book_update),
                CallbackQueryHandler(cancel_edit_and_show_card, pattern="^cancel_edit$"),
            ],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )
    
    broadcast_handler = ConversationHandler(
        entry_points=[CommandHandler("broadcast", start_broadcast, filters=admin_filter)],
        states={
            BROADCAST_MESSAGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_broadcast)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("start", start, filters=admin_filter))
    application.add_handler(CommandHandler("stats", show_stats_panel, filters=admin_filter))
    application.add_handler(CommandHandler("books", show_books_list, filters=admin_filter))
    
    # –î–∏–∞–ª–æ–≥–∏
    application.add_handler(broadcast_handler)
    application.add_handler(add_book_handler)
    application.add_handler(edit_book_handler)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ CallbackQuery
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    application.add_handler(CallbackQueryHandler(show_stats_panel, pattern="^back_to_stats_panel$"))
    application.add_handler(CallbackQueryHandler(show_users_list, pattern="^users_list_page_"))
    application.add_handler(CallbackQueryHandler(view_user_profile, pattern="^admin_view_user_"))
    application.add_handler(CallbackQueryHandler(show_user_activity, pattern="^admin_activity_"))
    application.add_handler(CallbackQueryHandler(ask_for_delete_confirmation, pattern="^admin_delete_user_"))
    application.add_handler(CallbackQueryHandler(process_delete_confirmation, pattern="^admin_confirm_delete_"))
    
    # –ö–Ω–∏–≥–∏
    application.add_handler(CallbackQueryHandler(show_books_list, pattern="^books_page_"))
    application.add_handler(CallbackQueryHandler(show_book_details, pattern="^admin_view_book_"))
    application.add_handler(CallbackQueryHandler(ask_for_book_delete_confirmation, pattern="^admin_delete_book_"))
    application.add_handler(CallbackQueryHandler(process_book_delete, pattern="^admin_confirm_book_delete_"))

    logger.info("–ê–¥–º–∏–Ω-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    application.run_polling()

if __name__ == "__main__":
    main()