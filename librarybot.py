# -*- coding: utf-8 -*-
# librarybot.py - REVISED FOR BUTTON-ONLY NAVIGATION
import logging
import os
import random
import re
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    ConversationHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
)

# --- –ò–ú–ü–û–†–¢ –§–£–ù–ö–¶–ò–ô –ë–ê–ó–´ –î–ê–ù–ù–´–• –ò –•–ï–®–ò–†–û–í–ê–ù–ò–Ø ---
import db_data
from db_setup import hash_password
from tasks import send_telegram_message

# --- –ò–ú–ü–û–†–¢ –°–ï–†–í–ò–°–û–í –ò PYWHATKIT ---
# import pywhatkit as kit
from twilio.rest import Client
from sendgrid import SendGridAPIClient
from sendgrid.helpers.mail import Mail

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)
logger = logging.getLogger(__name__)

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ .env ---
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
ADMIN_TELEGRAM_ID = int(os.getenv("ADMIN_TELEGRAM_ID"))

# –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Twilio/SendGrid
account_sid = os.getenv("TWILIO_ACCOUNT_SID")
auth_token = os.getenv("TWILIO_AUTH_TOKEN")
TWILIO_VERIFY_SERVICE_SID = os.getenv("TWILIO_VERIFY_SERVICE_SID")
try:
    twilio_client = Client(account_sid, auth_token)
except Exception:
    logger.warning("Twilio client init failed. SMS verification might be disabled.")
    twilio_client = None

SENDGRID_API_KEY = os.getenv("SENDGRID_API_KEY")
FROM_EMAIL = os.getenv("FROM_EMAIL")

# --- –°–û–°–¢–û–Ø–ù–ò–Ø –î–ò–ê–õ–û–ì–ê ---
(
    START_ROUTES,
    REGISTER_NAME, REGISTER_DOB, REGISTER_CONTACT, REGISTER_VERIFY_CODE, REGISTER_STATUS, REGISTER_USERNAME, REGISTER_PASSWORD,
    LOGIN_CONTACT, LOGIN_PASSWORD,
    FORGOT_PASSWORD_CONTACT, FORGOT_PASSWORD_VERIFY_CODE, FORGOT_PASSWORD_SET_NEW,
    # –ù–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –º–µ–Ω—é
    USER_MENU, USER_BORROW_BOOK_NAME, USER_RETURN_BOOK, USER_RATE_BOOK_SELECT, USER_RATE_BOOK_RATING,
    # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏–∏
    USER_RESERVE_BOOK_CONFIRM,
    # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
    USER_VIEW_HISTORY
) = range(20)


# --------------------------
# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ ---
# --------------------------

def normalize_phone_number(contact: str) -> str:
    """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç —Ä–æ—Å—Å–∏–π—Å–∫–∏–π/–∫–∞–∑–∞—Ö—Å—Ç–∞–Ω—Å–∫–∏–π –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç E.164 (+7XXXXXXXXXX)."""
    clean_digits = re.sub(r'\D', '', contact)

    if clean_digits.startswith('8') and len(clean_digits) == 11:
        return '+7' + clean_digits[1:]
    if clean_digits.startswith('7') and len(clean_digits) == 11:
        return '+' + clean_digits
    if re.match(r"^\+\d{1,14}$", contact):
        return contact

    return contact


def send_whatsapp_code(contact: str, code: str):
    """
    –û–¢–ü–†–ê–í–õ–Ø–ï–¢ –∫–æ–¥ —á–µ—Ä–µ–∑ pywhatkit (WhatsApp).
    –¢–†–ï–ë–£–ï–¢: –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ WhatsApp Desktop –∏ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏.
    """
    # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞, —Ç–∞–∫ –∫–∞–∫ pywhatkit –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ Docker.
    logger.warning("–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ WhatsApp/pywhatkit (–æ—Ç–∫–ª—é—á–µ–Ω–æ –≤ Docker).")
    return False


async def send_local_code_telegram(code: str, context: ContextTypes.DEFAULT_TYPE, telegram_id: int) -> bool:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥ –≤ Telegram."""
    try:
        message_body = f"–í–∞—à –∫–æ–¥ –¥–ª—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∏: {code}"
        await context.bot.send_message(chat_id=telegram_id, text=message_body)
        context.user_data['verification_method'] = 'telegram'
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}: {e}")
        return False


async def send_verification_message(contact_info: str, code: str, context: ContextTypes.DEFAULT_TYPE, telegram_id: int):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: Email (SendGrid), –¢–µ–ª–µ—Ñ–æ–Ω (Pywhatkit), Telegram (Fallback).
    """

    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ email (SendGrid)
    if re.match(r"^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$", contact_info):
        if not SENDGRID_API_KEY:
            logger.error("API –∫–ª—é—á –¥–ª—è SendGrid –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. Email –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.")
            return False
        try:
            message_body = f"–í–∞—à –∫–æ–¥ –¥–ª—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∏: {code}"
            message = Mail(
                from_email=FROM_EMAIL, to_emails=contact_info,
                subject='–ö–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∏',
                html_content=f'<strong>{message_body}</strong>'
            )
            sg = SendGridAPIClient(SENDGRID_API_KEY)
            sg.send(message)
            context.user_data['verification_method'] = 'email'
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ email: {e}")
            return False

    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (Pywhatkit)
    if re.match(r"^\+\d{1,14}$", contact_info):
        if send_whatsapp_code(contact_info, code):
            context.user_data['verification_method'] = 'pywhatkit'
            return True
        return False

    # 3. Fallback: Telegram (–¥–ª—è username/ID)
    return await send_local_code_telegram(code, context, telegram_id)

# --------------------------
# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–∏–∞–ª–æ–≥–æ–≤ ---
# --------------------------

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π."""
    context.user_data.clear()

    keyboard = [
        [InlineKeyboardButton("–í–æ–π—Ç–∏", callback_data="login")],
        [InlineKeyboardButton("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", callback_data="register")],
        [InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel_start")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    chat_id = update.effective_chat.id

    if update.callback_query:
        await update.callback_query.edit_message_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É! üìö", reply_markup=reply_markup)
    else:
        await context.bot.send_message(chat_id=chat_id, text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É! üìö", reply_markup=reply_markup)

    return START_ROUTES

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ –º–µ–Ω—é."""
    text = "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ."
    context.user_data.clear()

    if update.message:
        await update.message.reply_text(text)
    elif update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.edit_message_text(text)

    return await start(update, context)

def get_back_button(current_state_const: int) -> list:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–Ω–æ–ø–∫—É '–û—Ç–º–µ–Ω–∞', –∏—Å–ø–æ–ª—å–∑—É—è –∏–º—è –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è."""
    state_name = [name for name, val in globals().items() if val == current_state_const and name.isupper() and '_' in name][0]
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º '–ù–∞–∑–∞–¥', —á—Ç–æ–±—ã —è–≤–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å, —á—Ç–æ —ç—Ç–æ –≤–æ–∑–≤—Ä–∞—Ç
    return [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"back_{state_name}")]

# --- –§—É–Ω–∫—Ü–∏–∏ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ ---

async def start_registration(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ / re-asks name."""
    # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –≤—Ö–æ–¥, —á–∏—Å—Ç–∏–º –¥–∞–Ω–Ω—ã–µ
    if update.callback_query and update.callback_query.data == 'register':
        query = update.callback_query
        await query.answer()
        context.user_data.clear()
        context.user_data['registration'] = {}
        target_update = query
    elif update.callback_query:
        query = update.callback_query
        await query.answer()
        target_update = query
    else:
        target_update = update.message

    reply_markup = InlineKeyboardMarkup([get_back_button(START_ROUTES)])

    if isinstance(target_update, Update):
        await target_update.effective_message.edit_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ **–§–ò–û** (–ø–æ–ª–Ω–æ—Å—Ç—å—é, –Ω–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á):", reply_markup=reply_markup, parse_mode='Markdown')
    else:
        await target_update.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ **–§–ò–û** (–ø–æ–ª–Ω–æ—Å—Ç—å—é, –Ω–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á):", reply_markup=reply_markup, parse_mode='Markdown')

    return REGISTER_NAME

async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç –§–ò–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    context.user_data['registration']['full_name'] = update.message.text
    reply_markup = InlineKeyboardMarkup([get_back_button(REGISTER_NAME)])
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ **–¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è** (–î–î.–ú–ú.–ì–ì–ì–ì):", reply_markup=reply_markup, parse_mode='Markdown')
    return REGISTER_DOB


async def get_dob(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è."""
    dob = update.message.text
    if not re.match(r"^\d{2}\.\d{2}\.\d{4}$", dob):
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç **–î–î.–ú–ú.–ì–ì–ì–ì**.")
        return REGISTER_DOB

    context.user_data['registration']['dob'] = dob
    reply_markup = InlineKeyboardMarkup([get_back_button(REGISTER_DOB)])
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à **–∫–æ–Ω—Ç–∞–∫—Ç** (email, —Ç–µ–ª–µ—Ñ–æ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7... –∏–ª–∏ username):", reply_markup=reply_markup, parse_mode='Markdown')
    return REGISTER_CONTACT


async def get_contact(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–¥."""
    contact_input = update.message.text
    user_id = update.effective_user.id

    # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
    contact_processed = normalize_phone_number(contact_input)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
    try:
        if db_data.get_user_by_login(contact_processed):
            await update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–æ–π—Ç–∏ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –∫–æ–Ω—Ç–∞–∫—Ç.")
            return REGISTER_CONTACT
    except db_data.NotFoundError:
        pass # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤—Å—ë —Ö–æ—Ä–æ—à–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é

    context.user_data['registration']['contact_info'] = contact_processed

    code = str(random.randint(100000, 999999))
    context.user_data['verification_code'] = code

    sent = await send_verification_message(contact_processed, code, context, user_id)

    reply_markup = InlineKeyboardMarkup([get_back_button(REGISTER_CONTACT)])
    if sent:
        await update.message.reply_text(f"–ù–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –≤–∞–º–∏ –∫–æ–Ω—Ç–∞–∫—Ç ({contact_processed}) –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω **–∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏**. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ:", reply_markup=reply_markup, parse_mode='Markdown')
        return REGISTER_VERIFY_CODE
    else:
        await update.message.reply_text(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± (email, username).",
            reply_markup=reply_markup
        )
        return REGISTER_CONTACT


async def verify_registration_code(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏."""
    input_code = update.message.text
    is_verified = False

    if input_code == context.user_data.get('verification_code'):
        is_verified = True

    if is_verified:
        keyboard = [
            [InlineKeyboardButton("–°—Ç—É–¥–µ–Ω—Ç", callback_data="—Å—Ç—É–¥–µ–Ω—Ç"), InlineKeyboardButton("–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å", callback_data="—É—á–∏—Ç–µ–ª—å")],
            get_back_button(REGISTER_VERIFY_CODE)
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("–ö–æ–¥ –≤–µ—Ä–Ω—ã–π! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Å—Ç–∞—Ç—É—Å:", reply_markup=reply_markup)

        context.user_data.pop('verification_code', None)
        context.user_data.pop('verification_method', None)

        return REGISTER_STATUS
    else:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return REGISTER_VERIFY_CODE


async def get_status(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∏ –ø—Ä–æ—Å–∏—Ç –≤–≤–µ—Å—Ç–∏ —é–∑–µ—Ä–Ω–µ–π–º."""
    query = update.callback_query
    await query.answer()
    context.user_data['registration']['status'] = query.data

    reply_markup = InlineKeyboardMarkup([get_back_button(REGISTER_STATUS)])
    await query.edit_message_text(
        "–ü—Ä–∏–¥—É–º–∞–π—Ç–µ **—é–∑–µ—Ä–Ω–µ–π–º** (–Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º, –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤, –Ω–∞–ø—Ä–∏–º–µ—Ä: `ivanov21`):",
        reply_markup=reply_markup, parse_mode='Markdown'
    )
    return REGISTER_USERNAME

async def get_username(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç —é–∑–µ—Ä–Ω–µ–π–º, –∑–∞—Ç–µ–º –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–∞—Ä–æ–ª—å."""
    username = update.message.text
    # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ _
    if not re.match(r"^[a-zA-Z0-9_]{3,}$", username):
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –Æ–∑–µ—Ä–Ω–µ–π–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –∫–æ—Ä–æ—á–µ 3 —Å–∏–º–≤–æ–ª–æ–≤ –∏ —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö –±—É–∫–≤, —Ü–∏—Ñ—Ä –∏ –∑–Ω–∞–∫–∞ '_'. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
        return REGISTER_USERNAME

    context.user_data['registration']['username'] = username
    reply_markup = InlineKeyboardMarkup([get_back_button(REGISTER_USERNAME)])
    await update.message.reply_text("–°–æ–∑–¥–∞–π—Ç–µ **–ø–∞—Ä–æ–ª—å** –¥–ª—è –≤—Ö–æ–¥–∞ (–º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤):", reply_markup=reply_markup, parse_mode='Markdown')
    return REGISTER_PASSWORD

async def get_password(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–∞—Ä–æ–ª—å –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é."""
    new_password = update.message.text

    if not re.match(r"^(?=.*[A-Za-z])(?=.*\d|.*[!@#$%^&*()_+])[A-Za-z\d!@#$%^&*()_+]{8,}$", new_password):
        await update.message.reply_text("‚ùå –ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤, –≤–∫–ª—é—á–∞—è –±—É–∫–≤—ã –∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ü–∏—Ñ—Ä—É –∏–ª–∏ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return REGISTER_PASSWORD

    user_info = update.message.from_user
    context.user_data['registration']['password'] = new_password
    context.user_data['registration']['telegram_id'] = user_info.id
    context.user_data['registration']['telegram_username'] = user_info.username if user_info.username else None

    try:
        user_id = db_data.add_user(context.user_data['registration'])
        await update.message.reply_text("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏, –∏—Å–ø–æ–ª—å–∑—É—è /start.")
    except db_data.UserExistsError:
         await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –í–æ–∑–º–æ–∂–Ω–æ, –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è/–∫–æ–Ω—Ç–∞–∫—Ç —É–∂–µ –∑–∞–Ω—è—Ç—ã.")
    except Exception as e:
        logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ —Å–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")

    context.user_data.clear()
    return await start(update, context)


# --- –§—É–Ω–∫—Ü–∏–∏ –í—Ö–æ–¥–∞ ---

async def start_login(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –≤—Ö–æ–¥–∞ / re-asks contact."""
    query = update.callback_query
    await query.answer()

    keyboard = [
        [InlineKeyboardButton("–ó–∞–±—ã–ª–∏ –ø–∞—Ä–æ–ª—å?", callback_data="forgot_password")],
        get_back_button(START_ROUTES)
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à **–∫–æ–Ω—Ç–∞–∫—Ç** (email, —Ç–µ–ª–µ—Ñ–æ–Ω, username) –¥–ª—è –≤—Ö–æ–¥–∞:",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    return LOGIN_CONTACT

async def get_login_contact(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è –≤—Ö–æ–¥–∞, –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –µ–≥–æ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    contact_input = update.message.text
    contact_processed = normalize_phone_number(contact_input)

    try:
        user = db_data.get_user_by_login(contact_processed)
        context.user_data['login_user'] = user
        keyboard = [get_back_button(LOGIN_CONTACT)]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à **–ø–∞—Ä–æ–ª—å**:", reply_markup=reply_markup, parse_mode='Markdown')
        return LOGIN_PASSWORD
    except db_data.NotFoundError:
        await update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        return LOGIN_CONTACT


async def check_login_password(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user = context.user_data['login_user']
    stored_hash = user['password_hash']
    full_name = user['full_name']
    input_password = update.message.text

    if hash_password(input_password) == stored_hash:
        await update.message.reply_text(f"üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {full_name}!")
        context.user_data['current_user'] = user
        context.user_data.pop('login_user')
        return await user_menu(update, context)
    else:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return LOGIN_PASSWORD


# --- –§—É–Ω–∫—Ü–∏–∏ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ü–∞—Ä–æ–ª—è ---

async def start_forgot_password(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è / re-asks contact."""
    query = update.callback_query
    await query.answer()

    keyboard = [get_back_button(LOGIN_CONTACT)]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à **–∫–æ–Ω—Ç–∞–∫—Ç** (email, —Ç–µ–ª–µ—Ñ–æ–Ω, username) –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è:", reply_markup=reply_markup, parse_mode='Markdown')
    return FORGOT_PASSWORD_CONTACT


async def get_forgot_password_contact(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—Ö–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ö–û–î –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–®–∞–≥ 1)."""
    contact_input = update.message.text
    user_id = update.effective_user.id
    contact_processed = normalize_phone_number(contact_input)

    try:
        user = db_data.get_user_by_login(contact_processed)
    except db_data.NotFoundError:
        await update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞–∂–º–∏—Ç–µ '–ù–∞–∑–∞–¥' —á—Ç–æ–±—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞.")
        return FORGOT_PASSWORD_CONTACT

    contact_to_verify = user['contact_info']
    user_telegram_id = user['telegram_id'] if user['telegram_id'] else user_id

    code = str(random.randint(100000, 999999))
    context.user_data['forgot_password_code'] = code
    context.user_data['forgot_password_contact'] = contact_to_verify

    sent = await send_verification_message(contact_to_verify, code, context, user_telegram_id)

    keyboard = [get_back_button(FORGOT_PASSWORD_CONTACT)]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if sent:
        await update.message.reply_text(f"–ö–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç ({contact_to_verify}). –í–≤–µ–¥–∏—Ç–µ –µ–≥–æ:", reply_markup=reply_markup)
        return FORGOT_PASSWORD_VERIFY_CODE
    else:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏. –ù–∞–∂–º–∏—Ç–µ '–ù–∞–∑–∞–¥' –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∫–æ–Ω—Ç–∞–∫—Ç.")
        return FORGOT_PASSWORD_CONTACT


async def verify_forgot_password_code(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–¥ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è (–®–∞–≥ 2)."""
    input_code = update.message.text

    if input_code == context.user_data.get('forgot_password_code'):
        keyboard = [get_back_button(FORGOT_PASSWORD_VERIFY_CODE)]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("–ö–æ–¥ –≤–µ—Ä–Ω—ã–π! –í–≤–µ–¥–∏—Ç–µ **–Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å** (–º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤, –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã/—Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã):", reply_markup=reply_markup, parse_mode='Markdown')
        context.user_data.pop('forgot_password_code', None)
        return FORGOT_PASSWORD_SET_NEW
    else:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return FORGOT_PASSWORD_VERIFY_CODE

async def set_new_password(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø–∞—Ä–æ–ª—å –≤ –ë–î (–®–∞–≥ 3)."""
    new_password = update.message.text

    if not re.match(r"^(?=.*[A-Za-z])(?=.*\d|.*[!@#$%^&*()_+])[A-Za-z\d!@#$%^&*()_+]{8,}$", new_password):
        await update.message.reply_text("‚ùå –ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤, –≤–∫–ª—é—á–∞—è –±—É–∫–≤—ã –∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ü–∏—Ñ—Ä—É –∏–ª–∏ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª.")
        return FORGOT_PASSWORD_SET_NEW

    login_query = context.user_data['forgot_password_contact']

    try:
        db_data.update_user_password(login_query, new_password)
        await update.message.reply_text("üéâ –ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏, –∏—Å–ø–æ–ª—å–∑—É—è /start.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–∞—Ä–æ–ª—è —á–µ—Ä–µ–∑ db_data: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–∞—Ä–æ–ª—è. –ù–∞–∂–º–∏—Ç–µ '–ù–∞–∑–∞–¥', —á—Ç–æ–±—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –≤–≤–µ—Å—Ç–∏ –µ–≥–æ —Å–Ω–æ–≤–∞.")
        return FORGOT_PASSWORD_SET_NEW

    context.user_data.clear()
    return await start(update, context)


# --- –§—É–Ω–∫—Ü–∏–∏ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –ú–µ–Ω—é ---

def get_user_borrow_limit(status):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ª–∏–º–∏—Ç –Ω–∞ –∑–∞–∏–º—Å—Ç–≤–æ–≤–∞–Ω–∏–µ."""
    return {'—Å—Ç—É–¥–µ–Ω—Ç': 3, '—É—á–∏—Ç–µ–ª—å': 5}.get(status.lower(), 0)

async def user_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user = context.user_data.get('current_user')

    if not user:
        return await start(update, context)

    borrowed_books = db_data.get_borrowed_books(user['id'])
    borrow_limit = get_user_borrow_limit(user['status'])

    message_text = (
        f"**–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç: {user['full_name']} ({user['status'].capitalize()})**\n"
        f"üìö –í–∑—è—Ç–æ –∫–Ω–∏–≥: {len(borrowed_books)}/{borrow_limit}"
    )

    keyboard = [
        [InlineKeyboardButton("–í–∑—è—Ç—å –∫–Ω–∏–≥—É", callback_data="user_borrow"), InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å –∫–Ω–∏–≥—É", callback_data="user_return")],
        [InlineKeyboardButton("–û—Ü–µ–Ω–∏—Ç—å –∫–Ω–∏–≥—É", callback_data="user_rate"), InlineKeyboardButton("–ü—Ä–æ—Ñ–∏–ª—å", callback_data="user_profile")],
        [InlineKeyboardButton("–ò—Å—Ç–æ—Ä–∏—è", callback_data="user_history"), InlineKeyboardButton("–í—ã–π—Ç–∏", callback_data="logout")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.callback_query:
        await update.callback_query.edit_message_text(message_text, reply_markup=reply_markup, parse_mode='Markdown')
    else:
        await update.message.reply_text(message_text, reply_markup=reply_markup, parse_mode='Markdown')

    return USER_MENU

async def logout(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í—ã—Ö–æ–¥ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞."""
    query = update.callback_query
    await query.answer()

    user = context.user_data.get('current_user')
    borrowed_books = db_data.get_borrowed_books(user['id'])

    if borrowed_books:
        keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="user_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ã–π—Ç–∏, –ø–æ–∫–∞ –Ω–µ –≤–µ—Ä–Ω–µ—Ç–µ –≤—Å–µ –≤–∑—è—Ç—ã–µ –∫–Ω–∏–≥–∏!", reply_markup=reply_markup)
        return USER_MENU
    else:
        context.user_data.clear()
        await query.edit_message_text("–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞. –í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –≤—Ö–æ–¥–∞.")
        return START_ROUTES

# --- –§—É–Ω–∫—Ü–∏–∏ –í–∑—è—Ç–∏—è/–í–æ–∑–≤—Ä–∞—Ç–∞/–û—Ü–µ–Ω–∫–∏ ---

async def start_borrow_book(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –≤–∑—è—Ç–∏—è –∫–Ω–∏–≥–∏."""
    query = update.callback_query
    await query.answer()

    user = context.user_data.get('current_user')
    borrowed_books = db_data.get_borrowed_books(user['id'])
    borrow_limit = get_user_borrow_limit(user['status'])

    if len(borrowed_books) >= borrow_limit:
        keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="user_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(f"–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ ({borrow_limit}) –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∏–º—Å—Ç–≤–æ–≤–∞–Ω–Ω—ã—Ö –∫–Ω–∏–≥.", reply_markup=reply_markup)
        return USER_MENU

    keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="user_menu")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ **–Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏**, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –≤–∑—è—Ç—å:", reply_markup=reply_markup, parse_mode='Markdown')
    return USER_BORROW_BOOK_NAME

async def process_borrow_book(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–∑—è—Ç–∏–µ –∫–Ω–∏–≥–∏ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏—é, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏."""
    book_name = update.message.text
    user_id = context.user_data['current_user']['id']

    try:
        found_book = db_data.get_book_by_name(book_name)
    except db_data.NotFoundError:
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="user_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            f"–ö–Ω–∏–≥–∞ '{book_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é.",
            reply_markup=reply_markup
        )
        return USER_BORROW_BOOK_NAME

    if found_book['available_quantity'] <= 0:
        context.user_data['book_to_reserve'] = found_book
        keyboard = [
            [InlineKeyboardButton("–î–∞, —É–≤–µ–¥–æ–º–∏—Ç—å –º–µ–Ω—è", callback_data="reserve_yes")],
            [InlineKeyboardButton("–ù–µ—Ç, —Å–ø–∞—Å–∏–±–æ", callback_data="reserve_no")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            f"–ö–Ω–∏–≥–∞ '{found_book['name']}' –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –•–æ—Ç–∏—Ç–µ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞—Ç—å –µ–µ –∏ –ø–æ–ª—É—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏?",
            reply_markup=reply_markup
        )
        return USER_RESERVE_BOOK_CONFIRM

    try:
        db_data.borrow_book(user_id, found_book['id'])
        await update.message.reply_text(f"‚úÖ –ö–Ω–∏–≥–∞ '{found_book['name']}' —É—Å–ø–µ—à–Ω–æ –≤–∑—è—Ç–∞.")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–∑—è—Ç—å –∫–Ω–∏–≥—É: {e}")

    return await user_menu(update, context)


async def process_reservation_decision(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ—à–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–Ω–∏–≥–∏."""
    query = update.callback_query
    await query.answer()

    decision = query.data
    book_to_reserve = context.user_data.get('book_to_reserve')
    user_id = context.user_data['current_user']['id']

    if not book_to_reserve:
        await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return await user_menu(update, context)

    if decision == 'reserve_yes':
        result = db_data.add_reservation(user_id, book_to_reserve['id'])
        await query.edit_message_text(f"‚úÖ {result}")
    else:
        await query.edit_message_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

    context.user_data.pop('book_to_reserve', None)
    return await user_menu(update, context)

async def start_return_book(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫–Ω–∏–≥–∏."""
    query = update.callback_query
    await query.answer()

    user_id = context.user_data['current_user']['id']
    borrowed_books = db_data.get_borrowed_books(user_id)

    if not borrowed_books:
        keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="user_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –≤–∑—è—Ç—ã—Ö –∫–Ω–∏–≥.", reply_markup=reply_markup)
        return USER_MENU

    message_text = "–í–∞—à–∏ –≤–∑—è—Ç—ã–µ –∫–Ω–∏–≥–∏. –í—ã–±–µ—Ä–∏—Ç–µ —Ç—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –≤–µ—Ä–Ω—É—Ç—å:"
    keyboard = []
    context.user_data['borrowed_map'] = {}

    for i, borrowed in enumerate(borrowed_books):
        borrow_id = f"return_{i}"
        keyboard.append([InlineKeyboardButton(f"{i+1}. {borrowed['book_name']} (–≤–∑—è—Ç–∞: {borrowed['borrow_date'].strftime('%d.%m.%Y')})", callback_data=borrow_id)])
        context.user_data['borrowed_map'][borrow_id] = {'borrow_id': borrowed['borrow_id'], 'book_id': borrowed['book_id'], 'book_name': borrowed['book_name']}

    keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="user_menu")])
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(message_text, reply_markup=reply_markup)
    return USER_RETURN_BOOK

async def process_return_book(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–æ–∑–≤—Ä–∞—Ç –∫–Ω–∏–≥–∏ –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–≤—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    query = update.callback_query
    await query.answer()

    callback_data = query.data
    borrowed_info = context.user_data['borrowed_map'].get(callback_data)
    book_id = borrowed_info['book_id']
    book_name = borrowed_info['book_name']

    if not borrowed_info:
        await query.edit_message_text("–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –∫–Ω–∏–≥–∏.")
        return await user_menu(update, context)

    try:
        db_data.return_book(borrowed_info['borrow_id'], book_id)
        await query.edit_message_text(f"‚úÖ –ö–Ω–∏–≥–∞ '{book_name}' —É—Å–ø–µ—à–Ω–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞.")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏–∏ –Ω–∞ —ç—Ç—É –∫–Ω–∏–≥—É
        reservations = db_data.get_reservations_for_book(book_id)
        if reservations:
            user_to_notify_id = reservations[0] # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–µ—Ä–≤–æ–≥–æ –≤ –æ—á–µ—Ä–µ–¥–∏
            notification_text = f"üéâ –•–æ—Ä–æ—à–∏–µ –Ω–æ–≤–æ—Å—Ç–∏! –ö–Ω–∏–≥–∞ '{book_name}', –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–ª–∏, —Å–Ω–æ–≤–∞ –≤ –Ω–∞–ª–∏—á–∏–∏. –í—ã –º–æ–∂–µ—Ç–µ –≤–∑—è—Ç—å –µ–µ —Å–µ–π—á–∞—Å."

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Celery
            send_telegram_message.delay(user_to_notify_id, notification_text)

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è, —á—Ç–æ–±—ã –Ω–µ —É–≤–µ–¥–æ–º–ª—è—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ
            db_data.update_reservation_status(user_to_notify_id, book_id, notified=True)
    except Exception as e:
        await query.edit_message_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–µ—Ä–Ω—É—Ç—å –∫–Ω–∏–≥—É: {e}")

    context.user_data.pop('borrowed_map', None)
    return await user_menu(update, context)


async def view_profile(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –∏ —Å–ø–∏—Å–æ–∫ –≤–∑—è—Ç—ã—Ö –∫–Ω–∏–≥."""
    query = update.callback_query
    await query.answer()

    user_id = context.user_data['current_user']['id']
    user_profile = db_data.get_user_profile(user_id)
    borrowed_books = db_data.get_borrowed_books(user_id)
    borrow_limit = get_user_borrow_limit(user_profile['status'])

    message_parts = [
        "**üìö –í–∞—à –õ–∏—á–Ω—ã–π –ö–∞–±–∏–Ω–µ—Ç üìö**",
        f"–§–ò–û: {user_profile['full_name']}",
        f"–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @{user_profile['telegram_username']}" if user_profile['telegram_username'] else "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –ù/–î",
        f"–°—Ç–∞—Ç—É—Å: {user_profile['status'].capitalize()}",
        f"–ö–æ–Ω—Ç–∞–∫—Ç: {user_profile['contact_info']}",
        f"–õ–∏–º–∏—Ç –∫–Ω–∏–≥: {borrow_limit}",
        f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user_profile['registration_date'].strftime('%Y-%m-%d')}\n",
        f"**–í–∑—è—Ç—ã–µ –∫–Ω–∏–≥–∏ ({len(borrowed_books)}):**"
    ]

    if borrowed_books:
        for borrowed in borrowed_books:
            message_parts.append(f"- {borrowed['book_name']} (–∞–≤—Ç–æ—Ä: {borrowed['author_name']})")
    else:
        message_parts.append("–£ –≤–∞—Å –Ω–µ—Ç –≤–∑—è—Ç—ã—Ö –∫–Ω–∏–≥.")

    keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="user_menu")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text("\n".join(message_parts), reply_markup=reply_markup, parse_mode='Markdown')
    return USER_MENU


async def view_borrow_history(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –≤–∑—è—Ç—ã—Ö –∫–Ω–∏–≥."""
    query = update.callback_query
    await query.answer()

    user_id = context.user_data['current_user']['id']
    history = db_data.get_user_borrow_history(user_id)

    message_parts = ["**üìú –í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –≤–∑—è—Ç—ã—Ö –∫–Ω–∏–≥ üìú**\n"]

    if history:
        for item in history:
            return_date_str = item['return_date'].strftime('%d.%m.%Y') if item['return_date'] else "–Ω–µ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞"
            borrow_date_str = item['borrow_date'].strftime('%d.%m.%Y')
            message_parts.append(f"- **{item['book_name']}** (–≤–∑—è—Ç–∞: {borrow_date_str}, –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞: {return_date_str})")
    else:
        message_parts.append("–í—ã –µ—â–µ –Ω–µ –±—Ä–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π –∫–Ω–∏–≥–∏.")

    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="user_menu")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text("\n".join(message_parts), reply_markup=reply_markup, parse_mode='Markdown')
    return USER_MENU


async def start_rate_book(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í—ã–±–æ—Ä –∫–Ω–∏–≥–∏ –¥–ª—è –æ—Ü–µ–Ω–∫–∏."""
    query = update.callback_query
    await query.answer()

    user_id = context.user_data['current_user']['id']
    history = db_data.get_user_borrow_history(user_id) # –û—Ü–µ–Ω–∏–≤–∞—Ç—å –º–æ–∂–Ω–æ –ª—é–±—É—é –∫–Ω–∏–≥—É –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏

    if not history:
        keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="user_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("–í—ã –º–æ–∂–µ—Ç–µ –æ—Ü–µ–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ –∫–Ω–∏–≥–∏, –∫–æ—Ç–æ—Ä—ã–µ –∫–æ–≥–¥–∞-–ª–∏–±–æ –±—Ä–∞–ª–∏.", reply_markup=reply_markup)
        return USER_MENU

    message_text = "–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–∏–≥—É –∏–∑ –≤–∞—à–µ–π –∏—Å—Ç–æ—Ä–∏–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –æ—Ü–µ–Ω–∏—Ç—å:"
    keyboard = []
    context.user_data['rating_map'] = {}

    # –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–Ω–∏–≥–∏ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
    unique_books = {item['book_name']: item for item in history}.values()

    for i, book in enumerate(unique_books):
        rate_id = f"rate_{i}"
        keyboard.append([InlineKeyboardButton(f"{i+1}. {book['book_name']}", callback_data=rate_id)])
        context.user_data['rating_map'][rate_id] = {'book_id': book['book_id'], 'book_name': book['book_name']}

    keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="user_menu")])
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(message_text, reply_markup=reply_markup)
    return USER_RATE_BOOK_SELECT

async def select_rating(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–Ω–∏–≥—É –∏ –ø—Ä–æ—Å–∏—Ç –≤–≤–µ—Å—Ç–∏ –æ—Ü–µ–Ω–∫—É."""
    query = update.callback_query
    await query.answer()

    callback_data = query.data
    book_info = context.user_data['rating_map'].get(callback_data)

    if not book_info:
        await query.edit_message_text("–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –∫–Ω–∏–≥–∏.")
        return await user_menu(update, context)

    context.user_data['book_to_rate'] = book_info

    message_text = f"–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –æ—Ü–µ–Ω–∫—É –¥–ª—è –∫–Ω–∏–≥–∏ **'{book_info['book_name']}'** –æ—Ç 1 –¥–æ 5:"

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤—ã–±–æ—Ä–∞ –æ—Ü–µ–Ω–∫–∏
    rating_buttons = [
        [InlineKeyboardButton("1", callback_data="rating_1"), InlineKeyboardButton("2", callback_data="rating_2"), InlineKeyboardButton("3", callback_data="rating_3"), InlineKeyboardButton("4", callback_data="rating_4"), InlineKeyboardButton("5", callback_data="rating_5")],
        [InlineKeyboardButton("–ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –∫–Ω–∏–≥–∏", callback_data="user_rate")] # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –∫–Ω–∏–≥–∏
    ]
    reply_markup = InlineKeyboardMarkup(rating_buttons)

    await query.edit_message_text(message_text, reply_markup=reply_markup, parse_mode='Markdown')
    return USER_RATE_BOOK_RATING

async def process_rating(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ü–µ–Ω–∫—É –≤ –ë–î."""

    if update.callback_query:
        query = update.callback_query
        await query.answer()
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ü–µ–Ω–∫—É –∏–∑ callback_data (e.g., "rating_4")
            rating = int(query.data.split('_')[1])
        except (ValueError, IndexError):
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –æ—Ü–µ–Ω–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return USER_RATE_BOOK_RATING
        target_update = query
    elif update.message:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª —Ç–µ–∫—Å—Ç (—á—Ç–æ –º—ã —Å—Ç–∞—Ä–∞–µ–º—Å—è –∏–∑–±–µ–≥–∞—Ç—å, –Ω–æ –Ω—É–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å)
        try:
            rating = int(update.message.text)
            if not 1 <= rating <= 5:
                raise ValueError
        except ValueError:
            await update.message.reply_text("‚ùå –û—Ü–µ–Ω–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 1 –¥–æ 5. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return USER_RATE_BOOK_RATING
        target_update = update.message
    else:
        return USER_RATE_BOOK_RATING # –ù–µ –¥–æ–ª–∂–Ω–æ —Å–ª—É—á–∏—Ç—å—Å—è

    user_id = context.user_data['current_user']['id']
    book_info = context.user_data['book_to_rate']

    try:
        db_data.add_rating(user_id, book_info['book_id'], rating)
        message_text = f"‚úÖ –í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞ '{rating}' –¥–ª—è –∫–Ω–∏–≥–∏ '{book_info['book_name']}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞/–æ–±–Ω–æ–≤–ª–µ–Ω–∞."
    except Exception as e:
        message_text = f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ü–µ–Ω–∫—É: {e}"

    context.user_data.pop('book_to_rate', None)
    context.user_data.pop('rating_map', None)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é
    if update.callback_query:
        await target_update.edit_message_text(message_text)
    else:
        await target_update.reply_text(message_text)

    return await user_menu(update, context)


def main() -> None:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ë–î –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            START_ROUTES: [
                CallbackQueryHandler(start_registration, pattern="^register$"),
                CallbackQueryHandler(start_login, pattern="^login$"),
                # –û—Ç–º–µ–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞ start
                CallbackQueryHandler(cancel, pattern="^cancel_start$"),
            ],
            # --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è (–ö–Ω–æ–ø–æ—á–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è –Ω–∞–∑–∞–¥) ---
            REGISTER_NAME: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, get_name),
                # –ù–∞–∑–∞–¥: –∫ START
                CallbackQueryHandler(start, pattern="^back_START_ROUTES$")
            ],
            REGISTER_DOB: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, get_dob),
                # –ù–∞–∑–∞–¥: –∫ –≤–≤–æ–¥—É NAME (start_registration –ø–µ—Ä–µ—Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –§–ò–û)
                CallbackQueryHandler(start_registration, pattern="^back_REGISTER_NAME$")
            ],
            REGISTER_CONTACT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, get_contact),
                # –ù–∞–∑–∞–¥: –∫ –≤–≤–æ–¥—É DOB
                CallbackQueryHandler(get_name, pattern="^back_REGISTER_DOB$") # –≠—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å get_name, –∫–æ—Ç–æ—Ä–æ–µ –ø–µ—Ä–µ—Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç DOB
            ],
            REGISTER_VERIFY_CODE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, verify_registration_code),
                # –ù–∞–∑–∞–¥: –∫ –≤–≤–æ–¥—É CONTACT (–ø–µ—Ä–µ—Å–ø—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç –∏ –ø–µ—Ä–µ–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥)
                CallbackQueryHandler(get_dob, pattern="^back_REGISTER_CONTACT$")
            ],
            REGISTER_STATUS: [
                CallbackQueryHandler(get_status, pattern="^(—Å—Ç—É–¥–µ–Ω—Ç|—É—á–∏—Ç–µ–ª—å)$"),
                # –ù–∞–∑–∞–¥: –∫ –≤–≤–æ–¥—É VERIFY_CODE
                CallbackQueryHandler(get_contact, pattern="^back_REGISTER_VERIFY_CODE$")
            ],
            REGISTER_PASSWORD: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, get_password),
                # –ù–∞–∑–∞–¥: –∫ –≤—ã–±–æ—Ä—É STATUS
                CallbackQueryHandler(verify_registration_code, pattern="^back_REGISTER_STATUS$") # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å verify_code, –∫–æ—Ç–æ—Ä–æ–µ –ø–µ—Ä–µ—Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å
            ],

            # --- –í—Ö–æ–¥ ---
            LOGIN_CONTACT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, get_login_contact),
                CallbackQueryHandler(start_forgot_password, pattern="^forgot_password$"),
                # –ù–∞–∑–∞–¥: –∫ START
                CallbackQueryHandler(start, pattern="^back_START_ROUTES$")
            ],
            LOGIN_PASSWORD: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, check_login_password),
                # –ù–∞–∑–∞–¥: –∫ –≤–≤–æ–¥—É LOGIN_CONTACT
                CallbackQueryHandler(start_login, pattern="^back_LOGIN_CONTACT$")
            ],

            # --- –ú–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
            USER_MENU: [
                CallbackQueryHandler(start_borrow_book, pattern="^user_borrow$"),
                CallbackQueryHandler(start_return_book, pattern="^user_return$"),
                CallbackQueryHandler(start_rate_book, pattern="^user_rate$"),
                CallbackQueryHandler(view_profile, pattern="^user_profile$"),
                CallbackQueryHandler(view_borrow_history, pattern="^user_history$"),
                CallbackQueryHandler(logout, pattern="^logout$"),
                CallbackQueryHandler(user_menu, pattern="^user_menu$")
            ],
            USER_BORROW_BOOK_NAME: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, process_borrow_book),
                CallbackQueryHandler(user_menu, pattern="^user_menu$")
            ],
            USER_RESERVE_BOOK_CONFIRM: [
                CallbackQueryHandler(process_reservation_decision, pattern="^reserve_(yes|no)$")
            ],
            USER_RETURN_BOOK: [
                CallbackQueryHandler(process_return_book, pattern="^return_\d+$"),
                CallbackQueryHandler(user_menu, pattern="^user_menu$")
            ],
            USER_RATE_BOOK_SELECT: [
                CallbackQueryHandler(select_rating, pattern="^rate_\d+$"),
                CallbackQueryHandler(user_menu, pattern="^user_menu$")
            ],

            USER_RATE_BOOK_RATING: [
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ (—Ç–µ–∫—Å—Ç) –∏–ª–∏ –∫–Ω–æ–ø–æ–∫ (callback)
                MessageHandler(filters.TEXT & ~filters.COMMAND, process_rating),
                CallbackQueryHandler(process_rating, pattern="^rating_\d+$"),
                CallbackQueryHandler(start_rate_book, pattern="^user_rate$")
            ],

            # --- –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è ---
            FORGOT_PASSWORD_CONTACT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, get_forgot_password_contact),
                # –ù–∞–∑–∞–¥: –∫ start_login
                CallbackQueryHandler(start_login, pattern="^back_LOGIN_CONTACT$")
            ],
            FORGOT_PASSWORD_VERIFY_CODE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, verify_forgot_password_code),
                # –ù–∞–∑–∞–¥: –∫ –≤–≤–æ–¥—É CONTACT
                CallbackQueryHandler(start_forgot_password, pattern="^back_FORGOT_PASSWORD_CONTACT$")
            ],
            FORGOT_PASSWORD_SET_NEW: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, set_new_password),
                # –ù–∞–∑–∞–¥: –∫ –≤–≤–æ–¥—É VERIFY_CODE
                CallbackQueryHandler(get_forgot_password_contact, pattern="^back_FORGOT_PASSWORD_VERIFY_CODE$")
            ],
        },
        # –£–±—Ä–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /cancel –∏–∑ fallbacks –¥–ª—è –ø–æ–ª–Ω–æ–π –∫–Ω–æ–ø–æ—á–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        fallbacks=[CommandHandler("start", start)],
    )

    application.add_handler(conv_handler)
    application.run_polling()


if __name__ == "__main__":
    main()