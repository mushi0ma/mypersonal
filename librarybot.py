# -*- coding: utf-8 -*-
import logging
import uuid
import os
import random
import re
from datetime import datetime
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    ConversationHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
)

# --- –ò–ú–ü–û–†–¢ –§–£–ù–ö–¶–ò–ô –ë–ê–ó–´ –î–ê–ù–ù–´–• –ò –•–ï–®–ò–†–û–í–ê–ù–ò–Ø ---
import db_data
from db_utils import get_db_connection, hash_password
import tasks

# --- –ò–ú–ü–û–†–¢ –°–ï–†–í–ò–°–û–í ---
from sendgrid import SendGridAPIClient
from sendgrid.helpers.mail import Mail

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)
logger = logging.getLogger(__name__)

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ .env ---
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

# --- –°–û–°–¢–û–Ø–ù–ò–Ø –î–ò–ê–õ–û–ì–ê ---
(
    START_ROUTES,
    REGISTER_NAME, REGISTER_DOB, REGISTER_CONTACT,
    REGISTER_VERIFY_CODE, REGISTER_STATUS,
    REGISTER_USERNAME, REGISTER_PASSWORD, REGISTER_CONFIRM_PASSWORD,
    LOGIN_CONTACT, LOGIN_PASSWORD,
    FORGOT_PASSWORD_CONTACT, FORGOT_PASSWORD_VERIFY_CODE,
    FORGOT_PASSWORD_SET_NEW, FORGOT_PASSWORD_CONFIRM_NEW,
    USER_MENU, USER_BORROW_BOOK_SELECT,
    USER_RETURN_BOOK, USER_RATE_PROMPT_AFTER_RETURN,
    USER_RATE_BOOK_SELECT, USER_RATE_BOOK_RATING, USER_DELETE_CONFIRM,
    USER_RESERVE_BOOK_CONFIRM,
    USER_VIEW_HISTORY, USER_NOTIFICATIONS,
    SHOWING_GENRES, SHOWING_GENRE_BOOKS,
    GETTING_SEARCH_QUERY, SHOWING_SEARCH_RESULTS,

    # --- –ù–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è ---
    EDIT_PROFILE_MENU, EDITING_FULL_NAME, EDITING_CONTACT,
    EDITING_PASSWORD_CURRENT, EDITING_PASSWORD_NEW, EDITING_PASSWORD_CONFIRM,
    AWAITING_NOTIFICATION_BOT,
    AWAIT_CONTACT_VERIFICATION_CODE
) = range(36)


# --------------------------
# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
# --------------------------

def normalize_phone_number(contact: str) -> str:
    clean_digits = re.sub(r'\D', '', contact)
    if clean_digits.startswith('8') and len(clean_digits) == 11:
        return '+7' + clean_digits[1:]
    if clean_digits.startswith('7') and len(clean_digits) == 11:
        return '+' + clean_digits
    if re.match(r"^\+\d{1,14}$", contact):
        return contact
    return contact

def get_user_borrow_limit(status):
    return {'—Å—Ç—É–¥–µ–Ω—Ç': 3, '—É—á–∏—Ç–µ–ª—å': 5}.get(status.lower(), 0)

async def send_verification_message(contact_info: str, code: str, context: ContextTypes.DEFAULT_TYPE, telegram_id: int):
    # –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ Email
    if re.match(r"^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$", contact_info):
        try:
            message_body = f"–í–∞—à –∫–æ–¥ –¥–ª—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∏: {code}"
            message = Mail(from_email=os.getenv("FROM_EMAIL"), to_emails=contact_info, subject='–ö–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏', html_content=f'<strong>{message_body}</strong>')
            sg = SendGridAPIClient(os.getenv("SENDGRID_API_KEY"))
            sg.send(message)
            context.user_data['verification_method'] = 'email'
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ email: {e}")
            # –ï—Å–ª–∏ email –Ω–µ —É–¥–∞–ª—Å—è, –≤—Å–µ —Ä–∞–≤–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
            
    # –ï—Å–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç - –Ω–µ email, –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ email –Ω–µ —É–¥–∞–ª–∞—Å—å,
    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∏–º–µ–Ω–∏ —Ç–µ–∫—É—â–µ–≥–æ –±–æ—Ç–∞.
    return await send_self_code_telegram(code, context, telegram_id)

def get_back_button(current_state_const: int) -> list:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–Ω–æ–ø–∫—É '–ù–∞–∑–∞–¥', –∏—Å–ø–æ–ª—å–∑—É—è –∏–º—è –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è."""
    state_name = [name for name, val in globals().items() if val == current_state_const and name.isupper() and '_' in name][0]
    return [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"back_{state_name}")]

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cancel. 
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ fallback –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –≤–ª–æ–∂–µ–Ω–Ω–æ–≥–æ ConversationHandler.
    """
    if update.message:
        message = update.message
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.reply_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é.")
        
    elif update.callback_query:
        query = update.callback_query
        await query.answer()
        # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞)
        await query.edit_message_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é.")
    
    return ConversationHandler.END

async def send_self_code_telegram(code: str, context: ContextTypes.DEFAULT_TYPE, chat_id: int) -> bool:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ—Ç –∏–º–µ–Ω–∏ —Ç–µ–∫—É—â–µ–≥–æ –±–æ—Ç–∞."""
    try:
        message_body = f"–í–∞—à –∫–æ–¥ –¥–ª—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∏: {code}"
        await context.bot.send_message(chat_id=chat_id, text=message_body)
        context.user_data['verification_method'] = 'self_telegram'
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞ —Å–∞–º–æ–º—É —Å–µ–±–µ: {e}")
        return False

# --------------------------
# --- –û–°–ù–û–í–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ---
# --------------------------

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞ –¥–∏–∞–ª–æ–≥–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –≤—Ö–æ–¥–∞/—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."""
    context.user_data.clear()
    keyboard = [
        [InlineKeyboardButton("–í–æ–π—Ç–∏", callback_data="login")],
        [InlineKeyboardButton("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", callback_data="register")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.callback_query:
        await update.callback_query.edit_message_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É! üìö", reply_markup=reply_markup)
    else:
        if update.message:
            await update.message.delete()
        await context.bot.send_message(chat_id=update.effective_chat.id, text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É! üìö", reply_markup=reply_markup)
        
    return START_ROUTES

# --- –§–£–ù–ö–¶–ò–ò –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò ---

async def start_registration(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."""
    query = update.callback_query
    await query.answer()
    context.user_data.clear()
    context.user_data['registration'] = {}
    await query.edit_message_text("üìù –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ **–§–ò–û**:", parse_mode='Markdown')
    return REGISTER_NAME

async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç –§–ò–û –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è."""
    context.user_data['registration']['full_name'] = update.message.text
    await update.message.reply_text("üéÇ –í–≤–µ–¥–∏—Ç–µ **–¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è** (–î–î.–ú–ú.–ì–ì–ì–ì):", parse_mode='Markdown')
    return REGISTER_DOB

async def get_dob(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç."""
    dob = update.message.text
    if not re.match(r"^\d{2}\.\d{2}\.\d{4}$", dob):
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ **–î–î.–ú–ú.–ì–ì–ì–ì**.")
        return REGISTER_DOB
    context.user_data['registration']['dob'] = dob
    await update.message.reply_text("üìû –í–≤–µ–¥–∏—Ç–µ –≤–∞—à **–∫–æ–Ω—Ç–∞–∫—Ç** (email, —Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ @username):", parse_mode='Markdown')
    return REGISTER_CONTACT

async def get_contact(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    contact_input = update.message.text
    contact_processed = normalize_phone_number(contact_input)
    try:
        with get_db_connection() as conn:
            if db_data.get_user_by_login(conn, contact_processed):
                await update.message.reply_text("ü§î –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–æ–π—Ç–∏ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –∫–æ–Ω—Ç–∞–∫—Ç.")
                return REGISTER_CONTACT
    except db_data.NotFoundError:
        pass
    context.user_data['registration']['contact_info'] = contact_processed
    code = str(random.randint(100000, 999999))
    context.user_data['verification_code'] = code
    sent = await send_verification_message(contact_processed, code, context, update.effective_user.id)
    reply_markup = InlineKeyboardMarkup([get_back_button(REGISTER_CONTACT)])
    if sent:
        await update.message.reply_text(f"üì≤ –ù–∞ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç ({contact_processed}) –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω **–∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏**. –í–≤–µ–¥–∏—Ç–µ –µ–≥–æ:", reply_markup=reply_markup, parse_mode='Markdown')
        return REGISTER_VERIFY_CODE
    else:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.", reply_markup=reply_markup)
        return REGISTER_CONTACT

async def verify_registration_code(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å."""
    if update.message.text == context.user_data.get('verification_code'):
        keyboard = [
            [InlineKeyboardButton("–°—Ç—É–¥–µ–Ω—Ç", callback_data="—Å—Ç—É–¥–µ–Ω—Ç"), InlineKeyboardButton("–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å", callback_data="—É—á–∏—Ç–µ–ª—å")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("‚úÖ –ö–æ–¥ –≤–µ—Ä–Ω—ã–π! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Å—Ç–∞—Ç—É—Å:", reply_markup=reply_markup)
        context.user_data.pop('verification_code', None)
        return REGISTER_STATUS
    else:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return REGISTER_VERIFY_CODE

async def get_status(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —é–∑–µ—Ä–Ω–µ–π–º."""
    query = update.callback_query
    await query.answer()
    context.user_data['registration']['status'] = query.data
    await query.edit_message_text("üßë‚Äçüíª –ü—Ä–∏–¥—É–º–∞–π—Ç–µ **—é–∑–µ—Ä–Ω–µ–π–º** (–Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º, –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤, –Ω–∞–ø—Ä–∏–º–µ—Ä: `ivanov21`):", parse_mode='Markdown')
    return REGISTER_USERNAME

async def get_username(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç —é–∑–µ—Ä–Ω–µ–π–º –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–∞—Ä–æ–ª—å."""
    username = update.message.text
    if not re.match(r"^[a-zA-Z0-9_]{3,}$", username):
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –Æ–∑–µ—Ä–Ω–µ–π–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –∫–æ—Ä–æ—á–µ 3 —Å–∏–º–≤–æ–ª–æ–≤ –∏ —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö –±—É–∫–≤, —Ü–∏—Ñ—Ä –∏ –∑–Ω–∞–∫–∞ '_'.")
        return REGISTER_USERNAME
    context.user_data['registration']['username'] = username
    await update.message.reply_text("üîë –°–æ–∑–¥–∞–π—Ç–µ **–ø–∞—Ä–æ–ª—å** (–º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤):", parse_mode='Markdown')
    return REGISTER_PASSWORD

async def get_password(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–µ—Ä–≤—ã–π –ø–∞—Ä–æ–ª—å, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ."""
    password = update.message.text
    hidden_password_text = "‚Ä¢" * len(password)
    await update.message.edit_text(f"(–ø–∞—Ä–æ–ª—å —Å–∫—Ä—ã—Ç) {hidden_password_text}")
    if not re.match(r"^(?=.*[A-Za-z])(?=.*\d|.*[!@#$%^&*()_+])[A-Za-z\d!@#$%^&*()_+]{8,}$", password):
        await update.message.reply_text("‚ùå –ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤, –≤–∫–ª—é—á–∞—è –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã/—Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return REGISTER_PASSWORD
    context.user_data['registration']['password_temp'] = password
    await update.message.reply_text("üëç –û—Ç–ª–∏—á–Ω–æ. –¢–µ–ø–µ—Ä—å **–≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –µ—â–µ —Ä–∞–∑** –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:", parse_mode='Markdown')
    return REGISTER_CONFIRM_PASSWORD

async def get_password_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –ó–∞–≤–µ—Ä—à–∞–µ—Ç —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö, —Å–æ–∑–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É –∫ –±–æ—Ç—É-—É–≤–µ–¥–æ–º–∏—Ç–µ–ª—é.
    """
    password_confirm = update.message.text
    hidden_password_text = "‚Ä¢" * len(password_confirm)
    await update.message.edit_text(f"(–ø–∞—Ä–æ–ª—å —Å–∫—Ä—ã—Ç) {hidden_password_text}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π (—ç—Ç–∞ —á–∞—Å—Ç—å –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    if context.user_data['registration'].get('password_temp') != password_confirm:
        await update.message.reply_text("‚ùå –ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–¥—É–º–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å –∑–∞–Ω–æ–≤–æ.")
        await update.message.reply_text("üîë –°–æ–∑–¥–∞–π—Ç–µ **–ø–∞—Ä–æ–ª—å** (–º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤):", parse_mode='Markdown')
        return REGISTER_PASSWORD

    context.user_data['registration']['password'] = context.user_data['registration'].pop('password_temp')
    
    # --- –ù–ê–ß–ê–õ–û –ù–û–í–û–ô –õ–û–ì–ò–ö–ò ---
    user_data = context.user_data['registration']
    
    try:
        with get_db_connection() as conn:
            # 1. –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ë–ï–ó telegram_id
            user_id = db_data.add_user(conn, user_data) 
            db_data.log_activity(conn, user_id=user_id, action="registration_start")
            
            # 2. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏
            reg_code = db_data.set_registration_code(conn, user_id)
            context.user_data['user_id_for_activation'] = user_id

        # 3. –ü–æ–ª—É—á–∞–µ–º —é–∑–µ—Ä–Ω–µ–π–º –±–æ—Ç–∞-—É–≤–µ–¥–æ–º–∏—Ç–µ–ª—è –∏–∑ .env
        notifier_bot_username = os.getenv("NOTIFICATION_BOT_USERNAME", "–í–∞—à–ë–æ—Ç–£–≤–µ–¥–æ–º–∏—Ç–µ–ª—å")
        
        # 4. –§–æ—Ä–º–∏—Ä—É–µ–º "–≥–ª—É–±–æ–∫—É—é —Å—Å—ã–ª–∫—É" –∏ –∫–Ω–æ–ø–∫–∏
        keyboard = [
            [InlineKeyboardButton("ü§ñ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", url=f"https://t.me/{notifier_bot_username}?start={reg_code}")],
            [InlineKeyboardButton("‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="confirm_subscription")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        # 5. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
        await update.message.reply_text(
            "‚úÖ –û—Ç–ª–∏—á–Ω–æ! –í—ã –ø–æ—á—Ç–∏ —É —Ü–µ–ª–∏.\n\n"
            "**–ü–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥:** –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞-—É–≤–µ–¥–æ–º–∏—Ç–µ–ª—è. –û–Ω –±—É–¥–µ—Ç –ø—Ä–∏—Å—ã–ª–∞—Ç—å –≤–∞–º –∫–æ–¥—ã –∏ –≤–∞–∂–Ω—ã–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞, –∞ –∑–∞—Ç–µ–º –≤–µ—Ä–Ω–∏—Ç–µ—Å—å —Å—é–¥–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ '–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è'.",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        return AWAITING_NOTIFICATION_BOT # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è

    except db_data.UserExistsError:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: —ç—Ç–æ—Ç —é–∑–µ—Ä–Ω–µ–π–º –∏–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç —É–∂–µ –∑–∞–Ω—è—Ç—ã.")
        context.user_data.clear()
        return await start(update, context)
    except Exception as e:
        logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ —Å–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞.")
        context.user_data.clear()
        return await start(update, context)
    
async def check_notification_subscription(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø—Ä–∏–≤—è–∑–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å telegram_id —á–µ—Ä–µ–∑ –±–æ—Ç–∞-—É–≤–µ–¥–æ–º–∏—Ç–µ–ª—è."""
    query = update.callback_query
    await query.answer()
    
    user_id = context.user_data.get('user_id_for_activation')
    if not user_id:
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å–µ—Å—Å–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ —Å /start.")
        return ConversationHandler.END

    try:
        with get_db_connection() as conn:
            user = db_data.get_user_by_id(conn, user_id)
        
        if user.get('telegram_id'):
            db_data.log_activity(conn, user_id=user_id, action="registration_finish")

            admin_text = f"‚úÖ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user.get('telegram_username', user.get('username'))} (ID: {user_id}) —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é."
            tasks.notify_admin.delay(text=admin_text, category='new_user')

            await query.edit_message_text("üéâ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏.")
            context.user_data.clear()
            return await start(update, context)
        else:
            await query.answer("–í—ã –µ—â–µ –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª–∏ –±–æ—Ç–∞-—É–≤–µ–¥–æ–º–∏—Ç–µ–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–¥–µ–ª–∞–π—Ç–µ —ç—Ç–æ.", show_alert=True)
            return AWAITING_NOTIFICATION_BOT
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è user_id {user_id}: {e}")
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ —Å–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏.")
        return ConversationHandler.END

# --- –§–£–ù–ö–¶–ò–ò –í–•–û–î–ê ---

async def start_login(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    keyboard = [[InlineKeyboardButton("ü§î –ó–∞–±—ã–ª–∏ –ø–∞—Ä–æ–ª—å?", callback_data="forgot_password")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text("üë§ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à **—é–∑–µ—Ä–Ω–µ–π–º** –∏–ª–∏ **–∫–æ–Ω—Ç–∞–∫—Ç** –¥–ª—è –≤—Ö–æ–¥–∞:", reply_markup=reply_markup, parse_mode='Markdown')
    return LOGIN_CONTACT

async def get_login_contact(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    contact_input = update.message.text
    contact_processed = normalize_phone_number(contact_input)
    try:
        with get_db_connection() as conn:
            user = db_data.get_user_by_login(conn, contact_processed)
        context.user_data['login_user'] = user
        await update.message.reply_text("üîë –í–≤–µ–¥–∏—Ç–µ –≤–∞—à **–ø–∞—Ä–æ–ª—å**:", parse_mode='Markdown')
        return LOGIN_PASSWORD
    except db_data.NotFoundError:
        await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.")
        return LOGIN_CONTACT

async def check_login_password(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = context.user_data['login_user']
    stored_hash = user['password_hash']
    input_password = update.message.text
    if hash_password(input_password) == stored_hash:
        with get_db_connection() as conn:
            db_data.log_activity(conn, user_id=user['id'], action="login")
        await update.message.reply_text(f"üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user['full_name']}!")
        context.user_data['current_user'] = user
        context.user_data.pop('login_user')
        return await user_menu(update, context)
    else:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return LOGIN_PASSWORD

# --- –§–£–ù–ö–¶–ò–ò –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–Ø –ü–ê–†–û–õ–Ø ---

async def start_forgot_password(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("üîë –í–≤–µ–¥–∏—Ç–µ –≤–∞—à **—é–∑–µ—Ä–Ω–µ–π–º** –∏–ª–∏ **–∫–æ–Ω—Ç–∞–∫—Ç** –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è:", parse_mode='Markdown')
    return FORGOT_PASSWORD_CONTACT

async def get_forgot_password_contact(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    contact_input = update.message.text
    contact_processed = normalize_phone_number(contact_input)
    try:
        with get_db_connection() as conn:
            user = db_data.get_user_by_login(conn, contact_processed)
    except db_data.NotFoundError:
        await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return FORGOT_PASSWORD_CONTACT
    contact_to_verify = user['contact_info']
    user_telegram_id = user['telegram_id'] if user['telegram_id'] else update.effective_user.id
    code = str(random.randint(100000, 999999))
    context.user_data['forgot_password_code'] = code
    context.user_data['forgot_password_contact'] = user['contact_info'] # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–∞–∫—Ç
    sent = await send_verification_message(contact_to_verify, code, context, user_telegram_id)
    if sent:
        await update.message.reply_text(f"üì≤ –ö–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {contact_to_verify}. –í–≤–µ–¥–∏—Ç–µ –µ–≥–æ:")
        return FORGOT_PASSWORD_VERIFY_CODE
    else:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return FORGOT_PASSWORD_CONTACT

async def verify_forgot_password_code(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if update.message.text == context.user_data.get('forgot_password_code'):
        await update.message.reply_text("‚úÖ –ö–æ–¥ –≤–µ—Ä–Ω—ã–π! –í–≤–µ–¥–∏—Ç–µ **–Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å**:", parse_mode='Markdown')
        context.user_data.pop('forgot_password_code', None)
        return FORGOT_PASSWORD_SET_NEW
    else:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return FORGOT_PASSWORD_VERIFY_CODE

async def set_new_password(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    new_password = update.message.text
    hidden_password_text = "‚Ä¢" * len(new_password)
    await update.message.edit_text(f"(–ø–∞—Ä–æ–ª—å —Å–∫—Ä—ã—Ç) {hidden_password_text}")
    if not re.match(r"^(?=.*[A-Za-z])(?=.*\d|.*[!@#$%^&*()_+])[A-Za-z\d!@#$%^&*()_+]{8,}$", new_password):
        await update.message.reply_text("‚ùå –ü–∞—Ä–æ–ª—å –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º (–º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤, –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã/—Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return FORGOT_PASSWORD_SET_NEW
    context.user_data['forgot_password_temp'] = new_password
    await update.message.reply_text("üëç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, **–≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –µ—â–µ —Ä–∞–∑**:", parse_mode='Markdown')
    return FORGOT_PASSWORD_CONFIRM_NEW

async def confirm_new_password(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    password_confirm = update.message.text
    hidden_password_text = "‚Ä¢" * len(password_confirm)
    await update.message.edit_text(f"(–ø–∞—Ä–æ–ª—å —Å–∫—Ä—ã—Ç) {hidden_password_text}")
    if context.user_data.get('forgot_password_temp') != password_confirm:
        await update.message.reply_text("‚ùå –ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –∑–∞–Ω–æ–≤–æ.")
        return FORGOT_PASSWORD_SET_NEW
    login_query = context.user_data['forgot_password_contact']
    final_password = context.user_data.pop('forgot_password_temp')
    try:
        with get_db_connection() as conn:
            db_data.update_user_password(conn, login_query, final_password)
        await update.message.reply_text("üéâ –ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–∞—Ä–æ–ª—è: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–∞—Ä–æ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return FORGOT_PASSWORD_SET_NEW
    context.user_data.clear()
    return await start(update, context)

# --- –§–£–ù–ö–¶–ò–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–û–ì–û –ú–ï–ù–Æ ---

async def user_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # –ï—Å–ª–∏ –º—ã —Ç–æ–ª—å–∫–æ —á—Ç–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å, –ø–æ–∫–∞–∂–µ–º –µ–≥–æ –≤–º–µ—Å—Ç–æ –º–µ–Ω—é
    if context.user_data.pop('just_edited_profile', False):
        return await view_profile(update, context)

    user = context.user_data.get('current_user')
    if not user:
        return await start(update, context)
    with get_db_connection() as conn:
        borrowed_books = db_data.get_borrowed_books(conn, user['id'])
    borrow_limit = get_user_borrow_limit(user['status'])
    message_text = (
        f"**üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**\n"
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user['full_name']}!\n\n"
        f"üìñ –£ –≤–∞—Å –Ω–∞ —Ä—É–∫–∞—Ö: **{len(borrowed_books)}/{borrow_limit}** –∫–Ω–∏–≥."
    )
    keyboard = [
        [
            InlineKeyboardButton("üîé –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é/–∞–≤—Ç–æ—Ä—É", callback_data="search_book"),
            InlineKeyboardButton("üìö –ü–æ–∏—Å–∫ –ø–æ –∂–∞–Ω—Ä—É", callback_data="find_by_genre")
        ],
        [
            InlineKeyboardButton("üì• –í–∑—è—Ç—å –∫–Ω–∏–≥—É", callback_data="search_book"),
            InlineKeyboardButton("üì§ –í–µ—Ä–Ω—É—Ç—å –∫–Ω–∏–≥—É", callback_data="user_return")
        ],
        [
            InlineKeyboardButton("‚≠ê –û—Ü–µ–Ω–∏—Ç—å –∫–Ω–∏–≥—É", callback_data="user_rate"),
            InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="user_profile")
        ],
        [
            InlineKeyboardButton("üì¨ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="user_notifications"),
            InlineKeyboardButton("üö™ –í—ã–π—Ç–∏", callback_data="logout")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    if update.callback_query:
        await update.callback_query.edit_message_text(message_text, reply_markup=reply_markup, parse_mode='Markdown')
    else:
        await update.message.reply_text(message_text, reply_markup=reply_markup, parse_mode='Markdown')
    return USER_MENU

async def logout(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    user = context.user_data.get('current_user')
    with get_db_connection() as conn:
        db_data.log_activity(conn, user_id=user['id'], action="logout")
        if db_data.get_borrowed_books(conn, user['id']):
            keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="user_menu")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ã–π—Ç–∏, –ø–æ–∫–∞ —É –≤–∞—Å –µ—Å—Ç—å –∫–Ω–∏–≥–∏ –Ω–∞ —Ä—É–∫–∞—Ö!", reply_markup=reply_markup)
            return USER_MENU
    context.user_data.clear()
    await query.edit_message_text("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏. –í–≤–µ–¥–∏—Ç–µ /start, —á—Ç–æ–±—ã —Å–Ω–æ–≤–∞ –≤–æ–π—Ç–∏.")
    return ConversationHandler.END

async def view_profile(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    query = update.callback_query
    await query.answer()
    user_id = context.user_data['current_user']['id']
    try:
        with get_db_connection() as conn:
            user_profile = db_data.get_user_profile(conn, user_id)
            borrowed_books = db_data.get_borrowed_books(conn, user_id)
        borrow_limit = get_user_borrow_limit(user_profile['status'])
        reg_date_str = user_profile['registration_date'].strftime('%d.%m.%Y')
        message_parts = [
            f"üë§ **–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç** üë§", f"`-------------------------`",
            f"üîπ **–ò–º—è:** `{user_profile['full_name']}`",
            f"üîπ **–Æ–∑–µ—Ä–Ω–µ–π–º:** `{user_profile['username']}`",
            f"üîπ **–°—Ç–∞—Ç—É—Å:** `{user_profile['status'].capitalize()}`",
            f"üîπ **–ö–æ–Ω—Ç–∞–∫—Ç:** `{user_profile['contact_info']}`",
            f"üîπ **–í –±–∏–±–ª–∏–æ—Ç–µ–∫–µ —Å:** `{reg_date_str}`", f"`-------------------------`",
            f"üìö **–í–∑—è—Ç—ã–µ –∫–Ω–∏–≥–∏ ({len(borrowed_books)}/{borrow_limit})**"
        ]
        if borrowed_books:
            for i, borrowed in enumerate(borrowed_books):
                message_parts.append(f"  {i+1}. `{borrowed['book_name']}` (–∞–≤—Ç–æ—Ä: {borrowed['author_name']})")
        else:
            message_parts.append("  _–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–π–º–æ–≤._")
        keyboard = [
            [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data="edit_profile")],
            [InlineKeyboardButton("üìú –ü–µ—Ä–µ–π—Ç–∏ –∫ –∏—Å—Ç–æ—Ä–∏–∏", callback_data="user_history")],
            [InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç", callback_data="user_delete_account")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="user_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("\n".join(message_parts), reply_markup=reply_markup, parse_mode='Markdown')
    except db_data.NotFoundError:
        await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ —Å–Ω–æ–≤–∞.")
        context.user_data.clear()
        return await start(update, context)
    return USER_MENU

async def view_borrow_history(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∏–º—Å—Ç–≤–æ–≤–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    query = update.callback_query
    await query.answer()
    user_id = context.user_data['current_user']['id']
    with get_db_connection() as conn:
        history = db_data.get_user_borrow_history(conn, user_id)
    message_parts = ["**üìú –í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –≤–∑—è—Ç—ã—Ö –∫–Ω–∏–≥**\n"]
    if history:
        for item in history:
            return_date_str = item['return_date'].strftime('%d.%m.%Y') if item['return_date'] else "–ù–∞ —Ä—É–∫–∞—Ö"
            borrow_date_str = item['borrow_date'].strftime('%d.%m.%Y')
            rating_str = ""
            if item['rating']:
                stars = "‚≠ê" * item['rating']
                rating_str = f" (–≤–∞—à–∞ –æ—Ü–µ–Ω–∫–∞: {stars})"
            message_parts.append(f"üìñ **{item['book_name']}**\n   - –í–∑—è—Ç–∞: `{borrow_date_str}`\n   - –í–æ–∑–≤—Ä–∞—â–µ–Ω–∞: `{return_date_str}`{rating_str}")
    else:
        message_parts.append("–í—ã –µ—â–µ –Ω–µ –±—Ä–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π –∫–Ω–∏–≥–∏.")
    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data="user_profile")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text("\n".join(message_parts), reply_markup=reply_markup, parse_mode='Markdown')
    return USER_MENU

# --- –§–£–ù–ö–¶–ò–ò –†–ê–ë–û–¢–´ –° –ö–ù–ò–ì–ê–ú–ò ---

async def process_borrow_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    book_id = int(query.data.split('_')[2])
    user_id = context.user_data['current_user']['id']
    try:
        with get_db_connection() as conn:
            selected_book = db_data.get_book_by_id(conn, book_id)
            if selected_book['available_quantity'] > 0:
                borrowed_books = db_data.get_borrowed_books(conn, user_id)
                borrow_limit = get_user_borrow_limit(context.user_data['current_user']['status'])
                if len(borrowed_books) >= borrow_limit:
                    await query.edit_message_text(f"‚ö†Ô∏è –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ ({borrow_limit}) –Ω–∞ –∑–∞–∏–º—Å—Ç–≤–æ–≤–∞–Ω–∏–µ.")
                    return await user_menu(update, context)
                due_date = db_data.borrow_book(conn, user_id, selected_book['id'])
                db_data.log_activity(conn, user_id=user_id, action="borrow_book", details=f"Book ID: {selected_book['id']}")

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ –ø—Ä—è–º–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
                due_date_str = due_date.strftime('%d.%m.%Y')
                notification_text = f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –≤–∑—è–ª–∏ –∫–Ω–∏–≥—É ¬´{selected_book['name']}¬ª.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–µ—Ä–Ω–∏—Ç–µ –µ–µ –¥–æ **{due_date_str}**."
                tasks.notify_user.delay(user_id=user_id, text=notification_text, category='confirmation')

                await query.edit_message_text("üëç –û—Ç–ª–∏—á–Ω–æ! –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤–∞–º –≤ –±–æ—Ç-—É–≤–µ–¥–æ–º–∏—Ç–µ–ª—å.")
                return await user_menu(update, context)
            else:
                context.user_data['book_to_reserve'] = selected_book
                keyboard = [
                    [InlineKeyboardButton("‚úÖ –î–∞, —É–≤–µ–¥–æ–º–∏—Ç—å", callback_data="reserve_yes")],
                    [InlineKeyboardButton("‚ùå –ù–µ—Ç, —Å–ø–∞—Å–∏–±–æ", callback_data="reserve_no")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await query.edit_message_text(f"‚è≥ –ö–Ω–∏–≥–∞ ¬´{selected_book['name']}¬ª –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –•–æ—Ç–∏—Ç–µ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞—Ç—å –∏ –ø–æ–ª—É—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –æ–Ω–∞ –æ—Å–≤–æ–±–æ–¥–∏—Ç—Å—è?", reply_markup=reply_markup)
                return USER_RESERVE_BOOK_CONFIRM
    except (db_data.NotFoundError, IndexError):
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –∫–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return await user_menu(update, context)
    except Exception as e:
        error_text = f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}"
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ process_borrow_selection: {e}", exc_info=True)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏—Ç-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        tasks.notify_admin.delay(
            text=f"‚ùó **–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ `librarybot`**\n\n**–§—É–Ω–∫—Ü–∏—è:** `process_borrow_selection`\n**–û—à–∏–±–∫–∞:** `{e}`",
            category='error'
        )
        await query.edit_message_text(error_text)
        return await user_menu(update, context)

async def process_reservation_decision(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    book_to_reserve = context.user_data.get('book_to_reserve')
    if not book_to_reserve:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–æ–≤–∞.")
        return await user_menu(update, context)
    user_id = context.user_data['current_user']['id']
    if query.data == 'reserve_yes':
        with get_db_connection() as conn:
            result = db_data.add_reservation(conn, user_id, book_to_reserve['id'])
            db_data.log_activity(conn, user_id=user_id, action="reserve_book", details=f"Book ID: {book_to_reserve['id']}")
        if "—É–∂–µ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–ª–∏" in result:
             await query.edit_message_text(f"‚ö†Ô∏è {result}")
        else:
             await query.edit_message_text(f"üëç –í—ã –±—É–¥–µ—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω—ã, –∫–æ–≥–¥–∞ –∫–Ω–∏–≥–∞ ¬´{book_to_reserve['name']}¬ª —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞.")
    else:
        await query.edit_message_text("üëå –•–æ—Ä–æ—à–æ, –¥–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    context.user_data.pop('book_to_reserve', None)
    return await user_menu(update, context)

async def start_return_book(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    user_id = context.user_data['current_user']['id']
    with get_db_connection() as conn:
        borrowed_books = db_data.get_borrowed_books(conn, user_id)
    if not borrowed_books:
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="user_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("‚úÖ –£ –≤–∞—Å –Ω–µ—Ç –∫–Ω–∏–≥ –Ω–∞ —Ä—É–∫–∞—Ö.", reply_markup=reply_markup)
        return USER_MENU
    message_text = "üì§ –í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–∏–≥—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞:"
    keyboard = []
    context.user_data['borrowed_map'] = {}
    for i, borrowed in enumerate(borrowed_books):
        borrow_id_cb = f"return_{i}"
        keyboard.append([InlineKeyboardButton(f"{i+1}. {borrowed['book_name']}", callback_data=borrow_id_cb)])
        context.user_data['borrowed_map'][borrow_id_cb] = {'borrow_id': borrowed['borrow_id'], 'book_id': borrowed['book_id'], 'book_name': borrowed['book_name']}
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="user_menu")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(message_text, reply_markup=reply_markup)
    return USER_RETURN_BOOK

async def process_return_book(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    borrowed_info = context.user_data.get('borrowed_map', {}).get(query.data)
    if not borrowed_info:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return await user_menu(update, context)
    book_id = borrowed_info['book_id']
    book_name = borrowed_info['book_name']
    user_id = context.user_data['current_user']['id']
    try:
        with get_db_connection() as conn:
            result = db_data.return_book(conn, borrowed_info['borrow_id'], book_id)
            if result == "–£—Å–ø–µ—à–Ω–æ":
                db_data.log_activity(conn, user_id=user_id, action="return_book", details=f"Book ID: {book_id}")
                context.user_data.pop('borrowed_map', None)
                context.user_data['just_returned_book'] = {'id': book_id, 'name': book_name}
                keyboard = [
                    [InlineKeyboardButton("‚≠ê –û—Ü–µ–Ω–∏—Ç—å –∫–Ω–∏–≥—É", callback_data="rate_after_return")],
                    [InlineKeyboardButton("‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="user_menu")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await query.edit_message_text(f"‚úÖ –ö–Ω–∏–≥–∞ ¬´{book_name}¬ª –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞. –ù–µ —Ö–æ—Ç–∏—Ç–µ –ª–∏ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –µ–π –æ—Ü–µ–Ω–∫—É?", reply_markup=reply_markup)
                reservations = db_data.get_reservations_for_book(conn, book_id)
                if reservations:
                    user_to_notify_id = reservations[0]
                    notification_text = f"üéâ –ö–Ω–∏–≥–∞ ¬´{book_name}¬ª, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–ª–∏, —Å–Ω–æ–≤–∞ –≤ –Ω–∞–ª–∏—á–∏–∏."
                    tasks.notify_user.delay(user_id=user_to_notify_id, text=notification_text, category='reservation')
                    db_data.update_reservation_status(conn, user_to_notify_id, book_id, notified=True)
                return USER_RATE_PROMPT_AFTER_RETURN
            else:
                await query.edit_message_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–µ—Ä–Ω—É—Ç—å: {result}")
                return await user_menu(update, context)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫–Ω–∏–≥–∏: {e}")
        await query.edit_message_text("‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞.")
        return await user_menu(update, context)

async def initiate_rating_from_return(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    returned_book = context.user_data.get('just_returned_book')
    if not returned_book:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–Ω–∏–≥–µ –ø–æ—Ç–µ—Ä—è–Ω–∞.")
        return await user_menu(update, context)
    context.user_data['book_to_rate'] = {'id': returned_book['id'], 'name': returned_book['name']}
    return await select_rating(update, context, from_return=True)

async def start_rate_book(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    user_id = context.user_data['current_user']['id']
    with get_db_connection() as conn:
        history = db_data.get_user_borrow_history(conn, user_id)
    if not history:
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="user_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üìö –í—ã –º–æ–∂–µ—Ç–µ –æ—Ü–µ–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ –∫–Ω–∏–≥–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—Ä–∞–ª–∏.", reply_markup=reply_markup)
        return USER_MENU
    message_text = "‚≠ê –í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–∏–≥—É –¥–ª—è –æ—Ü–µ–Ω–∫–∏:"
    keyboard = []
    context.user_data['rating_map'] = {}
    unique_books = {item['book_name']: item for item in history if 'book_id' in item and item['book_id'] is not None}.values()
    for i, book in enumerate(unique_books):
        rate_id = f"rate_{i}"
        keyboard.append([InlineKeyboardButton(f"{i+1}. {book['book_name']}", callback_data=rate_id)])
        context.user_data['rating_map'][rate_id] = {'book_id': book['book_id'], 'book_name': book['book_name']}
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="user_menu")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(message_text, reply_markup=reply_markup)
    return USER_RATE_BOOK_SELECT

async def select_rating(update: Update, context: ContextTypes.DEFAULT_TYPE, from_return: bool = False) -> int:
    query = update.callback_query
    await query.answer()
    if not from_return:
        book_info = context.user_data['rating_map'].get(query.data)
        if not book_info:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞.")
            return await user_menu(update, context)
        context.user_data['book_to_rate'] = book_info
    else:
        book_info = context.user_data.get('book_to_rate')
    message_text = f"‚≠ê –í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞ –¥–ª—è –∫–Ω–∏–≥–∏ ¬´{book_info['book_name']}¬ª (–æ—Ç 1 –¥–æ 5):"
    rating_buttons = [
        [InlineKeyboardButton("‚≠ê"*i, callback_data=f"rating_{i}") for i in range(1, 6)],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="user_rate" if not from_return else "user_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(rating_buttons)
    await query.edit_message_text(message_text, reply_markup=reply_markup, parse_mode='Markdown')
    return USER_RATE_BOOK_RATING

async def process_rating(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    try:
        rating = int(query.data.split('_')[1])
    except (ValueError, IndexError):
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –æ—Ü–µ–Ω–∫–∏.")
        return USER_RATE_BOOK_RATING
    user_id = context.user_data['current_user']['id']
    book_info = context.user_data['book_to_rate']
    try:
        with get_db_connection() as conn:
            db_data.add_rating(conn, user_id, book_info['book_id'], rating)
            db_data.log_activity(conn, user_id=user_id, action="rate_book", details=f"Book ID: {book_info['book_id']}, Rating: {rating}")
        message_text = f"üëç –°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞ ¬´{rating}¬ª –¥–ª—è –∫–Ω–∏–≥–∏ ¬´{book_info['book_name']}¬ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞."
    except Exception as e:
        message_text = f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å: {e}"
    context.user_data.pop('book_to_rate', None)
    context.user_data.pop('rating_map', None)
    await query.edit_message_text(message_text)
    return await user_menu(update, context)

async def show_notifications(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    user_id = context.user_data['current_user']['id']
    try:
        with get_db_connection() as conn:
            notifications = db_data.get_notifications_for_user(conn, user_id)
        message_parts = ["üì¨ **–í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:**\n"]
        for notif in notifications:
            date_str = notif['created_at'].strftime('%d.%m.%Y %H:%M')
            status = "‚ö™Ô∏è" if notif['is_read'] else "üîµ"
            category_map = {'broadcast': 'üì¢ –†–∞—Å—Å—ã–ª–∫–∞', 'reservation': 'üì¶ –†–µ–∑–µ—Ä–≤', 'system': '‚öôÔ∏è –°–∏—Å—Ç–µ–º–∞'}
            category_str = category_map.get(notif['category'], notif['category'].capitalize())
            message_parts.append(f"`{date_str}`\n{status} **{category_str}:** {notif['text']}\n")
        message_text = "\n".join(message_parts)
    except db_data.NotFoundError:
        message_text = "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."
    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="user_menu")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(message_text, reply_markup=reply_markup, parse_mode='Markdown')
    return USER_MENU

# --- –§–£–ù–ö–¶–ò–ò –£–î–ê–õ–ï–ù–ò–Ø –ê–ö–ö–ê–£–ù–¢–ê ---

async def ask_delete_self_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    user_id = context.user_data['current_user']['id']
    with get_db_connection() as conn:
        borrowed_books = db_data.get_borrowed_books(conn, user_id)
    if borrowed_books:
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data="user_profile")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç, –ø–æ–∫–∞ —É –≤–∞—Å –µ—Å—Ç—å –∫–Ω–∏–≥–∏ –Ω–∞ —Ä—É–∫–∞—Ö.", reply_markup=reply_markup)
        return USER_MENU
    keyboard = [
        [InlineKeyboardButton("‚úÖ –î–∞, —è —É–≤–µ—Ä–µ–Ω", callback_data="user_confirm_self_delete")],
        [InlineKeyboardButton("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data="user_profile")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text("‚ö†Ô∏è **–í—ã —É–≤–µ—Ä–µ–Ω—ã?**\n\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å. –í—Å–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –∞–Ω–æ–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã.", reply_markup=reply_markup, parse_mode='Markdown')
    return USER_DELETE_CONFIRM

async def process_delete_self_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    user_id = context.user_data['current_user']['id']

    # --- –ò–ó–ú–ï–ù–ï–ù–ò–Ø –ó–î–ï–°–¨ ---
    
    # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º username, –ø–æ–∫–∞ –¥–∞–Ω–Ω—ã–µ –µ—â–µ –¥–æ—Å—Ç—É–ø–Ω—ã
    username = context.user_data['current_user'].get('username', f'ID: {user_id}')
    
    with get_db_connection() as conn:
        result = db_data.delete_user_by_self(conn, user_id)
        if result == "–£—Å–ø–µ—à–Ω–æ":
            # –¢–µ–ø–µ—Ä—å –ª–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –° –î–ï–¢–ê–õ–Ø–ú–ò (username)
            db_data.log_activity(conn, user_id=user_id, action="self_delete_account", details=f"Username: {username}")
            
            admin_text = f"üóëÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} (ID: {user_id}) —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª–∏–ª —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç."
            tasks.notify_admin.delay(text=admin_text, category='user_self_deleted')

            await query.edit_message_text("‚úÖ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª —É–¥–∞–ª–µ–Ω. –ü—Ä–æ—â–∞–π—Ç–µ!")
            context.user_data.clear()
            return ConversationHandler.END
        else:
            await query.edit_message_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å: {result}")
            return await user_menu(update, context)
        
# --- –§–£–ù–ö–¶–ò–ò –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–Ø –ü–†–û–§–ò–õ–Ø ---

async def start_profile_edit(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í—Ö–æ–¥–Ω–∞—è —Ç–æ—á–∫–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é."""
    query = update.callback_query
    await query.answer()
    
    keyboard = [
        [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –§–ò–û", callback_data="edit_field_full_name")],
        [InlineKeyboardButton("üìû –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç", callback_data="edit_field_contact_info")],
        [InlineKeyboardButton("üîë –°–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å", callback_data="edit_field_password")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data="user_profile")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text("‚úèÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:", reply_markup=reply_markup)
    return EDIT_PROFILE_MENU

async def select_field_to_edit(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ–ª—è –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ."""
    query = update.callback_query
    await query.answer()
    field = query.data.split('_')[2]

    if field == "full_name":
        await query.edit_message_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –§–ò–û:")
        return EDITING_FULL_NAME
    elif field == "contact_info":
        await query.edit_message_text("üìû –í–≤–µ–¥–∏—Ç–µ **–Ω–æ–≤—ã–π** –∫–æ–Ω—Ç–∞–∫—Ç (email –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω):", parse_mode='Markdown')
        # –ú–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –æ–∂–∏–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞
        return EDITING_CONTACT 
    elif field == "password":
        await query.edit_message_text("üîê –î–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à **—Ç–µ–∫—É—â–∏–π** –ø–∞—Ä–æ–ª—å:", parse_mode='Markdown')
        return EDITING_PASSWORD_CURRENT

async def process_full_name_edit(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –§–ò–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    new_name = update.message.text
    user_id = context.user_data['current_user']['id']
    with get_db_connection() as conn:
        db_data.update_user_full_name(conn, user_id, new_name)
        context.user_data['current_user'] = db_data.get_user_by_id(conn, user_id)
    await update.message.reply_text("‚úÖ –§–ò–û —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
    context.user_data['just_edited_profile'] = True
    return ConversationHandler.END

async def process_contact_edit(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –µ–≥–æ –Ω–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–¥."""
    new_contact = normalize_phone_number(update.message.text)
    user_id = context.user_data['current_user']['id']
    
    try:
        # –ü—Ä–æ–≤–µ—Ä–∏–º, –Ω–µ –∑–∞–Ω—è—Ç –ª–∏ —ç—Ç–æ—Ç –∫–æ–Ω—Ç–∞–∫—Ç –∫–µ–º-—Ç–æ –¥—Ä—É–≥–∏–º
        with get_db_connection() as conn:
            if db_data.get_user_by_login(conn, new_contact):
                await update.message.reply_text("‚ùå –≠—Ç–æ—Ç –∫–æ–Ω—Ç–∞–∫—Ç —É–∂–µ –∑–∞–Ω—è—Ç –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π.")
                return EDITING_CONTACT # –û—Å—Ç–∞–µ–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞
    except db_data.NotFoundError:
        pass # –í—Å–µ —Ö–æ—Ä–æ—à–æ, –∫–æ–Ω—Ç–∞–∫—Ç —Å–≤–æ–±–æ–¥–µ–Ω

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥
    context.user_data['new_contact_temp'] = new_contact
    code = str(random.randint(100000, 999999))
    context.user_data['verification_code'] = code

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –Ω–∞ –ù–û–í–´–ô –∫–æ–Ω—Ç–∞–∫—Ç
    sent = await send_verification_message(new_contact, code, context, update.effective_user.id)
    
    if sent:
        await update.message.reply_text(f"üì≤ –ù–∞ –≤–∞—à –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç ({new_contact}) –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–æ–¥. –í–≤–µ–¥–∏—Ç–µ –µ–≥–æ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:")
        return AWAIT_CONTACT_VERIFICATION_CODE # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–¥–∞
    else:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return EDITING_CONTACT

async def check_current_password(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    current_password_input = update.message.text
    stored_hash = context.user_data['current_user']['password_hash']
    
    if hash_password(current_password_input) == stored_hash:
        await update.message.reply_text("‚úÖ –ü–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ **–Ω–æ–≤—ã–π** –ø–∞—Ä–æ–ª—å:", parse_mode='Markdown')
        return EDITING_PASSWORD_NEW
    else:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
        return EDITING_PASSWORD_CURRENT

async def get_new_password(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å."""
    new_password = update.message.text
    if len(new_password) < 8:
        await update.message.reply_text("‚ùå –ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 8 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return EDITING_PASSWORD_NEW
    context.user_data['new_password_temp'] = new_password
    await update.message.reply_text("üëç –û—Ç–ª–∏—á–Ω–æ. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ **–Ω–æ–≤—ã–π** –ø–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:", parse_mode='Markdown')
    return EDITING_PASSWORD_CONFIRM

async def confirm_and_set_new_password(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å."""
    confirm_password = update.message.text
    if confirm_password != context.user_data.get('new_password_temp'):
        await update.message.reply_text("‚ùå –ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –µ—â–µ —Ä–∞–∑.")
        return EDITING_PASSWORD_NEW
    
    user_id = context.user_data['current_user']['id']
    new_password = context.user_data.pop('new_password_temp')
    
    with get_db_connection() as conn:
        db_data.update_user_password_by_id(conn, user_id, new_password)
        context.user_data['current_user'] = db_data.get_user_by_id(conn, user_id)

    await update.message.reply_text("üéâ –ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!")
    context.user_data['just_edited_profile'] = True
    return ConversationHandler.END

async def show_genres(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ø–∏—Å–æ–∫ –∂–∞–Ω—Ä–æ–≤ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞."""
    query = update.callback_query
    await query.answer()

    with get_db_connection() as conn:
        genres = db_data.get_unique_genres(conn)
    
    if not genres:
        await query.edit_message_text(
            "üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –∫–∞—Ç–∞–ª–æ–≥–µ –ø–æ–∫–∞ –Ω–µ—Ç –∫–Ω–∏–≥ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∂–∞–Ω—Ä–∞.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="user_menu")]])
        )
        return USER_MENU

    keyboard = []
    for genre in genres:
        keyboard.append([InlineKeyboardButton(f"üé≠ {genre}", callback_data=f"genre_{genre}")])
    
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="user_menu")])
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text("üìö –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –∂–∞–Ω—Ä:", reply_markup=reply_markup)
    return SHOWING_GENRES


async def show_books_in_genre(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–Ω–∏–≥ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –∂–∞–Ω—Ä–µ."""
    query = update.callback_query
    await query.answer()
    
    parts = query.data.split('_')
    genre = parts[1]
    page = int(parts[2]) if len(parts) > 2 else 0
    books_per_page = 5
    offset = page * books_per_page

    with get_db_connection() as conn:
        books, total_books = db_data.get_available_books_by_genre(conn, genre, limit=books_per_page, offset=offset)

    if total_books == 0:
        message_text = f"üòî –í –∂–∞–Ω—Ä–µ ¬´{genre}¬ª —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∫–Ω–∏–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
    else:
        message_parts = [f"**üìö –ö–Ω–∏–≥–∏ –≤ –∂–∞–Ω—Ä–µ ¬´{genre}¬ª** (–°—Ç—Ä. {page + 1}):\n"]
        for book in books:
            message_parts.append(f"‚Ä¢ *{book['name']}* ({book['author']})")
        message_text = "\n".join(message_parts)
    
    # --- –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ ---
    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"genre_{genre}_{page - 1}"))
    if (page + 1) * books_per_page < total_books:
        nav_buttons.append(InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"genre_{genre}_{page + 1}"))

    keyboard = [nav_buttons] if nav_buttons else []
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ö –≤—ã–±–æ—Ä—É –∂–∞–Ω—Ä–∞", callback_data="find_by_genre")])
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(text=message_text, reply_markup=reply_markup, parse_mode='Markdown')
    return SHOWING_GENRE_BOOKS

async def start_search(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –ø–æ–∏—Å–∫–∞ –∫–Ω–∏–≥–∏ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É."""
    query = update.callback_query
    await query.answer()
    await query.edit_message_text(
        text="üîé –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏ –∏–ª–∏ —Ñ–∞–º–∏–ª–∏—é –∞–≤—Ç–æ—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="user_menu")]])
    )
    return GETTING_SEARCH_QUERY

async def process_search_query(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ò—â–µ—Ç –∫–Ω–∏–≥–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å."""
    search_term = update.message.text
    context.user_data['last_search_term'] = search_term # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    
    # –í—ã–∑—ã–≤–∞–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏, —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥
    # –ò–º–∏—Ç–∏—Ä—É–µ–º callback_query –¥–ª—è –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    query_data = "search_page_0"
    update.callback_query = type('CallbackQuery', (), {'data': query_data, 'message': update.message, 'answer': lambda: None})()
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ–∏—Å–∫–æ–≤—ã–º –∑–∞–ø—Ä–æ—Å–æ–º –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã
    await update.message.delete()

    return await navigate_search_results(update, context)

async def navigate_search_results(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –ø–æ —Å–ª–æ–≤—É."""
    query = update.callback_query
    await query.answer()

    page = int(query.data.split('_')[2])
    search_term = context.user_data.get('last_search_term')

    if not search_term:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ—Ç–µ—Ä—è–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return await user_menu(update, context)

    books_per_page = 5
    offset = page * books_per_page

    with get_db_connection() as conn:
        books, total_books = db_data.search_available_books(conn, search_term, limit=books_per_page, offset=offset)

    if total_books == 0:
         await query.edit_message_text(
            text=f"üòî –ü–æ –∑–∞–ø—Ä–æ—Å—É ¬´{search_term}¬ª –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑", callback_data="search_book")],
                [InlineKeyboardButton("‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="user_menu")]
            ])
        )
         return USER_MENU

    message_text = f"üîé –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É ¬´{search_term}¬ª (–°—Ç—Ä. {page + 1}):"
    keyboard = []
    for book in books:
        keyboard.append([InlineKeyboardButton(f"üìñ {book['name']} ({book['author']})", callback_data=f"view_book_{book['id']}")])
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"search_page_{page - 1}"))
    if (page + 1) * books_per_page < total_books:
        nav_buttons.append(InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"search_page_{page + 1}"))
    
    if nav_buttons:
        keyboard.append(nav_buttons)
    
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="user_menu")])
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(message_text, reply_markup=reply_markup)
    return SHOWING_SEARCH_RESULTS

async def show_book_card_user(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É –∫–Ω–∏–≥–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    query = update.callback_query
    await query.answer()
    book_id = int(query.data.split('_')[2])
    
    with get_db_connection() as conn:
        book = db_data.get_book_card_details(conn, book_id)

    message_parts = [
        f"**üìñ {book['name']}**",
        f"**–ê–≤—Ç–æ—Ä:** {book['author']}",
        f"**–ñ–∞–Ω—Ä:** {book['genre']}",
        f"\n_{book['description']}_\n"
    ]
    
    keyboard = []
    if book['is_available']:
        message_parts.append("‚úÖ **–°—Ç–∞—Ç—É—Å:** –°–≤–æ–±–æ–¥–Ω–∞")
        keyboard.append([InlineKeyboardButton("‚úÖ –í–∑—è—Ç—å —ç—Ç—É –∫–Ω–∏–≥—É", callback_data=f"borrow_book_{book['id']}")])
    else:
        message_parts.append("‚ùå **–°—Ç–∞—Ç—É—Å:** –ù–∞ —Ä—É–∫–∞—Ö")

    # --- –£–õ–£–ß–®–ï–ù–ù–ê–Ø –ö–õ–ê–í–ò–ê–¢–£–†–ê ---
    keyboard.extend([
        [InlineKeyboardButton("üîé –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="search_book")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="user_menu")]
    ])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    message_text = "\n".join(message_parts)

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –ø—É—Ç–∞–Ω–∏—Ü—ã
    if query.message:
        await query.message.delete()

    if book.get('cover_image_id'):
        await context.bot.send_photo(
            chat_id=query.message.chat_id,
            photo=book['cover_image_id'],
            caption=message_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    else:
        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text=message_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        
    return SHOWING_SEARCH_RESULTS

async def verify_new_contact_code(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–¥ –∏, –µ—Å–ª–∏ –æ–Ω –≤–µ—Ä–µ–Ω, –æ–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç –≤ –ë–î."""
    user_code = update.message.text
    if user_code == context.user_data.get('verification_code'):
        user_id = context.user_data['current_user']['id']
        new_contact = context.user_data.get('new_contact_temp')
        
        with get_db_connection() as conn:
            db_data.update_user_contact(conn, user_id, new_contact)
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–µ—Å—Å–∏–∏
            context.user_data['current_user'] = db_data.get_user_by_id(conn, user_id)

        await update.message.reply_text("‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
        
        # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        context.user_data.pop('verification_code', None)
        context.user_data.pop('new_contact_temp', None)
        
        context.user_data['just_edited_profile'] = True
        return ConversationHandler.END
    else:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return AWAIT_CONTACT_VERIFICATION_CODE # –û—Å—Ç–∞–µ–º—Å—è –≤ –æ–∂–∏–¥–∞–Ω–∏–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞

# --------------------------
# --- –ì–õ–ê–í–ù–´–ô HANDLER ---
# --------------------------

def main() -> None:
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    edit_profile_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(start_profile_edit, pattern="^edit_profile$")],
        states={
            EDIT_PROFILE_MENU: [
                CallbackQueryHandler(select_field_to_edit, pattern="^edit_field_")
            ],
            EDITING_FULL_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_full_name_edit)],
            EDITING_CONTACT: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_contact_edit)],
            AWAIT_CONTACT_VERIFICATION_CODE: [MessageHandler(filters.TEXT & ~filters.COMMAND, verify_new_contact_code)],
            EDITING_PASSWORD_CURRENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, check_current_password)],
            EDITING_PASSWORD_NEW: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_new_password)],
            EDITING_PASSWORD_CONFIRM: [MessageHandler(filters.TEXT & ~filters.COMMAND, confirm_and_set_new_password)],
        },
        fallbacks=[
            CommandHandler("cancel", cancel),
            CallbackQueryHandler(view_profile, pattern="^user_profile$")
        ],
        map_to_parent={
            ConversationHandler.END: USER_MENU,
        }
    )

    main_conv_states = {
        START_ROUTES: [
            CallbackQueryHandler(start_registration, pattern="^register$"),
            CallbackQueryHandler(start_login, pattern="^login$"),
        ],
        REGISTER_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
        REGISTER_DOB: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_dob)],
        REGISTER_CONTACT: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_contact)],
        REGISTER_VERIFY_CODE: [MessageHandler(filters.TEXT & ~filters.COMMAND, verify_registration_code)],
        REGISTER_STATUS: [CallbackQueryHandler(get_status, pattern=r"^(—Å—Ç—É–¥–µ–Ω—Ç|—É—á–∏—Ç–µ–ª—å)$")],
        REGISTER_USERNAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_username)],
        REGISTER_PASSWORD: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_password)],
        REGISTER_CONFIRM_PASSWORD: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_password_confirmation)],
        LOGIN_CONTACT: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, get_login_contact),
            CallbackQueryHandler(start_forgot_password, pattern="^forgot_password$")
        ],
        LOGIN_PASSWORD: [MessageHandler(filters.TEXT & ~filters.COMMAND, check_login_password)],
        FORGOT_PASSWORD_CONTACT: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_forgot_password_contact)],
        FORGOT_PASSWORD_VERIFY_CODE: [MessageHandler(filters.TEXT & ~filters.COMMAND, verify_forgot_password_code)],
        FORGOT_PASSWORD_SET_NEW: [MessageHandler(filters.TEXT & ~filters.COMMAND, set_new_password)],
        FORGOT_PASSWORD_CONFIRM_NEW: [MessageHandler(filters.TEXT & ~filters.COMMAND, confirm_new_password)],
        USER_MENU: [
            CallbackQueryHandler(start_return_book, pattern="^user_return$"),
            CallbackQueryHandler(start_rate_book, pattern="^user_rate$"),
            CallbackQueryHandler(view_profile, pattern="^user_profile$"),
            CallbackQueryHandler(view_borrow_history, pattern="^user_history$"),
            CallbackQueryHandler(show_notifications, pattern="^user_notifications$"),
            CallbackQueryHandler(ask_delete_self_confirmation, pattern="^user_delete_account$"),
            CallbackQueryHandler(logout, pattern="^logout$"),
            CallbackQueryHandler(user_menu, pattern="^user_menu$"),
            CallbackQueryHandler(show_genres, pattern="^find_by_genre$"),
            CallbackQueryHandler(start_search, pattern="^search_book$"),
            edit_profile_handler, 
        ],
        USER_BORROW_BOOK_SELECT: [
            CallbackQueryHandler(process_borrow_selection, pattern=r"^borrow_book_"),
            CallbackQueryHandler(user_menu, pattern="^user_menu$")
        ],
        USER_RESERVE_BOOK_CONFIRM: [CallbackQueryHandler(process_reservation_decision, pattern=r"^reserve_(yes|no)$")],
        USER_RETURN_BOOK: [
            CallbackQueryHandler(process_return_book, pattern=r"^return_\d+$"),
            CallbackQueryHandler(user_menu, pattern="^user_menu$")
        ],
        USER_RATE_PROMPT_AFTER_RETURN: [
            CallbackQueryHandler(initiate_rating_from_return, pattern="^rate_after_return$"),
            CallbackQueryHandler(user_menu, pattern="^user_menu$")
        ],
        USER_RATE_BOOK_SELECT: [
            CallbackQueryHandler(select_rating, pattern=r"^rate_\d+$"),
            CallbackQueryHandler(user_menu, pattern="^user_menu$")
        ],
        USER_RATE_BOOK_RATING: [
            CallbackQueryHandler(process_rating, pattern=r"^rating_\d+$"),
            CallbackQueryHandler(start_rate_book, pattern="^user_rate$"),
            CallbackQueryHandler(user_menu, pattern="^user_menu$"),
        ],
        USER_DELETE_CONFIRM: [
            CallbackQueryHandler(process_delete_self_confirmation, pattern="^user_confirm_self_delete$"),
            CallbackQueryHandler(view_profile, pattern="^user_profile$"),
        ],
        SHOWING_GENRES: [
            CallbackQueryHandler(show_books_in_genre, pattern=r"^genre_"),
            CallbackQueryHandler(user_menu, pattern="^user_menu$")
        ],
        SHOWING_GENRE_BOOKS: [
            CallbackQueryHandler(show_genres, pattern="^find_by_genre$"),
            CallbackQueryHandler(user_menu, pattern="^user_menu$")
        ],
        GETTING_SEARCH_QUERY: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, process_search_query),
            CallbackQueryHandler(user_menu, pattern="^user_menu$")
        ],
        SHOWING_SEARCH_RESULTS: [
            CallbackQueryHandler(show_book_card_user, pattern="^view_book_"),
            CallbackQueryHandler(process_borrow_selection, pattern=r"^borrow_book_"), 
            CallbackQueryHandler(start_search, pattern="^search_book$"),
            CallbackQueryHandler(user_menu, pattern="^user_menu$"),
            CallbackQueryHandler(navigate_search_results, pattern="^search_page_"),
        ],
        AWAITING_NOTIFICATION_BOT: [
            CallbackQueryHandler(check_notification_subscription, pattern="^confirm_subscription$")
        ],
    }

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states=main_conv_states,
        fallbacks=[CommandHandler("start", start), CommandHandler("cancel", cancel)],
    )

    application.add_handler(conv_handler)
    application.run_polling()

if __name__ == "__main__":
    main()